
MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be84  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800c028  0800c028  0001c028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c71c  0800c71c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c71c  0800c71c  0001c71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c724  0800c724  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c724  0800c724  0001c724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c728  0800c728  0001c728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c72c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001f0  0800c918  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800c918  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe78  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e42  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00031ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00032b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017260  00000000  00000000  000336f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df8c  00000000  00000000  0004a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b1b0  00000000  00000000  000588e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3a94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bb0  00000000  00000000  000e3ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c00c 	.word	0x0800c00c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c00c 	.word	0x0800c00c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <DWT_Init>:
#define INC_MICROS_H_

#include "main.h"

__STATIC_INLINE void DWT_Init(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <DWT_Init+0x28>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a07      	ldr	r2, [pc, #28]	; (8001024 <DWT_Init+0x28>)
 8001006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800100a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <DWT_Init+0x2c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a05      	ldr	r2, [pc, #20]	; (8001028 <DWT_Init+0x2c>)
 8001012:	f043 0301 	orr.w	r3, r3, #1
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000edf0 	.word	0xe000edf0
 8001028:	e0001000 	.word	0xe0001000

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	f5ad 6dae 	sub.w	sp, sp, #1392	; 0x570
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f003 fe00 	bl	8004c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f92a 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 f9e8 	bl	8001410 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001040:	f000 f9bc 	bl	80013bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001044:	f000 f98c 	bl	8001360 <MX_I2C1_Init>
  DWT_Init();
 8001048:	f7ff ffd8 	bl	8000ffc <DWT_Init>
  /* USER CODE BEGIN 2 */
  MPU9250SetDefault(&mpu);
 800104c:	488b      	ldr	r0, [pc, #556]	; (800127c <main+0x250>)
 800104e:	f001 fc99 	bl	8002984 <MPU9250SetDefault>
  HAL_Delay(2000);
 8001052:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001056:	f003 fe61 	bl	8004d1c <HAL_Delay>
  if (!(setupMPU(&mpu, MPU9250_ADDRESS)==1)) {  // change to your own address
 800105a:	21d0      	movs	r1, #208	; 0xd0
 800105c:	4887      	ldr	r0, [pc, #540]	; (800127c <main+0x250>)
 800105e:	f000 fa99 	bl	8001594 <setupMPU>
 8001062:	4603      	mov	r3, r0
 8001064:	2b01      	cmp	r3, #1
 8001066:	d018      	beq.n	800109a <main+0x6e>
	  char badmpu[] = "Check MPU\n\r";
 8001068:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800106c:	4a84      	ldr	r2, [pc, #528]	; (8001280 <main+0x254>)
 800106e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001070:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          while (1) {
        	  HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
 8001074:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff f8b1 	bl	80001e0 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108a:	487e      	ldr	r0, [pc, #504]	; (8001284 <main+0x258>)
 800108c:	f005 fd19 	bl	8006ac2 <HAL_UART_Transmit>
        	  HAL_Delay(5000);
 8001090:	f241 3088 	movw	r0, #5000	; 0x1388
 8001094:	f003 fe42 	bl	8004d1c <HAL_Delay>
        	  HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
 8001098:	e7ec      	b.n	8001074 <main+0x48>
          }

  }
  //calibrate(&mpu);
  setMPUSettings(&mpu);
 800109a:	4878      	ldr	r0, [pc, #480]	; (800127c <main+0x250>)
 800109c:	f000 fa18 	bl	80014d0 <setMPUSettings>
  //accel bias [g]:  11.1511   0.0000   0.0000  ␊
  //gyro bias [deg/s]:  0.0000   0.6698   0.0000  ␊
  //mag bias [mG]:  19.1250   143.4375   0.0000  ␊
  //mag scale []:  1.3571   0.9382   0.8351
  HAL_Delay(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f003 fe3b 	bl	8004d1c <HAL_Delay>
  float g[3];
  float m[3];
  float heading, pitch, roll;
  float q[4];

  uint32_t prev_ms = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
  	        	  	  	uint8_t str8[100];
  	        	  	  	uint8_t str9[100];
  uint8_t head[100];
  uint8_t rl[100];
  uint8_t ptc[100];
  char new_line[] = " \n\r   ";
 80010ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80010b0:	4a75      	ldr	r2, [pc, #468]	; (8001288 <main+0x25c>)
 80010b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b6:	6018      	str	r0, [r3, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	8019      	strh	r1, [r3, #0]
 80010bc:	3302      	adds	r3, #2
 80010be:	0c0a      	lsrs	r2, r1, #16
 80010c0:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (updateMPU(&mpu)==1) {
 80010c2:	486e      	ldr	r0, [pc, #440]	; (800127c <main+0x250>)
 80010c4:	f000 fb7c 	bl	80017c0 <updateMPU>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d1f9      	bne.n	80010c2 <main+0x96>

	          //prev_ms = HAL_GetTick();
	          if ((HAL_GetTick() - prev_ms) > 200) {
 80010ce:	f003 fe19 	bl	8004d04 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	f8d7 356c 	ldr.w	r3, [r7, #1388]	; 0x56c
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2bc8      	cmp	r3, #200	; 0xc8
 80010dc:	d9f1      	bls.n	80010c2 <main+0x96>
	        	  char ok[] = "ok";
 80010de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010e2:	4a6a      	ldr	r2, [pc, #424]	; (800128c <main+0x260>)
 80010e4:	6812      	ldr	r2, [r2, #0]
 80010e6:	4611      	mov	r1, r2
 80010e8:	8019      	strh	r1, [r3, #0]
 80010ea:	3302      	adds	r3, #2
 80010ec:	0c12      	lsrs	r2, r2, #16
 80010ee:	701a      	strb	r2, [r3, #0]
	        	  		  	  HAL_UART_Transmit(&huart1, ok, strlen((char *)ok), 0xFFFF);
 80010f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f873 	bl	80001e0 <strlen>
 80010fa:	4603      	mov	r3, r0
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001106:	485f      	ldr	r0, [pc, #380]	; (8001284 <main+0x258>)
 8001108:	f005 fcdb 	bl	8006ac2 <HAL_UART_Transmit>

	        	  	  a[0] = getAccX(&mpu);
 800110c:	485b      	ldr	r0, [pc, #364]	; (800127c <main+0x250>)
 800110e:	f000 fc95 	bl	8001a3c <getAccX>
 8001112:	eef0 7a40 	vmov.f32	s15, s0
 8001116:	f207 5354 	addw	r3, r7, #1364	; 0x554
 800111a:	edc3 7a00 	vstr	s15, [r3]
	        	  	  a[1] = getAccY(&mpu);
 800111e:	4857      	ldr	r0, [pc, #348]	; (800127c <main+0x250>)
 8001120:	f000 fc9b 	bl	8001a5a <getAccY>
 8001124:	eef0 7a40 	vmov.f32	s15, s0
 8001128:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800112c:	edc3 7a00 	vstr	s15, [r3]
	        	  	  a[2] = getAccZ(&mpu);
 8001130:	4852      	ldr	r0, [pc, #328]	; (800127c <main+0x250>)
 8001132:	f000 fca1 	bl	8001a78 <getAccZ>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 800113e:	edc3 7a00 	vstr	s15, [r3]
	        	  	  g[0] = getGyroX(&mpu);
 8001142:	484e      	ldr	r0, [pc, #312]	; (800127c <main+0x250>)
 8001144:	f000 fca7 	bl	8001a96 <getGyroX>
 8001148:	eef0 7a40 	vmov.f32	s15, s0
 800114c:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8001150:	edc3 7a00 	vstr	s15, [r3]
	        	  	  g[1] = getGyroY(&mpu);
 8001154:	4849      	ldr	r0, [pc, #292]	; (800127c <main+0x250>)
 8001156:	f000 fcad 	bl	8001ab4 <getGyroY>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 8001162:	edc3 7a00 	vstr	s15, [r3]
	        	  	  g[2] = getGyroZ(&mpu);
 8001166:	4845      	ldr	r0, [pc, #276]	; (800127c <main+0x250>)
 8001168:	f000 fcb3 	bl	8001ad2 <getGyroZ>
 800116c:	eef0 7a40 	vmov.f32	s15, s0
 8001170:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8001174:	edc3 7a00 	vstr	s15, [r3]
	        	  	  m[0] = getMagX(&mpu);
 8001178:	4840      	ldr	r0, [pc, #256]	; (800127c <main+0x250>)
 800117a:	f000 fcba 	bl	8001af2 <getMagX>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 8001186:	edc3 7a00 	vstr	s15, [r3]
	        	  	  m[1] = getMagY(&mpu);
 800118a:	483c      	ldr	r0, [pc, #240]	; (800127c <main+0x250>)
 800118c:	f000 fcc1 	bl	8001b12 <getMagY>
 8001190:	eef0 7a40 	vmov.f32	s15, s0
 8001194:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8001198:	edc3 7a00 	vstr	s15, [r3]
	        	  	  m[2] = getMagZ(&mpu);
 800119c:	4837      	ldr	r0, [pc, #220]	; (800127c <main+0x250>)
 800119e:	f000 fcc8 	bl	8001b32 <getMagZ>
 80011a2:	eef0 7a40 	vmov.f32	s15, s0
 80011a6:	f207 5344 	addw	r3, r7, #1348	; 0x544
 80011aa:	edc3 7a00 	vstr	s15, [r3]
	        	  	  heading = getYaw(&mpu);
 80011ae:	4833      	ldr	r0, [pc, #204]	; (800127c <main+0x250>)
 80011b0:	f000 fbf4 	bl	800199c <getYaw>
 80011b4:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80011b8:	ed83 0a00 	vstr	s0, [r3]
	        	  	  roll = getRoll(&mpu);
 80011bc:	482f      	ldr	r0, [pc, #188]	; (800127c <main+0x250>)
 80011be:	f000 fbcd 	bl	800195c <getRoll>
 80011c2:	f207 5364 	addw	r3, r7, #1380	; 0x564
 80011c6:	ed83 0a00 	vstr	s0, [r3]
	        	  	  pitch = getPitch(&mpu);
 80011ca:	482c      	ldr	r0, [pc, #176]	; (800127c <main+0x250>)
 80011cc:	f000 fbd6 	bl	800197c <getPitch>
 80011d0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80011d4:	ed83 0a00 	vstr	s0, [r3]
	        	  	  q[0] = getQuaternionX(&mpu);
 80011d8:	4828      	ldr	r0, [pc, #160]	; (800127c <main+0x250>)
 80011da:	f000 fbef 	bl	80019bc <getQuaternionX>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 80011e6:	edc3 7a00 	vstr	s15, [r3]
	        	  	  q[1] = getQuaternionY(&mpu);
 80011ea:	4824      	ldr	r0, [pc, #144]	; (800127c <main+0x250>)
 80011ec:	f000 fbf6 	bl	80019dc <getQuaternionY>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80011f8:	edc3 7a00 	vstr	s15, [r3]
	        	  	  q[2] = getQuaternionZ(&mpu);
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <main+0x250>)
 80011fe:	f000 fbfd 	bl	80019fc <getQuaternionZ>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800120a:	edc3 7a00 	vstr	s15, [r3]
	        	  	  q[3] = getQuaternionW(&mpu);
 800120e:	481b      	ldr	r0, [pc, #108]	; (800127c <main+0x250>)
 8001210:	f000 fc04 	bl	8001a1c <getQuaternionW>
 8001214:	eef0 7a40 	vmov.f32	s15, s0
 8001218:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800121c:	edc3 7a00 	vstr	s15, [r3]
	        	  	  print_float(head, heading);
 8001220:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001224:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 8001228:	ed92 0a00 	vldr	s0, [r2]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fa49 	bl	80016c4 <print_float>
	        	  	  print_float(rl, roll);
 8001232:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001236:	f207 5264 	addw	r2, r7, #1380	; 0x564
 800123a:	ed92 0a00 	vldr	s0, [r2]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fa40 	bl	80016c4 <print_float>
	        	  	  print_float(ptc, pitch);
 8001244:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001248:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800124c:	ed92 0a00 	vldr	s0, [r2]
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fa37 	bl	80016c4 <print_float>
	        	  	  HAL_UART_Transmit(&huart1, new_line, strlen((char *)new_line), 0xFFFF);
 8001256:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800125a:	4618      	mov	r0, r3
 800125c:	f7fe ffc0 	bl	80001e0 <strlen>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <main+0x258>)
 800126e:	f005 fc28 	bl	8006ac2 <HAL_UART_Transmit>
	        	  	  	  	HAL_UART_Transmit(&huart1, str6, strlen((char *)str6), 0xFFFF);
	        	  	  	  	HAL_UART_Transmit(&huart1, str7, strlen((char *)str7), 0xFFFF);
	        	  	  	  	HAL_UART_Transmit(&huart1, str8, strlen((char *)str8), 0xFFFF);
	        	  	  	  	HAL_UART_Transmit(&huart1, str9, strlen((char *)str9), 0xFFFF);*/

	              prev_ms = HAL_GetTick();
 8001272:	f003 fd47 	bl	8004d04 <HAL_GetTick>
 8001276:	f8c7 056c 	str.w	r0, [r7, #1388]	; 0x56c
  {
 800127a:	e722      	b.n	80010c2 <main+0x96>
 800127c:	200002c4 	.word	0x200002c4
 8001280:	0800c028 	.word	0x0800c028
 8001284:	20000280 	.word	0x20000280
 8001288:	0800c034 	.word	0x0800c034
 800128c:	0800c03c 	.word	0x0800c03c

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2230      	movs	r2, #48	; 0x30
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 ff10 	bl	80070c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <SystemClock_Config+0xc8>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <SystemClock_Config+0xc8>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
 80012c4:	4b24      	ldr	r3, [pc, #144]	; (8001358 <SystemClock_Config+0xc8>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <SystemClock_Config+0xcc>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <SystemClock_Config+0xcc>)
 80012da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <SystemClock_Config+0xcc>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	2302      	movs	r3, #2
 80012ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f0:	2301      	movs	r3, #1
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	2310      	movs	r3, #16
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001300:	2308      	movs	r3, #8
 8001302:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001304:	2348      	movs	r3, #72	; 0x48
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001308:	2302      	movs	r3, #2
 800130a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800130c:	2304      	movs	r3, #4
 800130e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4618      	mov	r0, r3
 8001316:	f004 ff3f 	bl	8006198 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001320:	f000 f91a 	bl	8001558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
 8001326:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001328:	2302      	movs	r3, #2
 800132a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001334:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	2102      	movs	r1, #2
 8001340:	4618      	mov	r0, r3
 8001342:	f005 f9a1 	bl	8006688 <HAL_RCC_ClockConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800134c:	f000 f904 	bl	8001558 <Error_Handler>
  }
}
 8001350:	bf00      	nop
 8001352:	3750      	adds	r7, #80	; 0x50
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40007000 	.word	0x40007000

08001360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001366:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <MX_I2C1_Init+0x54>)
 8001368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_I2C1_Init+0x50>)
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <MX_I2C1_Init+0x58>)
 800136e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_I2C1_Init+0x50>)
 800137e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_I2C1_Init+0x50>)
 800139e:	f003 ff65 	bl	800526c <HAL_I2C_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013a8:	f000 f8d6 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	40005400 	.word	0x40005400
 80013b8:	000186a0 	.word	0x000186a0

080013bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <MX_USART1_UART_Init+0x50>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <MX_USART1_UART_Init+0x4c>)
 80013f4:	f005 fb18 	bl	8006a28 <HAL_UART_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013fe:	f000 f8ab 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000280 	.word	0x20000280
 800140c:	40011000 	.word	0x40011000

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <MX_GPIO_Init+0xb8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <MX_GPIO_Init+0xb8>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <MX_GPIO_Init+0xb8>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_GPIO_Init+0xb8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800149c:	480b      	ldr	r0, [pc, #44]	; (80014cc <MX_GPIO_Init+0xbc>)
 800149e:	f003 fecb 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <MX_GPIO_Init+0xbc>)
 80014bc:	f003 fd38 	bl	8004f30 <HAL_GPIO_Init>

}
 80014c0:	bf00      	nop
 80014c2:	3728      	adds	r7, #40	; 0x28
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800

080014d0 <setMPUSettings>:

/* USER CODE BEGIN 4 */


void setMPUSettings(MPU9250_t * MPU0250){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	//accel bias [g]:  11.1511   0.0000   0.0000  ␊
	  //gyro bias [deg/s]:  0.0000   0.6698   0.0000  ␊
	  //mag bias [mG]:  19.1250   143.4375   0.0000  ␊
	  //mag scale []:  1.3571   0.9382   0.8351
	setAccBias(MPU0250, 11.1511, 0.0, 0.00);
 80014d8:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8001534 <setMPUSettings+0x64>
 80014dc:	eddf 0a15 	vldr	s1, [pc, #84]	; 8001534 <setMPUSettings+0x64>
 80014e0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001538 <setMPUSettings+0x68>
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fb34 	bl	8001b52 <setAccBias>
	setGyroBias(MPU0250, 0.0, 0.6698, 0.0);
 80014ea:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8001534 <setMPUSettings+0x64>
 80014ee:	eddf 0a13 	vldr	s1, [pc, #76]	; 800153c <setMPUSettings+0x6c>
 80014f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001534 <setMPUSettings+0x64>
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 fb45 	bl	8001b86 <setGyroBias>
	setMagBias(MPU0250, 19.125, 143.4375, 0.0000);
 80014fc:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001534 <setMPUSettings+0x64>
 8001500:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8001540 <setMPUSettings+0x70>
 8001504:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001544 <setMPUSettings+0x74>
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fb56 	bl	8001bba <setMagBias>
	setMagScale(MPU0250, 1.3571, 0.9382, 0.8351);
 800150e:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8001548 <setMPUSettings+0x78>
 8001512:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800154c <setMPUSettings+0x7c>
 8001516:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001550 <setMPUSettings+0x80>
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 fb66 	bl	8001bec <setMagScale>
	/*setAccBias(MPU0250, 280.60, 163.00, 264.40);
	setGyroBias(MPU0250, 12.63, -72.50, -73.97);
	setMagBias(MPU0250, 75.03, 296.37, -636.671);
	setMagScale(MPU0250, 1.11, 1.03, 0.890);*/

	setMagneticDeclination(MPU0250, 10.91);
 8001520:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001554 <setMPUSettings+0x84>
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 fb7a 	bl	8001c1e <setMagneticDeclination>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	00000000 	.word	0x00000000
 8001538:	41326ae8 	.word	0x41326ae8
 800153c:	3f2b7803 	.word	0x3f2b7803
 8001540:	430f7000 	.word	0x430f7000
 8001544:	41990000 	.word	0x41990000
 8001548:	3f55c91d 	.word	0x3f55c91d
 800154c:	3f702de0 	.word	0x3f702de0
 8001550:	3fadb574 	.word	0x3fadb574
 8001554:	412e8f5c 	.word	0x412e8f5c

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <micros+0x24>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <micros+0x28>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <micros+0x2c>)
 8001572:	fba1 1303 	umull	r1, r3, r1, r3
 8001576:	0c9b      	lsrs	r3, r3, #18
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e0001000 	.word	0xe0001000
 800158c:	20000008 	.word	0x20000008
 8001590:	431bde83 	.word	0x431bde83

08001594 <setupMPU>:
float zeta = sqrt(3.0f / 4.0f) * PI * (0.0 / 180.0);
double deltaT = 0.0;
uint32_t newTime = 0;
uint32_t oldTime = 0;

uint8_t setupMPU(MPU9250_t *MPU9250, uint8_t addr) {
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b094      	sub	sp, #80	; 0x50
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
        // addr should be valid for MPU
	char badmpu1[] = "CHECK SETUP\n\r";
 80015a0:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <setupMPU+0x11c>)
 80015a2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80015a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a8:	c407      	stmia	r4!, {r0, r1, r2}
 80015aa:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, badmpu1, strlen((char *)badmpu1), 0xFFFF);
 80015ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7fe fe15 	bl	80001e0 <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80015be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015c2:	483c      	ldr	r0, [pc, #240]	; (80016b4 <setupMPU+0x120>)
 80015c4:	f005 fa7d 	bl	8006ac2 <HAL_UART_Transmit>
        if ((addr>>1 < MPU9250_DEFAULT_ADDRESS) || (addr>>1 > MPU9250_DEFAULT_ADDRESS + 7)) {
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b67      	cmp	r3, #103	; 0x67
 80015d0:	d904      	bls.n	80015dc <setupMPU+0x48>
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	085b      	lsrs	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b6f      	cmp	r3, #111	; 0x6f
 80015da:	d915      	bls.n	8001608 <setupMPU+0x74>
        	char badmpu[] = "Bad Address\n\r";
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <setupMPU+0x124>)
 80015de:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80015e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e4:	c407      	stmia	r4!, {r0, r1, r2}
 80015e6:	8023      	strh	r3, [r4, #0]
        	HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
 80015e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fdf7 	bl	80001e0 <strlen>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80015fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015fe:	482d      	ldr	r0, [pc, #180]	; (80016b4 <setupMPU+0x120>)
 8001600:	f005 fa5f 	bl	8006ac2 <HAL_UART_Transmit>
            return 0;
 8001604:	2300      	movs	r3, #0
 8001606:	e04f      	b.n	80016a8 <setupMPU+0x114>
        }
        //mpu_i2c_addr = addr;


        if (isConnectedMPU9250(MPU9250)==1) {
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f87d 	bl	8001708 <isConnectedMPU9250>
 800160e:	4603      	mov	r3, r0
 8001610:	2b01      	cmp	r3, #1
 8001612:	d12e      	bne.n	8001672 <setupMPU+0xde>
        	MPU9250_Init(MPU9250);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f001 f819 	bl	800264c <MPU9250_Init>
            if (isConnectedAK8963(MPU9250)==1)
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8a1 	bl	8001762 <isConnectedAK8963>
 8001620:	4603      	mov	r3, r0
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <setupMPU+0xa4>
                initAK8963(MPU9250);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 ff9e 	bl	8002568 <initAK8963>
        	char badmpu[] = "Check MPU ADDRESS\n\r";
        	HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
        	MPU9250->has_connected = 0;
            return 0;
        }
        MPU9250->has_connected = 1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        return 1;
 8001634:	2301      	movs	r3, #1
 8001636:	e037      	b.n	80016a8 <setupMPU+0x114>
            	char badmpu[] = "Check AK8963\n\r";
 8001638:	4b20      	ldr	r3, [pc, #128]	; (80016bc <setupMPU+0x128>)
 800163a:	f107 0420 	add.w	r4, r7, #32
 800163e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001640:	c407      	stmia	r4!, {r0, r1, r2}
 8001642:	8023      	strh	r3, [r4, #0]
 8001644:	3402      	adds	r4, #2
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	7023      	strb	r3, [r4, #0]
            	HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdc6 	bl	80001e0 <strlen>
 8001654:	4603      	mov	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	f107 0120 	add.w	r1, r7, #32
 800165c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001660:	4814      	ldr	r0, [pc, #80]	; (80016b4 <setupMPU+0x120>)
 8001662:	f005 fa2e 	bl	8006ac2 <HAL_UART_Transmit>
            	MPU9250->has_connected = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                return 0;
 800166e:	2300      	movs	r3, #0
 8001670:	e01a      	b.n	80016a8 <setupMPU+0x114>
        	char badmpu[] = "Check MPU ADDRESS\n\r";
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <setupMPU+0x12c>)
 8001674:	f107 040c 	add.w	r4, r7, #12
 8001678:	461d      	mov	r5, r3
 800167a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800167e:	682b      	ldr	r3, [r5, #0]
 8001680:	6023      	str	r3, [r4, #0]
        	HAL_UART_Transmit(&huart1, badmpu, strlen((char *)badmpu), 0xFFFF);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe fdaa 	bl	80001e0 <strlen>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <setupMPU+0x120>)
 800169a:	f005 fa12 	bl	8006ac2 <HAL_UART_Transmit>
        	MPU9250->has_connected = 0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            return 0;
 80016a6:	2300      	movs	r3, #0
    }
 80016a8:	4618      	mov	r0, r3
 80016aa:	3750      	adds	r7, #80	; 0x50
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdb0      	pop	{r4, r5, r7, pc}
 80016b0:	0800c040 	.word	0x0800c040
 80016b4:	20000280 	.word	0x20000280
 80016b8:	0800c050 	.word	0x0800c050
 80016bc:	0800c060 	.word	0x0800c060
 80016c0:	0800c070 	.word	0x0800c070

080016c4 <print_float>:
	HAL_Delay(5000);
	calibrate_mag_impl(MPU9250);
	print_calibration(MPU9250);
}

void print_float(char *str, float data){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	ed87 0a00 	vstr	s0, [r7]
	//sprintf(str, " %d.%05d  ",(uint32_t)fabs(data), (uint16_t)((data - (uint32_t)data)*100000.));
	sprintf(str, "  %.4f  ", data);
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f7fe ff41 	bl	8000558 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <print_float+0x3c>)
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f006 fb79 	bl	8007dd4 <siprintf>
	HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f0:	6879      	ldr	r1, [r7, #4]
 80016f2:	4804      	ldr	r0, [pc, #16]	; (8001704 <print_float+0x40>)
 80016f4:	f005 f9e5 	bl	8006ac2 <HAL_UART_Transmit>
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	0800c144 	.word	0x0800c144
 8001704:	20000280 	.word	0x20000280

08001708 <isConnectedMPU9250>:
	            c = c & 0xBF;  // mask 1011111 keeps all the previous bits
	        }
	        writeByte(MPU9250_ADDRESS, PWR_MGMT_1, c);
}

uint8_t isConnectedMPU9250(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
 800170e:	2175      	movs	r1, #117	; 0x75
 8001710:	20d0      	movs	r0, #208	; 0xd0
 8001712:	f001 f8b7 	bl	8002884 <readByte>
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (c == MPU9250_WHOAMI_DEFAULT_VALUE);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	2b71      	cmp	r3, #113	; 0x71
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU9255_WHOAMI_DEFAULT_VALUE);
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b73      	cmp	r3, #115	; 0x73
 800172c:	bf0c      	ite	eq
 800172e:	2301      	moveq	r3, #1
 8001730:	2300      	movne	r3, #0
 8001732:	b2db      	uxtb	r3, r3
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	71bb      	strb	r3, [r7, #6]
	b |= (c == MPU6500_WHOAMI_DEFAULT_VALUE);
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	2b70      	cmp	r3, #112	; 0x70
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b25a      	sxtb	r2, r3
 800174e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001752:	4313      	orrs	r3, r2
 8001754:	b25b      	sxtb	r3, r3
 8001756:	71bb      	strb	r3, [r7, #6]
	return b;
 8001758:	79bb      	ldrb	r3, [r7, #6]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <isConnectedAK8963>:
uint8_t isConnectedAK8963(){
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
	uint8_t c = readByte(AK8963_ADDRESS, WHO_AM_I_AK8963);
 8001768:	2100      	movs	r1, #0
 800176a:	2018      	movs	r0, #24
 800176c:	f001 f88a 	bl	8002884 <readByte>
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
	return (c == AK8963_WHOAMI_DEFAULT_VALUE);
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b48      	cmp	r3, #72	; 0x48
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <MPUavailable>:

uint8_t MPUisSleeping(){
	uint8_t c = readByte(MPU9250_ADDRESS, PWR_MGMT_1);
	return (c & 0x40) == 0x40;
}
uint8_t MPUavailable(MPU9250_t *MPU9250){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	return MPU9250 -> has_connected && (readByte(MPU9250_ADDRESS, INT_STATUS) & 0x01);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <MPUavailable+0x28>
 800179a:	213a      	movs	r1, #58	; 0x3a
 800179c:	20d0      	movs	r0, #208	; 0xd0
 800179e:	f001 f871 	bl	8002884 <readByte>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MPUavailable+0x28>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <MPUavailable+0x2a>
 80017b0:	2300      	movs	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0000      	movs	r0, r0
	...

080017c0 <updateMPU>:

uint8_t updateMPU(MPU9250_t *MPU9250){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if (!MPUavailable(MPU9250)==1) return 0;
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffdd 	bl	8001788 <MPUavailable>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <updateMPU+0x18>
 80017d4:	2300      	movs	r3, #0
 80017d6:	e0b7      	b.n	8001948 <updateMPU+0x188>

	        update_accel_gyro(MPU9250);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fb65 	bl	8001ea8 <update_accel_gyro>
	        update_mag(MPU9250);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fbf2 	bl	8001fc8 <update_mag>
	        // get quaternion based on aircraft coordinate (Right-Hand, X-Forward, Z-Down)
	        // acc[mg], gyro[deg/s], mag [mG]
	        // gyro will be convert from [deg/s] to [rad/s] inside of this function
	        // quat_filter.update(-a[0], a[1], a[2], g[0] * DEG_TO_RAD, -g[1] * DEG_TO_RAD, -g[2] * DEG_TO_RAD, m[1], -m[0], m[2], q);

	        float an = -MPU9250->a[0];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80017ea:	eef1 7a67 	vneg.f32	s15, s15
 80017ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	        float ae = +MPU9250->a[1];
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
	        float ad = +MPU9250->a[2];
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017fc:	623b      	str	r3, [r7, #32]
	        float gn = +MPU9250->g[0] * DEG_TO_RAD;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fea8 	bl	8000558 <__aeabi_f2d>
 8001808:	a351      	add	r3, pc, #324	; (adr r3, 8001950 <updateMPU+0x190>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fefb 	bl	8000608 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <updateMPU+0x198>)
 8001820:	f7ff f81c 	bl	800085c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f9e4 	bl	8000bf8 <__aeabi_d2f>
 8001830:	4603      	mov	r3, r0
 8001832:	61fb      	str	r3, [r7, #28]
	        float ge = -MPU9250->g[1] * DEG_TO_RAD;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800183a:	eef1 7a67 	vneg.f32	s15, s15
 800183e:	ee17 3a90 	vmov	r3, s15
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe88 	bl	8000558 <__aeabi_f2d>
 8001848:	a341      	add	r3, pc, #260	; (adr r3, 8001950 <updateMPU+0x190>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fedb 	bl	8000608 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b3e      	ldr	r3, [pc, #248]	; (8001958 <updateMPU+0x198>)
 8001860:	f7fe fffc 	bl	800085c <__aeabi_ddiv>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f7ff f9c4 	bl	8000bf8 <__aeabi_d2f>
 8001870:	4603      	mov	r3, r0
 8001872:	61bb      	str	r3, [r7, #24]
	        float gd = -MPU9250->g[2] * DEG_TO_RAD;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800187a:	eef1 7a67 	vneg.f32	s15, s15
 800187e:	ee17 3a90 	vmov	r3, s15
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe68 	bl	8000558 <__aeabi_f2d>
 8001888:	a331      	add	r3, pc, #196	; (adr r3, 8001950 <updateMPU+0x190>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f7fe febb 	bl	8000608 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <updateMPU+0x198>)
 80018a0:	f7fe ffdc 	bl	800085c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f9a4 	bl	8000bf8 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	617b      	str	r3, [r7, #20]
	        float mn = +MPU9250->m[1];
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	613b      	str	r3, [r7, #16]
	        float me = -MPU9250->m[0];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018c2:	eef1 7a67 	vneg.f32	s15, s15
 80018c6:	edc7 7a03 	vstr	s15, [r7, #12]
	        float md = +MPU9250->m[2];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d0:	60bb      	str	r3, [r7, #8]

	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d6:	e019      	b.n	800190c <updateMPU+0x14c>

	        	update_madgwick(an, ae, ad, gn, ge, gd, mn, me, md, MPU9250->q);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3390      	adds	r3, #144	; 0x90
 80018dc:	4618      	mov	r0, r3
 80018de:	ed97 4a02 	vldr	s8, [r7, #8]
 80018e2:	edd7 3a03 	vldr	s7, [r7, #12]
 80018e6:	ed97 3a04 	vldr	s6, [r7, #16]
 80018ea:	edd7 2a05 	vldr	s5, [r7, #20]
 80018ee:	ed97 2a06 	vldr	s4, [r7, #24]
 80018f2:	edd7 1a07 	vldr	s3, [r7, #28]
 80018f6:	ed97 1a08 	vldr	s2, [r7, #32]
 80018fa:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 80018fe:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8001902:	f001 f919 	bl	8002b38 <update_madgwick>
	        for (size_t i = 0; i < MPU9250->n_filter_iter; ++i) {
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	3301      	adds	r3, #1
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001914:	429a      	cmp	r2, r3
 8001916:	d3df      	bcc.n	80018d8 <updateMPU+0x118>
	        }


	        update_rpy(MPU9250, MPU9250->q[0], MPU9250->q[1], MPU9250->q[2], MPU9250->q[3]);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	ed93 6a27 	vldr	s12, [r3, #156]	; 0x9c
 8001930:	eef0 1a46 	vmov.f32	s3, s12
 8001934:	eeb0 1a66 	vmov.f32	s2, s13
 8001938:	eef0 0a47 	vmov.f32	s1, s14
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f97d 	bl	8001c40 <update_rpy>

	        return 1;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3730      	adds	r7, #48	; 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	54442d18 	.word	0x54442d18
 8001954:	400921fb 	.word	0x400921fb
 8001958:	40668000 	.word	0x40668000

0800195c <getRoll>:

float getRoll(MPU9250_t *MPU9250) { return MPU9250->rpy[0]; }
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <getPitch>:
float getPitch(MPU9250_t *MPU9250) { return MPU9250->rpy[1]; }
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eeb0 0a67 	vmov.f32	s0, s15
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <getYaw>:
float getYaw(MPU9250_t *MPU9250) { return MPU9250->rpy[2]; }
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eeb0 0a67 	vmov.f32	s0, s15
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <getQuaternionX>:

float getEulerX(MPU9250_t *MPU9250) { return MPU9250->rpy[0]; }
float getEulerY(MPU9250_t *MPU9250) { return -MPU9250->rpy[1]; }
float getEulerZ(MPU9250_t *MPU9250) { return -MPU9250->rpy[2]; }

float getQuaternionX(MPU9250_t *MPU9250) { return MPU9250->q[1]; }
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <getQuaternionY>:
float getQuaternionY(MPU9250_t *MPU9250) { return MPU9250->q[2]; }
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb0 0a67 	vmov.f32	s0, s15
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <getQuaternionZ>:
float getQuaternionZ(MPU9250_t *MPU9250) { return MPU9250->q[3]; }
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <getQuaternionW>:
float getQuaternionW(MPU9250_t *MPU9250) { return MPU9250->q[0]; }
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2a:	ee07 3a90 	vmov	s15, r3
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <getAccX>:
float getAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->a[i] : 0.f; }
float getGyro(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->g[i] : 0.f; }
float getMag(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->m[i] : 0.f; }
float getLinearAcc(MPU9250_t *MPU9250, const uint8_t i) { return (i < 3) ? MPU9250->lin_acc[i] : 0.f; }

float getAccX(MPU9250_t *MPU9250) { return MPU9250->a[0]; }
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <getAccY>:
float getAccY(MPU9250_t *MPU9250) { return MPU9250->a[1]; }
 8001a5a:	b480      	push	{r7}
 8001a5c:	b083      	sub	sp, #12
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <getAccZ>:
float getAccZ(MPU9250_t *MPU9250) { return MPU9250->a[2]; }
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <getGyroX>:
float getGyroX(MPU9250_t *MPU9250) { return MPU9250->g[0]; }
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <getGyroY>:
float getGyroY(MPU9250_t *MPU9250) { return MPU9250->g[1]; }
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <getGyroZ>:
float getGyroZ(MPU9250_t *MPU9250) { return MPU9250->g[2]; }
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <getMagX>:
float getMagX(MPU9250_t *MPU9250) { return MPU9250->m[0]; }
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <getMagY>:
float getMagY(MPU9250_t *MPU9250) { return MPU9250->m[1]; }
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b20:	ee07 3a90 	vmov	s15, r3
 8001b24:	eeb0 0a67 	vmov.f32	s0, s15
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <getMagZ>:
float getMagZ(MPU9250_t *MPU9250) { return MPU9250->m[2]; }
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b40:	ee07 3a90 	vmov	s15, r3
 8001b44:	eeb0 0a67 	vmov.f32	s0, s15
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <setAccBias>:
float getMagScaleX(MPU9250_t *MPU9250) { return MPU9250->mag_scale[0]; }
float getMagScaleY(MPU9250_t *MPU9250) { return MPU9250->mag_scale[1]; }
float getMagScaleZ(MPU9250_t *MPU9250) { return MPU9250->mag_scale[2]; }
float getTemperature(MPU9250_t *MPU9250) { return MPU9250->temperature; }

void setAccBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b5e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b62:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->acc_bias[0] = x;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
	MPU9250->acc_bias[1] = y;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]
	MPU9250->acc_bias[2] = z;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	615a      	str	r2, [r3, #20]
       write_accel_offset(MPU9250);
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 fb5f 	bl	800223c <write_accel_offset>
   }
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <setGyroBias>:
void setGyroBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b92:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b96:	ed87 1a00 	vstr	s2, [r7]
	   MPU9250->gyro_bias[0] = x;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	619a      	str	r2, [r3, #24]
	   MPU9250->gyro_bias[1] = y;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	61da      	str	r2, [r3, #28]
	   MPU9250->gyro_bias[2] = z;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	621a      	str	r2, [r3, #32]
       write_gyro_offset(MPU9250);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fc4d 	bl	800244c <write_gyro_offset>
   }
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <setMagBias>:
void setMagBias(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 8001bba:	b480      	push	{r7}
 8001bbc:	b085      	sub	sp, #20
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bc6:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bca:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->mag_bias[0] = x;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250->mag_bias[1] = y;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250->mag_bias[2] = z;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	639a      	str	r2, [r3, #56]	; 0x38
   }
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <setMagScale>:
void setMagScale(MPU9250_t *MPU9250, const float x, const float y, const float z) {
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bf8:	edc7 0a01 	vstr	s1, [r7, #4]
 8001bfc:	ed87 1a00 	vstr	s2, [r7]
	MPU9250->mag_scale[0] = x;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250->mag_scale[1] = y;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250->mag_scale[2] = z;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	645a      	str	r2, [r3, #68]	; 0x44
   }
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <setMagneticDeclination>:

void setMagneticDeclination(MPU9250_t *MPU9250, const float d) {
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	ed87 0a00 	vstr	s0, [r7]
	MPU9250->magnetic_declination = d;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	0000      	movs	r0, r0
	...

08001c40 <update_rpy>:

void update_rpy(MPU9250_t *MPU9250, float qw, float qx, float qy, float qz){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6178      	str	r0, [r7, #20]
 8001c48:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c4c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c50:	ed87 1a02 	vstr	s2, [r7, #8]
 8001c54:	edc7 1a01 	vstr	s3, [r7, #4]
	        // These arise from the definition of the homogeneous rotation matrix constructed from quaternions.
	        // Tait-Bryan angles as well as Euler angles are non-commutative; that is, the get the correct orientation the rotations must be
	        // applied in the correct order which for this configuration is yaw, pitch, and then roll.
	        // For more see http://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles which has additional links.
	        float a12, a22, a31, a32, a33;  // rotation matrix coefficients for Euler angles and gravity components
	        a12 = 2.0f * (qx * qy + qw * qz);
 8001c58:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c64:	edd7 6a04 	vldr	s13, [r7, #16]
 8001c68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c78:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	        a22 = qw * qw + qx * qx - qy * qy - qz * qz;
 8001c7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c80:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	        a31 = 2.0f * (qw * qx + qy * qz);
 8001cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ccc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	        a32 = 2.0f * (qx * qz - qw * qy);
 8001cd0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cdc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ce0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cf0:	edc7 7a08 	vstr	s15, [r7, #32]
	        a33 = qw * qw - qx * qx - qy * qy + qz * qz;
 8001cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d20:	edc7 7a07 	vstr	s15, [r7, #28]
	        MPU9250->rpy[0] = atan2f(a31, a33);
 8001d24:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d28:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001d2c:	f009 fe52 	bl	800b9d4 <atan2f>
 8001d30:	eef0 7a40 	vmov.f32	s15, s0
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] = -asinf(a32);
 8001d3a:	ed97 0a08 	vldr	s0, [r7, #32]
 8001d3e:	f009 fe17 	bl	800b970 <asinf>
 8001d42:	eef0 7a40 	vmov.f32	s15, s0
 8001d46:	eef1 7a67 	vneg.f32	s15, s15
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] = atan2f(a12, a22);
 8001d50:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8001d54:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001d58:	f009 fe3c 	bl	800b9d4 <atan2f>
 8001d5c:	eef0 7a40 	vmov.f32	s15, s0
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	        MPU9250->rpy[0] *= 180.0f / PI;
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbf3 	bl	8000558 <__aeabi_f2d>
 8001d72:	a34a      	add	r3, pc, #296	; (adr r3, 8001e9c <update_rpy+0x25c>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fc46 	bl	8000608 <__aeabi_dmul>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7fe ff38 	bl	8000bf8 <__aeabi_d2f>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	        MPU9250->rpy[1] *= 180.0f / PI;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fbde 	bl	8000558 <__aeabi_f2d>
 8001d9c:	a33f      	add	r3, pc, #252	; (adr r3, 8001e9c <update_rpy+0x25c>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fc31 	bl	8000608 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe ff23 	bl	8000bf8 <__aeabi_d2f>
 8001db2:	4602      	mov	r2, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	        MPU9250->rpy[2] *= 180.0f / PI;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbc9 	bl	8000558 <__aeabi_f2d>
 8001dc6:	a335      	add	r3, pc, #212	; (adr r3, 8001e9c <update_rpy+0x25c>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	f7fe fc1c 	bl	8000608 <__aeabi_dmul>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe ff0e 	bl	8000bf8 <__aeabi_d2f>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	        MPU9250->rpy[2] += MPU9250->magnetic_declination;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	        if (MPU9250->rpy[2] >= +180.f)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001e00:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001e90 <update_rpy+0x250>
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	db0a      	blt.n	8001e24 <update_rpy+0x1e4>
	        	MPU9250->rpy[2] -= 360.f;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001e14:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001e94 <update_rpy+0x254>
 8001e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
 8001e22:	e013      	b.n	8001e4c <update_rpy+0x20c>
	        else if (MPU9250->rpy[2] < -180.f)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001e2a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e98 <update_rpy+0x258>
 8001e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e36:	d509      	bpl.n	8001e4c <update_rpy+0x20c>
	        	MPU9250->rpy[2] += 360.f;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001e3e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e94 <update_rpy+0x254>
 8001e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8

	        MPU9250->lin_acc[0] = MPU9250->a[0] + a31;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8001e52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	        MPU9250->lin_acc[1] = MPU9250->a[1] + a32;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001e66:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	        MPU9250->lin_acc[2] = MPU9250->a[2] - a33;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8001e7a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4
	        //char str[] = "IN UPDATE rpy \n\r";
	        //HAL_UART_Transmit(&huart1, str, strlen((char *)str), 0xFFFF);
}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	43340000 	.word	0x43340000
 8001e94:	43b40000 	.word	0x43b40000
 8001e98:	c3340000 	.word	0xc3340000
 8001e9c:	1a63c1f8 	.word	0x1a63c1f8
 8001ea0:	404ca5dc 	.word	0x404ca5dc
 8001ea4:	00000000 	.word	0x00000000

08001ea8 <update_accel_gyro>:

void update_accel_gyro(MPU9250_t *MPU9250) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
        int16_t raw_acc_gyro_data[7];        // used to read all 14 bytes at once from the MPU9250 accel/gyro
        readAccelGyro(raw_acc_gyro_data);  // INT cleared on any read
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f917 	bl	80020e8 <readAccelGyro>

        // Now we'll calculate the accleration value into actual g's
        MPU9250->a[0] = (float)raw_acc_gyro_data[0] * MPU9250->acc_resolution;  // get actual g value, this depends on scale being set
 8001eba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
        MPU9250->a[1] = (float)raw_acc_gyro_data[1] * MPU9250->acc_resolution;
 8001ed6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
        MPU9250->a[2] = (float)raw_acc_gyro_data[2] * MPU9250->acc_resolution;
 8001ef2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

        MPU9250->temperature_count = raw_acc_gyro_data[3];                  // Read the adc values
 8001f0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        MPU9250->temperature = ((float)MPU9250->temperature_count) / 333.87 + 21.0;  // Temperature in degrees Centigrade
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f26:	ee17 0a90 	vmov	r0, s15
 8001f2a:	f7fe fb15 	bl	8000558 <__aeabi_f2d>
 8001f2e:	a323      	add	r3, pc, #140	; (adr r3, 8001fbc <update_accel_gyro+0x114>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe fc92 	bl	800085c <__aeabi_ddiv>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <update_accel_gyro+0x110>)
 8001f46:	f7fe f9a9 	bl	800029c <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f7fe fe51 	bl	8000bf8 <__aeabi_d2f>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50

        // Calculate the gyro value into actual degrees per second
        MPU9250->g[0] = (float)raw_acc_gyro_data[4] * MPU9250->gyro_resolution;  // get actual gyro value, this depends on scale being set
 8001f5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
        MPU9250->g[1] = (float)raw_acc_gyro_data[5] * MPU9250->gyro_resolution;
 8001f78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
        MPU9250->g[2] = (float)raw_acc_gyro_data[6] * MPU9250->gyro_resolution;
 8001f94:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    }
 8001fb0:	bf00      	nop
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40350000 	.word	0x40350000
 8001fbc:	851eb852 	.word	0x851eb852
 8001fc0:	4074ddeb 	.word	0x4074ddeb
 8001fc4:	00000000 	.word	0x00000000

08001fc8 <update_mag>:

void update_mag(MPU9250_t *MPU9250) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
        int16_t mag_count[3] = {0, 0, 0};  // Stores the 16-bit signed magnetometer sensor output
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	81bb      	strh	r3, [r7, #12]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	81fb      	strh	r3, [r7, #14]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	823b      	strh	r3, [r7, #16]

        // Read the x/y/z adc values
        if (readMag(mag_count)==1) {
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 f8d5 	bl	8002190 <readMag>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d174      	bne.n	80020d6 <update_mag+0x10e>
            // Calculate the magnetometer values in milliGauss
            // Include factory calibration per data sheet and user environmental corrections
            // mag_bias is calcurated in 16BITS
            float bias_to_current_bits = MPU9250->mag_resolution / (10.*4912./32760.0);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fab1 	bl	8000558 <__aeabi_f2d>
 8001ff6:	a33a      	add	r3, pc, #232	; (adr r3, 80020e0 <update_mag+0x118>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fc2e 	bl	800085c <__aeabi_ddiv>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4610      	mov	r0, r2
 8002006:	4619      	mov	r1, r3
 8002008:	f7fe fdf6 	bl	8000bf8 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	617b      	str	r3, [r7, #20]
            MPU9250->m[0] = (float)(mag_count[0] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[0] - MPU9250->mag_bias[0] * bias_to_current_bits) * MPU9250->mag_scale[0];  // get actual magnetometer value, this depends on scale being set
 8002010:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800202c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8002036:	edd7 7a05 	vldr	s15, [r7, #20]
 800203a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
            MPU9250->m[1] = (float)(mag_count[1] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[1] - MPU9250->mag_bias[1] * bias_to_current_bits) * MPU9250->mag_scale[1];
 8002052:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002056:	ee07 3a90 	vmov	s15, r3
 800205a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	edd3 7a02 	vldr	s15, [r3, #8]
 8002064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800206e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002078:	edd7 7a05 	vldr	s15, [r7, #20]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
            MPU9250->m[2] = (float)(mag_count[2] * MPU9250->mag_resolution * MPU9250->mag_bias_factory[2] - MPU9250->mag_bias[2] * bias_to_current_bits) * MPU9250->mag_scale[2];
 8002094:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80020a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80020ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80020be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
        }
    }
 80020d6:	bf00      	nop
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	d7fd7fd8 	.word	0xd7fd7fd8
 80020e4:	3ff7fd7f 	.word	0x3ff7fd7f

080020e8 <readAccelGyro>:

void readAccelGyro(int16_t* destination)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

	uint8_t raw_data[14];                                                 // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, &raw_data[0]);             // Read the 14 raw data registers into data array
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	220e      	movs	r2, #14
 80020f6:	213b      	movs	r1, #59	; 0x3b
 80020f8:	20d0      	movs	r0, #208	; 0xd0
 80020fa:	f000 fbe9 	bl	80028d0 <readBytes>
	destination[0] = ((int16_t)raw_data[0] << 8) | (int16_t)raw_data[1];  // Turn the MSB and LSB into a signed 16-bit value
 80020fe:	7a3b      	ldrb	r3, [r7, #8]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	7a7b      	ldrb	r3, [r7, #9]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b21a      	sxth	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	801a      	strh	r2, [r3, #0]
	destination[1] = ((int16_t)raw_data[2] << 8) | (int16_t)raw_data[3];
 8002110:	7abb      	ldrb	r3, [r7, #10]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	b219      	sxth	r1, r3
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	b21a      	sxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3302      	adds	r3, #2
 800211e:	430a      	orrs	r2, r1
 8002120:	b212      	sxth	r2, r2
 8002122:	801a      	strh	r2, [r3, #0]
	destination[2] = ((int16_t)raw_data[4] << 8) | (int16_t)raw_data[5];
 8002124:	7b3b      	ldrb	r3, [r7, #12]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b219      	sxth	r1, r3
 800212a:	7b7b      	ldrb	r3, [r7, #13]
 800212c:	b21a      	sxth	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3304      	adds	r3, #4
 8002132:	430a      	orrs	r2, r1
 8002134:	b212      	sxth	r2, r2
 8002136:	801a      	strh	r2, [r3, #0]
	destination[3] = ((int16_t)raw_data[6] << 8) | (int16_t)raw_data[7];
 8002138:	7bbb      	ldrb	r3, [r7, #14]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b219      	sxth	r1, r3
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	b21a      	sxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3306      	adds	r3, #6
 8002146:	430a      	orrs	r2, r1
 8002148:	b212      	sxth	r2, r2
 800214a:	801a      	strh	r2, [r3, #0]
	destination[4] = ((int16_t)raw_data[8] << 8) | (int16_t)raw_data[9];
 800214c:	7c3b      	ldrb	r3, [r7, #16]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	b219      	sxth	r1, r3
 8002152:	7c7b      	ldrb	r3, [r7, #17]
 8002154:	b21a      	sxth	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3308      	adds	r3, #8
 800215a:	430a      	orrs	r2, r1
 800215c:	b212      	sxth	r2, r2
 800215e:	801a      	strh	r2, [r3, #0]
	destination[5] = ((int16_t)raw_data[10] << 8) | (int16_t)raw_data[11];
 8002160:	7cbb      	ldrb	r3, [r7, #18]
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	b219      	sxth	r1, r3
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	330a      	adds	r3, #10
 800216e:	430a      	orrs	r2, r1
 8002170:	b212      	sxth	r2, r2
 8002172:	801a      	strh	r2, [r3, #0]
	destination[6] = ((int16_t)raw_data[12] << 8) | (int16_t)raw_data[13];
 8002174:	7d3b      	ldrb	r3, [r7, #20]
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	b219      	sxth	r1, r3
 800217a:	7d7b      	ldrb	r3, [r7, #21]
 800217c:	b21a      	sxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	330c      	adds	r3, #12
 8002182:	430a      	orrs	r2, r1
 8002184:	b212      	sxth	r2, r2
 8002186:	801a      	strh	r2, [r3, #0]
}
 8002188:	bf00      	nop
 800218a:	3718      	adds	r7, #24
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <readMag>:


uint8_t readMag(int16_t* destination)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	const uint8_t st1 = readByte(AK8963_ADDRESS, AK8963_ST1);
 8002198:	2102      	movs	r1, #2
 800219a:	2018      	movs	r0, #24
 800219c:	f000 fb72 	bl	8002884 <readByte>
 80021a0:	4603      	mov	r3, r0
 80021a2:	75fb      	strb	r3, [r7, #23]
	if (st1 & 0x01) {                                                    // wait for magnetometer data ready bit to be set
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d03f      	beq.n	800222e <readMag+0x9e>
	            uint8_t raw_data[7];                                             // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	            readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &raw_data[0]);      // Read the six raw data and ST2 registers sequentially into data array
 80021ae:	f107 030c 	add.w	r3, r7, #12
 80021b2:	2207      	movs	r2, #7
 80021b4:	2103      	movs	r1, #3
 80021b6:	2018      	movs	r0, #24
 80021b8:	f000 fb8a 	bl	80028d0 <readBytes>
	            if (Mmode == 0x02 || Mmode == 0x04 || Mmode == 0x06) {  // continuous or external trigger read mode
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <readMag+0xa8>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d007      	beq.n	80021d4 <readMag+0x44>
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <readMag+0xa8>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d003      	beq.n	80021d4 <readMag+0x44>
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <readMag+0xa8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b06      	cmp	r3, #6
 80021d2:	d106      	bne.n	80021e2 <readMag+0x52>
	                if ((st1 & 0x02) != 0)                                       // check if data is not skipped
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <readMag+0x52>
	                    return 0;                                            // this should be after data reading to clear DRDY register
 80021de:	2300      	movs	r3, #0
 80021e0:	e026      	b.n	8002230 <readMag+0xa0>
	            }

	            uint8_t c = raw_data[6];                                         // End data read by reading ST2 register
 80021e2:	7cbb      	ldrb	r3, [r7, #18]
 80021e4:	75bb      	strb	r3, [r7, #22]
	            if (!(c & 0x08)) {                                               // Check if magnetic sensor overflow set, if not then report data
 80021e6:	7dbb      	ldrb	r3, [r7, #22]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d11e      	bne.n	800222e <readMag+0x9e>
	                destination[0] = ((int16_t)raw_data[1] << 8) | raw_data[0];  // Turn the MSB and LSB into a signed 16-bit value
 80021f0:	7b7b      	ldrb	r3, [r7, #13]
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	7b3b      	ldrb	r3, [r7, #12]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	801a      	strh	r2, [r3, #0]
	                destination[1] = ((int16_t)raw_data[3] << 8) | raw_data[2];  // Data stored as little Endian
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b219      	sxth	r1, r3
 8002208:	7bbb      	ldrb	r3, [r7, #14]
 800220a:	b21a      	sxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3302      	adds	r3, #2
 8002210:	430a      	orrs	r2, r1
 8002212:	b212      	sxth	r2, r2
 8002214:	801a      	strh	r2, [r3, #0]
	                destination[2] = ((int16_t)raw_data[5] << 8) | raw_data[4];
 8002216:	7c7b      	ldrb	r3, [r7, #17]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b219      	sxth	r1, r3
 800221c:	7c3b      	ldrb	r3, [r7, #16]
 800221e:	b21a      	sxth	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3304      	adds	r3, #4
 8002224:	430a      	orrs	r2, r1
 8002226:	b212      	sxth	r2, r2
 8002228:	801a      	strh	r2, [r3, #0]
	                return 1;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <readMag+0xa0>
	            }
	        }
	        return 0;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000003 	.word	0x20000003

0800223c <write_accel_offset>:
	        }  // Remove gravity from the z-axis accelerometer bias calculation
	        else {
	            a_bias[2] += (float)CALIB_ACCEL_SENSITIVITY;
	        }
}
void write_accel_offset(MPU9250_t *MPU9250){
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	        // factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
	        // non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
	        // compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	        // the accelerometer biases calculated above must be divided by 8.

	        uint8_t read_data[2] = {0};
 8002244:	2300      	movs	r3, #0
 8002246:	843b      	strh	r3, [r7, #32]
	        int16_t acc_bias_reg[3] = {0, 0, 0};                      // A place to hold the factory accelerometer trim biases
 8002248:	2300      	movs	r3, #0
 800224a:	833b      	strh	r3, [r7, #24]
 800224c:	2300      	movs	r3, #0
 800224e:	837b      	strh	r3, [r7, #26]
 8002250:	2300      	movs	r3, #0
 8002252:	83bb      	strh	r3, [r7, #28]
	        readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &read_data[0]);  // Read factory accelerometer trim values
 8002254:	f107 0320 	add.w	r3, r7, #32
 8002258:	2202      	movs	r2, #2
 800225a:	2177      	movs	r1, #119	; 0x77
 800225c:	20d0      	movs	r0, #208	; 0xd0
 800225e:	f000 fb37 	bl	80028d0 <readBytes>
	        acc_bias_reg[0] = ((int16_t)read_data[0] << 8) | read_data[1];
 8002262:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21b      	sxth	r3, r3
 8002274:	833b      	strh	r3, [r7, #24]
	        readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &read_data[0]);
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	2202      	movs	r2, #2
 800227c:	217a      	movs	r1, #122	; 0x7a
 800227e:	20d0      	movs	r0, #208	; 0xd0
 8002280:	f000 fb26 	bl	80028d0 <readBytes>
	        acc_bias_reg[1] = ((int16_t)read_data[0] << 8) | read_data[1];
 8002284:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	837b      	strh	r3, [r7, #26]
	        readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &read_data[0]);
 8002298:	f107 0320 	add.w	r3, r7, #32
 800229c:	2202      	movs	r2, #2
 800229e:	217d      	movs	r1, #125	; 0x7d
 80022a0:	20d0      	movs	r0, #208	; 0xd0
 80022a2:	f000 fb15 	bl	80028d0 <readBytes>
	        acc_bias_reg[2] = ((int16_t)read_data[0] << 8) | read_data[1];
 80022a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b21b      	sxth	r3, r3
 80022b8:	83bb      	strh	r3, [r7, #28]

	        int16_t mask_bit[3] = {1, 1, 1};  // Define array to hold mask bit for each accelerometer bias axis
 80022ba:	4a63      	ldr	r2, [pc, #396]	; (8002448 <write_accel_offset+0x20c>)
 80022bc:	f107 0310 	add.w	r3, r7, #16
 80022c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c4:	6018      	str	r0, [r3, #0]
 80022c6:	3304      	adds	r3, #4
 80022c8:	8019      	strh	r1, [r3, #0]
	        for (int i = 0; i < 3; i++) {
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
 80022ce:	e06d      	b.n	80023ac <write_accel_offset+0x170>
	            if (acc_bias_reg[i] % 2) {
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022d8:	4413      	add	r3, r2
 80022da:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <write_accel_offset+0xbe>
	                mask_bit[i] = 0;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022f2:	4413      	add	r3, r2
 80022f4:	2200      	movs	r2, #0
 80022f6:	f823 2c18 	strh.w	r2, [r3, #-24]
	            }
	            acc_bias_reg[i] -= (int16_t)MPU9250->acc_bias[i] >> 3;  // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002302:	4413      	add	r3, r2
 8002304:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002308:	b29a      	uxth	r2, r3
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	3302      	adds	r3, #2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3304      	adds	r3, #4
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231e:	ee17 3a90 	vmov	r3, s15
 8002322:	b21b      	sxth	r3, r3
 8002324:	10db      	asrs	r3, r3, #3
 8002326:	b21b      	sxth	r3, r3
 8002328:	b29b      	uxth	r3, r3
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	b29b      	uxth	r3, r3
 800232e:	b21a      	sxth	r2, r3
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002338:	440b      	add	r3, r1
 800233a:	f823 2c10 	strh.w	r2, [r3, #-16]
	            if (mask_bit[i]) {
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002346:	4413      	add	r3, r2
 8002348:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d019      	beq.n	8002384 <write_accel_offset+0x148>
	                acc_bias_reg[i] = acc_bias_reg[i] & ~mask_bit[i];  // Preserve temperature compensation bit
 8002350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002358:	4413      	add	r3, r2
 800235a:	f933 2c10 	ldrsh.w	r2, [r3, #-16]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002366:	440b      	add	r3, r1
 8002368:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800236c:	43db      	mvns	r3, r3
 800236e:	b21b      	sxth	r3, r3
 8002370:	4013      	ands	r3, r2
 8002372:	b21a      	sxth	r2, r3
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800237c:	440b      	add	r3, r1
 800237e:	f823 2c10 	strh.w	r2, [r3, #-16]
 8002382:	e010      	b.n	80023a6 <write_accel_offset+0x16a>
	            } else {
	                acc_bias_reg[i] = acc_bias_reg[i] | 0x0001;  // Preserve temperature compensation bit
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800238c:	4413      	add	r3, r2
 800238e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	b21a      	sxth	r2, r3
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80023a0:	440b      	add	r3, r1
 80023a2:	f823 2c10 	strh.w	r2, [r3, #-16]
	        for (int i = 0; i < 3; i++) {
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3301      	adds	r3, #1
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	dd8e      	ble.n	80022d0 <write_accel_offset+0x94>
	            }
	        }

	        uint8_t write_data[6] = {0};
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	2300      	movs	r3, #0
 80023b8:	81bb      	strh	r3, [r7, #12]
	        write_data[0] = (acc_bias_reg[0] >> 8) & 0xFF;
 80023ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023be:	121b      	asrs	r3, r3, #8
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	723b      	strb	r3, [r7, #8]
	        write_data[1] = (acc_bias_reg[0]) & 0xFF;
 80023c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	727b      	strb	r3, [r7, #9]
	        write_data[2] = (acc_bias_reg[1] >> 8) & 0xFF;
 80023ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023d2:	121b      	asrs	r3, r3, #8
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	72bb      	strb	r3, [r7, #10]
	        write_data[3] = (acc_bias_reg[1]) & 0xFF;
 80023da:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	72fb      	strb	r3, [r7, #11]
	        write_data[4] = (acc_bias_reg[2] >> 8) & 0xFF;
 80023e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023e6:	121b      	asrs	r3, r3, #8
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	733b      	strb	r3, [r7, #12]
	        write_data[5] = (acc_bias_reg[2]) & 0xFF;
 80023ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	737b      	strb	r3, [r7, #13]

	        // Push accelerometer biases to hardware registers
	        writeByte(MPU9250_ADDRESS, XA_OFFSET_H, write_data[0]);
 80023f6:	7a3b      	ldrb	r3, [r7, #8]
 80023f8:	461a      	mov	r2, r3
 80023fa:	2177      	movs	r1, #119	; 0x77
 80023fc:	20d0      	movs	r0, #208	; 0xd0
 80023fe:	f000 faa3 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, XA_OFFSET_L, write_data[1]);
 8002402:	7a7b      	ldrb	r3, [r7, #9]
 8002404:	461a      	mov	r2, r3
 8002406:	2178      	movs	r1, #120	; 0x78
 8002408:	20d0      	movs	r0, #208	; 0xd0
 800240a:	f000 fa9d 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, YA_OFFSET_H, write_data[2]);
 800240e:	7abb      	ldrb	r3, [r7, #10]
 8002410:	461a      	mov	r2, r3
 8002412:	217a      	movs	r1, #122	; 0x7a
 8002414:	20d0      	movs	r0, #208	; 0xd0
 8002416:	f000 fa97 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, YA_OFFSET_L, write_data[3]);
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	461a      	mov	r2, r3
 800241e:	217b      	movs	r1, #123	; 0x7b
 8002420:	20d0      	movs	r0, #208	; 0xd0
 8002422:	f000 fa91 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, write_data[4]);
 8002426:	7b3b      	ldrb	r3, [r7, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	217d      	movs	r1, #125	; 0x7d
 800242c:	20d0      	movs	r0, #208	; 0xd0
 800242e:	f000 fa8b 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, write_data[5]);
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	461a      	mov	r2, r3
 8002436:	217e      	movs	r1, #126	; 0x7e
 8002438:	20d0      	movs	r0, #208	; 0xd0
 800243a:	f000 fa85 	bl	8002948 <writeByte>
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	; 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	0800c1c0 	.word	0x0800c1c0

0800244c <write_gyro_offset>:
void write_gyro_offset(MPU9250_t *MPU9250){
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	        uint8_t gyro_offset_data[6] = {0};
 8002454:	2300      	movs	r3, #0
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	2300      	movs	r3, #0
 800245a:	81bb      	strh	r3, [r7, #12]
	        gyro_offset_data[0] = (-(int16_t)MPU9250->gyro_bias[0] / 4 >> 8) & 0xFF;  // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002466:	ee17 3a90 	vmov	r3, s15
 800246a:	b21b      	sxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	da00      	bge.n	8002472 <write_gyro_offset+0x26>
 8002470:	3303      	adds	r3, #3
 8002472:	109b      	asrs	r3, r3, #2
 8002474:	425b      	negs	r3, r3
 8002476:	121b      	asrs	r3, r3, #8
 8002478:	b2db      	uxtb	r3, r3
 800247a:	723b      	strb	r3, [r7, #8]
	        gyro_offset_data[1] = (-(int16_t)MPU9250->gyro_bias[0] / 4) & 0xFF;       // Biases are additive, so change sign on calculated average gyro biases
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002486:	ee17 3a90 	vmov	r3, s15
 800248a:	b21b      	sxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	da00      	bge.n	8002492 <write_gyro_offset+0x46>
 8002490:	3303      	adds	r3, #3
 8002492:	109b      	asrs	r3, r3, #2
 8002494:	425b      	negs	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	727b      	strb	r3, [r7, #9]
	        gyro_offset_data[2] = (-(int16_t)MPU9250->gyro_bias[1] / 4 >> 8) & 0xFF;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	edd3 7a07 	vldr	s15, [r3, #28]
 80024a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a4:	ee17 3a90 	vmov	r3, s15
 80024a8:	b21b      	sxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da00      	bge.n	80024b0 <write_gyro_offset+0x64>
 80024ae:	3303      	adds	r3, #3
 80024b0:	109b      	asrs	r3, r3, #2
 80024b2:	425b      	negs	r3, r3
 80024b4:	121b      	asrs	r3, r3, #8
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	72bb      	strb	r3, [r7, #10]
	        gyro_offset_data[3] = (-(int16_t)MPU9250->gyro_bias[1] / 4) & 0xFF;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80024c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024c4:	ee17 3a90 	vmov	r3, s15
 80024c8:	b21b      	sxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da00      	bge.n	80024d0 <write_gyro_offset+0x84>
 80024ce:	3303      	adds	r3, #3
 80024d0:	109b      	asrs	r3, r3, #2
 80024d2:	425b      	negs	r3, r3
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	72fb      	strb	r3, [r7, #11]
	        gyro_offset_data[4] = (-(int16_t)MPU9250->gyro_bias[2] / 4 >> 8) & 0xFF;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	edd3 7a08 	vldr	s15, [r3, #32]
 80024de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e2:	ee17 3a90 	vmov	r3, s15
 80024e6:	b21b      	sxth	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da00      	bge.n	80024ee <write_gyro_offset+0xa2>
 80024ec:	3303      	adds	r3, #3
 80024ee:	109b      	asrs	r3, r3, #2
 80024f0:	425b      	negs	r3, r3
 80024f2:	121b      	asrs	r3, r3, #8
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	733b      	strb	r3, [r7, #12]
	        gyro_offset_data[5] = (-(int16_t)MPU9250->gyro_bias[2] / 4) & 0xFF;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 3a90 	vmov	r3, s15
 8002506:	b21b      	sxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	da00      	bge.n	800250e <write_gyro_offset+0xc2>
 800250c:	3303      	adds	r3, #3
 800250e:	109b      	asrs	r3, r3, #2
 8002510:	425b      	negs	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	737b      	strb	r3, [r7, #13]

	        // Push gyro biases to hardware registers
	        writeByte(MPU9250_ADDRESS, XG_OFFSET_H, gyro_offset_data[0]);
 8002516:	7a3b      	ldrb	r3, [r7, #8]
 8002518:	461a      	mov	r2, r3
 800251a:	2113      	movs	r1, #19
 800251c:	20d0      	movs	r0, #208	; 0xd0
 800251e:	f000 fa13 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, XG_OFFSET_L, gyro_offset_data[1]);
 8002522:	7a7b      	ldrb	r3, [r7, #9]
 8002524:	461a      	mov	r2, r3
 8002526:	2114      	movs	r1, #20
 8002528:	20d0      	movs	r0, #208	; 0xd0
 800252a:	f000 fa0d 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, YG_OFFSET_H, gyro_offset_data[2]);
 800252e:	7abb      	ldrb	r3, [r7, #10]
 8002530:	461a      	mov	r2, r3
 8002532:	2115      	movs	r1, #21
 8002534:	20d0      	movs	r0, #208	; 0xd0
 8002536:	f000 fa07 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, YG_OFFSET_L, gyro_offset_data[3]);
 800253a:	7afb      	ldrb	r3, [r7, #11]
 800253c:	461a      	mov	r2, r3
 800253e:	2116      	movs	r1, #22
 8002540:	20d0      	movs	r0, #208	; 0xd0
 8002542:	f000 fa01 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, gyro_offset_data[4]);
 8002546:	7b3b      	ldrb	r3, [r7, #12]
 8002548:	461a      	mov	r2, r3
 800254a:	2117      	movs	r1, #23
 800254c:	20d0      	movs	r0, #208	; 0xd0
 800254e:	f000 f9fb 	bl	8002948 <writeByte>
	        writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, gyro_offset_data[5]);
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	461a      	mov	r2, r3
 8002556:	2118      	movs	r1, #24
 8002558:	20d0      	movs	r0, #208	; 0xd0
 800255a:	f000 f9f5 	bl	8002948 <writeByte>
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <initAK8963>:
        if (n > 0) MPU9250->n_filter_iter = n;
    }


void initAK8963(MPU9250_t *MPU9250)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
  uint8_t rawData[3];  // x/y/z gyro calibration data stored here
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8002570:	2200      	movs	r2, #0
 8002572:	210a      	movs	r1, #10
 8002574:	2018      	movs	r0, #24
 8002576:	f000 f9e7 	bl	8002948 <writeByte>
  HAL_Delay(100);
 800257a:	2064      	movs	r0, #100	; 0x64
 800257c:	f002 fbce 	bl	8004d1c <HAL_Delay>
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
 8002580:	220f      	movs	r2, #15
 8002582:	210a      	movs	r1, #10
 8002584:	2018      	movs	r0, #24
 8002586:	f000 f9df 	bl	8002948 <writeByte>
  HAL_Delay(100);
 800258a:	2064      	movs	r0, #100	; 0x64
 800258c:	f002 fbc6 	bl	8004d1c <HAL_Delay>
  readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &rawData[0]);  // Read the x-, y-, and z-axis calibration values
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	2203      	movs	r2, #3
 8002596:	2110      	movs	r1, #16
 8002598:	2018      	movs	r0, #24
 800259a:	f000 f999 	bl	80028d0 <readBytes>
  MPU9250->mag_bias_factory[0] =  (float)(rawData[0] - 128)/256.0f + 1.0f;   // Return x-axis sensitivity adjustment values, etc.
 800259e:	7b3b      	ldrb	r3, [r7, #12]
 80025a0:	3b80      	subs	r3, #128	; 0x80
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025aa:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002640 <initAK8963+0xd8>
 80025ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  MPU9250->mag_bias_factory[1] =  (float)(rawData[1] - 128)/256.0f + 1.0f;
 80025c0:	7b7b      	ldrb	r3, [r7, #13]
 80025c2:	3b80      	subs	r3, #128	; 0x80
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025cc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002640 <initAK8963+0xd8>
 80025d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  MPU9250->mag_bias_factory[2] =  (float)(rawData[2] - 128)/256.0f + 1.0f;
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	3b80      	subs	r3, #128	; 0x80
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002640 <initAK8963+0xd8>
 80025f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
 8002604:	2200      	movs	r2, #0
 8002606:	210a      	movs	r1, #10
 8002608:	2018      	movs	r0, #24
 800260a:	f000 f99d 	bl	8002948 <writeByte>
  HAL_Delay(100);
 800260e:	2064      	movs	r0, #100	; 0x64
 8002610:	f002 fb84 	bl	8004d1c <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
  writeByte(AK8963_ADDRESS, AK8963_CNTL, Mscale << 4 | Mmode); // Set magnetometer data resolution and sample ODR
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <initAK8963+0xdc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	b25a      	sxtb	r2, r3
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <initAK8963+0xe0>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b25b      	sxtb	r3, r3
 8002622:	4313      	orrs	r3, r2
 8002624:	b25b      	sxtb	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	210a      	movs	r1, #10
 800262c:	2018      	movs	r0, #24
 800262e:	f000 f98b 	bl	8002948 <writeByte>
  HAL_Delay(100);
 8002632:	2064      	movs	r0, #100	; 0x64
 8002634:	f002 fb72 	bl	8004d1c <HAL_Delay>
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	43800000 	.word	0x43800000
 8002644:	20000002 	.word	0x20000002
 8002648:	20000003 	.word	0x20000003

0800264c <MPU9250_Init>:

void MPU9250_Init(MPU9250_t *MPU9250){
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	// Initialize MPU9250 device
	 // wake up device
	getAres(MPU9250);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f8e5 	bl	8002824 <getAres>
	getGres(MPU9250);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f8ae 	bl	80027bc <getGres>
	getMres(MPU9250);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f88b 	bl	800277c <getMres>
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	216b      	movs	r1, #107	; 0x6b
 800266a:	20d0      	movs	r0, #208	; 0xd0
 800266c:	f000 f96c 	bl	8002948 <writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt
 8002670:	2064      	movs	r0, #100	; 0x64
 8002672:	f002 fb53 	bl	8004d1c <HAL_Delay>

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 8002676:	2200      	movs	r2, #0
 8002678:	216b      	movs	r1, #107	; 0x6b
 800267a:	20d0      	movs	r0, #208	; 0xd0
 800267c:	f000 f964 	bl	8002948 <writeByte>
	HAL_Delay(100);
 8002680:	2064      	movs	r0, #100	; 0x64
 8002682:	f002 fb4b 	bl	8004d1c <HAL_Delay>

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
 8002686:	2201      	movs	r2, #1
 8002688:	216b      	movs	r1, #107	; 0x6b
 800268a:	20d0      	movs	r0, #208	; 0xd0
 800268c:	f000 f95c 	bl	8002948 <writeByte>
	HAL_Delay(100);
 8002690:	2064      	movs	r0, #100	; 0x64
 8002692:	f002 fb43 	bl	8004d1c <HAL_Delay>

	 // Configure Gyro and Accelerometer
	 // Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively;
	 // DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	 // Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	  writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
 8002696:	2203      	movs	r2, #3
 8002698:	211a      	movs	r1, #26
 800269a:	20d0      	movs	r0, #208	; 0xd0
 800269c:	f000 f954 	bl	8002948 <writeByte>

	 // Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	  writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80026a0:	2204      	movs	r2, #4
 80026a2:	2119      	movs	r1, #25
 80026a4:	20d0      	movs	r0, #208	; 0xd0
 80026a6:	f000 f94f 	bl	8002948 <writeByte>

	 // Set gyroscope full scale range
	 // Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	  uint8_t c =  readByte(MPU9250_ADDRESS, GYRO_CONFIG);
 80026aa:	211b      	movs	r1, #27
 80026ac:	20d0      	movs	r0, #208	; 0xd0
 80026ae:	f000 f8e9 	bl	8002884 <readByte>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                     // Clear self-test bits [7:5]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x03;                                     // Clear Fchoice bits [1:0]
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	f023 0303 	bic.w	r3, r3, #3
 80026c4:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                     // Clear GYRO_FS_SEL bits [4:3]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	f023 0318 	bic.w	r3, r3, #24
 80026cc:	73fb      	strb	r3, [r7, #15]
	  c = c | (Gscale << 3);       // Set full scale range for the gyro
 80026ce:	4b29      	ldr	r3, [pc, #164]	; (8002774 <MPU9250_Init+0x128>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	b25a      	sxtb	r2, r3
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4313      	orrs	r3, r2
 80026dc:	b25b      	sxtb	r3, r3
 80026de:	73fb      	strb	r3, [r7, #15]
	  c = c | (0x03 & 0x03);   // Set Fchoice for the gyro
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	f043 0303 	orr.w	r3, r3, #3
 80026e6:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c); // Set full scale range for the gyro
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	461a      	mov	r2, r3
 80026ec:	211b      	movs	r1, #27
 80026ee:	20d0      	movs	r0, #208	; 0xd0
 80026f0:	f000 f92a 	bl	8002948 <writeByte>

	 // Set accelerometer configuration
	  c =  readByte(MPU9250_ADDRESS, ACCEL_CONFIG);
 80026f4:	211c      	movs	r1, #28
 80026f6:	20d0      	movs	r0, #208	; 0xd0
 80026f8:	f000 f8c4 	bl	8002884 <readByte>
 80026fc:	4603      	mov	r3, r0
 80026fe:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0xE0;                                 // Clear self-test bits [7:5]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x18;                                 // Clear ACCEL_FS_SEL bits [4:3]
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	f023 0318 	bic.w	r3, r3, #24
 800270e:	73fb      	strb	r3, [r7, #15]
	  c = c | (Ascale << 3);  // Set full scale range for the accelerometer
 8002710:	4b19      	ldr	r3, [pc, #100]	; (8002778 <MPU9250_Init+0x12c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	b25a      	sxtb	r2, r3
 8002718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271c:	4313      	orrs	r3, r2
 800271e:	b25b      	sxtb	r3, r3
 8002720:	73fb      	strb	r3, [r7, #15]
	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Set full scale range for the accelerometer
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	461a      	mov	r2, r3
 8002726:	211c      	movs	r1, #28
 8002728:	20d0      	movs	r0, #208	; 0xd0
 800272a:	f000 f90d 	bl	8002948 <writeByte>

	 // Set accelerometer sample rate configuration
	 // It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	 // accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	  c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2);
 800272e:	211d      	movs	r1, #29
 8002730:	20d0      	movs	r0, #208	; 0xd0
 8002732:	f000 f8a7 	bl	8002884 <readByte>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
	  c = c & ~0x0F;                                     // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	f023 030f 	bic.w	r3, r3, #15
 8002740:	73fb      	strb	r3, [r7, #15]
	  c = c | (~(0x01 << 3) & 0x08);    // Set accel_fchoice_b to 1
	  c = c | (0x03 & 0x07);  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8002742:	7bfb      	ldrb	r3, [r7, #15]
 8002744:	f043 0303 	orr.w	r3, r3, #3
 8002748:	73fb      	strb	r3, [r7, #15]

	  writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	461a      	mov	r2, r3
 800274e:	211d      	movs	r1, #29
 8002750:	20d0      	movs	r0, #208	; 0xd0
 8002752:	f000 f8f9 	bl	8002948 <writeByte>
	 // but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	  // Configure Interrupts and Bypass Enable
	  // Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips
	  // can join the I2C bus and all can be controlled by the Arduino as master
	   writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
 8002756:	2222      	movs	r2, #34	; 0x22
 8002758:	2137      	movs	r1, #55	; 0x37
 800275a:	20d0      	movs	r0, #208	; 0xd0
 800275c:	f000 f8f4 	bl	8002948 <writeByte>
	   writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01); // Enable data ready (bit 0) interrupt
 8002760:	2201      	movs	r2, #1
 8002762:	2138      	movs	r1, #56	; 0x38
 8002764:	20d0      	movs	r0, #208	; 0xd0
 8002766:	f000 f8ef 	bl	8002948 <writeByte>

}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000001 	.word	0x20000001
 8002778:	20000000 	.word	0x20000000

0800277c <getMres>:

void getMres(MPU9250_t *MPU9250) {
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  switch (Mscale)
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <getMres+0x34>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d002      	beq.n	8002792 <getMres+0x16>
 800278c:	2b02      	cmp	r3, #2
 800278e:	d004      	beq.n	800279a <getMres+0x1e>
          break;
    case MFS_16BITS:
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
          break;
  }
}
 8002790:	e007      	b.n	80027a2 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./8190.; // Proper scale to return milliGauss
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <getMres+0x38>)
 8002796:	609a      	str	r2, [r3, #8]
          break;
 8002798:	e003      	b.n	80027a2 <getMres+0x26>
    	MPU9250->mag_resolution = 10.*4912./32760.0; // Proper scale to return milliGauss
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <getMres+0x3c>)
 800279e:	609a      	str	r2, [r3, #8]
          break;
 80027a0:	bf00      	nop
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000002 	.word	0x20000002
 80027b4:	40bfebff 	.word	0x40bfebff
 80027b8:	3fbfebff 	.word	0x3fbfebff

080027bc <getGres>:


void getGres(MPU9250_t *MPU9250) {
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  switch (Gscale)
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <getGres+0x54>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d81a      	bhi.n	8002804 <getGres+0x48>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <getGres+0x18>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027ed 	.word	0x080027ed
 80027dc:	080027f5 	.word	0x080027f5
 80027e0:	080027fd 	.word	0x080027fd
  {
    // Possible gyro scales (and their register bit settings) are:
    // 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case GFS_250DPS:
          MPU9250->gyro_resolution = 250.0/32768.0;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <getGres+0x58>)
 80027e8:	605a      	str	r2, [r3, #4]
          break;
 80027ea:	e00b      	b.n	8002804 <getGres+0x48>
    case GFS_500DPS:
    	MPU9250->gyro_resolution = 500.0/32768.0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <getGres+0x5c>)
 80027f0:	605a      	str	r2, [r3, #4]
          break;
 80027f2:	e007      	b.n	8002804 <getGres+0x48>
    case GFS_1000DPS:
    	MPU9250->gyro_resolution = 1000.0/32768.0;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a09      	ldr	r2, [pc, #36]	; (800281c <getGres+0x60>)
 80027f8:	605a      	str	r2, [r3, #4]
          break;
 80027fa:	e003      	b.n	8002804 <getGres+0x48>
    case GFS_2000DPS:
    	MPU9250->gyro_resolution = 2000.0/32768.0;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <getGres+0x64>)
 8002800:	605a      	str	r2, [r3, #4]
          break;
 8002802:	bf00      	nop
  }
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	20000001 	.word	0x20000001
 8002814:	3bfa0000 	.word	0x3bfa0000
 8002818:	3c7a0000 	.word	0x3c7a0000
 800281c:	3cfa0000 	.word	0x3cfa0000
 8002820:	3d7a0000 	.word	0x3d7a0000

08002824 <getAres>:


void getAres(MPU9250_t *MPU9250) {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  switch (Ascale)
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <getAres+0x5c>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	2b03      	cmp	r3, #3
 8002834:	d81e      	bhi.n	8002874 <getAres+0x50>
 8002836:	a201      	add	r2, pc, #4	; (adr r2, 800283c <getAres+0x18>)
 8002838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283c:	0800284d 	.word	0x0800284d
 8002840:	08002857 	.word	0x08002857
 8002844:	08002861 	.word	0x08002861
 8002848:	0800286b 	.word	0x0800286b
  {
    // Possible accelerometer scales (and their register bit settings) are:
    // 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
        // Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
    case AFS_2G:
    	MPU9250->acc_resolution = 2.0/32768.0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002852:	601a      	str	r2, [r3, #0]
          break;
 8002854:	e00e      	b.n	8002874 <getAres+0x50>
    case AFS_4G:
    	MPU9250->acc_resolution = 4.0/32768.0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800285c:	601a      	str	r2, [r3, #0]
          break;
 800285e:	e009      	b.n	8002874 <getAres+0x50>
    case AFS_8G:
    	MPU9250->acc_resolution = 8.0/32768.0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002866:	601a      	str	r2, [r3, #0]
          break;
 8002868:	e004      	b.n	8002874 <getAres+0x50>
    case AFS_16G:
    	MPU9250->acc_resolution = 16.0/32768.0;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002870:	601a      	str	r2, [r3, #0]
          break;
 8002872:	bf00      	nop
  }
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	20000000 	.word	0x20000000

08002884 <readByte>:


char readByte(uint8_t I2C_ADDRESS, uint8_t RegAddr){
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	4603      	mov	r3, r0
 800288c:	460a      	mov	r2, r1
 800288e:	71fb      	strb	r3, [r7, #7]
 8002890:	4613      	mov	r3, r2
 8002892:	71bb      	strb	r3, [r7, #6]
	char data[1];
	char data_write[1];
	data_write[0] = RegAddr;
 8002894:	79bb      	ldrb	r3, [r7, #6]
 8002896:	723b      	strb	r3, [r7, #8]

	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	b299      	uxth	r1, r3
 800289c:	f107 0208 	add.w	r2, r7, #8
 80028a0:	2364      	movs	r3, #100	; 0x64
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2301      	movs	r3, #1
 80028a6:	4809      	ldr	r0, [pc, #36]	; (80028cc <readByte+0x48>)
 80028a8:	f002 fe24 	bl	80054f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS, data, (uint16_t)1, (uint16_t)100);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	b299      	uxth	r1, r3
 80028b0:	f107 020c 	add.w	r2, r7, #12
 80028b4:	2364      	movs	r3, #100	; 0x64
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	4804      	ldr	r0, [pc, #16]	; (80028cc <readByte+0x48>)
 80028bc:	f002 ff18 	bl	80056f0 <HAL_I2C_Master_Receive>

	return data[0];
 80028c0:	7b3b      	ldrb	r3, [r7, #12]

}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	2000022c 	.word	0x2000022c

080028d0 <readBytes>:
void readBytes(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t count, uint8_t * dest)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	4603      	mov	r3, r0
 80028da:	71fb      	strb	r3, [r7, #7]
 80028dc:	460b      	mov	r3, r1
 80028de:	71bb      	strb	r3, [r7, #6]
 80028e0:	4613      	mov	r3, r2
 80028e2:	717b      	strb	r3, [r7, #5]
	char data[14];
	char data_write[1];
	data_write[0] = RegAddr;
 80028e4:	79bb      	ldrb	r3, [r7, #6]
 80028e6:	723b      	strb	r3, [r7, #8]
	//Откуда будем считывать данные

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 1, 100);
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	b299      	uxth	r1, r3
 80028ec:	f107 0208 	add.w	r2, r7, #8
 80028f0:	2364      	movs	r3, #100	; 0x64
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2301      	movs	r3, #1
 80028f6:	4813      	ldr	r0, [pc, #76]	; (8002944 <readBytes+0x74>)
 80028f8:	f002 fdfc 	bl	80054f4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(I2C_ADDRESS), data, count, (uint16_t)100);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	b299      	uxth	r1, r3
 8002900:	797b      	ldrb	r3, [r7, #5]
 8002902:	b29b      	uxth	r3, r3
 8002904:	f107 020c 	add.w	r2, r7, #12
 8002908:	2064      	movs	r0, #100	; 0x64
 800290a:	9000      	str	r0, [sp, #0]
 800290c:	480d      	ldr	r0, [pc, #52]	; (8002944 <readBytes+0x74>)
 800290e:	f002 feef 	bl	80056f0 <HAL_I2C_Master_Receive>
	for(int ii = 0; ii < count; ii++) {
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e00b      	b.n	8002930 <readBytes+0x60>
			dest[ii] = data[ii];
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	f107 010c 	add.w	r1, r7, #12
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	440a      	add	r2, r1
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	701a      	strb	r2, [r3, #0]
	for(int ii = 0; ii < count; ii++) {
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3301      	adds	r3, #1
 800292e:	61fb      	str	r3, [r7, #28]
 8002930:	797b      	ldrb	r3, [r7, #5]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	429a      	cmp	r2, r3
 8002936:	dbef      	blt.n	8002918 <readBytes+0x48>
		}

}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000022c 	.word	0x2000022c

08002948 <writeByte>:

void writeByte(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t data){
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
 8002952:	460b      	mov	r3, r1
 8002954:	71bb      	strb	r3, [r7, #6]
 8002956:	4613      	mov	r3, r2
 8002958:	717b      	strb	r3, [r7, #5]
	char data_write[2];
	data_write[0] = RegAddr;
 800295a:	79bb      	ldrb	r3, [r7, #6]
 800295c:	733b      	strb	r3, [r7, #12]
	data_write[1] = data;
 800295e:	797b      	ldrb	r3, [r7, #5]
 8002960:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS, data_write, 2, 100);
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	b299      	uxth	r1, r3
 8002966:	f107 020c 	add.w	r2, r7, #12
 800296a:	2364      	movs	r3, #100	; 0x64
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2302      	movs	r3, #2
 8002970:	4803      	ldr	r0, [pc, #12]	; (8002980 <writeByte+0x38>)
 8002972:	f002 fdbf 	bl	80054f4 <HAL_I2C_Master_Transmit>
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000022c 	.word	0x2000022c

08002984 <MPU9250SetDefault>:

void MPU9250SetDefault(MPU9250_t *MPU9250){
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
	MPU9250 -> acc_resolution = 0.;                // scale resolutions per LSB for the sensors
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
	MPU9250 -> gyro_resolution = 0.;               // scale resolutions per LSB for the sensors
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
	MPU9250 -> mag_resolution = 0.;                // scale resolutions per LSB for the sensors
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]

		// Calibration Parameters
	MPU9250 -> acc_bias[0] = 0.;   // acc calibration value in ACCEL_FS_SEL: 2g
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	60da      	str	r2, [r3, #12]
	MPU9250 -> acc_bias[1] = 0.;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
	MPU9250 -> acc_bias[2] = 0.;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	615a      	str	r2, [r3, #20]
	MPU9250 -> gyro_bias[0] = 0.;  // gyro calibration value in GYRO_FS_SEL: 250dps
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
	MPU9250 -> gyro_bias[1] = 0.;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
	MPU9250 -> gyro_bias[2] = 0.;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
	MPU9250 -> mag_bias_factory[0] = 0.;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
	MPU9250 -> mag_bias_factory[1] = 0.;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
	MPU9250 -> mag_bias_factory[2] = 0.;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

	MPU9250 -> mag_bias[0] = 0.;  // mag calibration value in MAG_OUTPUT_BITS: 16BITS
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
	MPU9250 -> mag_bias[1] = 0.;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34
	MPU9250 -> mag_bias[2] = 0.;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
	MPU9250 -> mag_scale[0] = 1.;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a0a:	63da      	str	r2, [r3, #60]	; 0x3c
	MPU9250 -> mag_scale[1] = 1.;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
	MPU9250 -> mag_scale[2] = 1.;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
	MPU9250 -> magnetic_declination  = 10.91;  // Moscow, 24th June
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a45      	ldr	r2, [pc, #276]	; (8002b34 <MPU9250SetDefault+0x1b0>)
 8002a20:	649a      	str	r2, [r3, #72]	; 0x48

		    // Temperature
	MPU9250 -> temperature_count = 0.;  // temperature raw count output
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	MPU9250 -> temperature = 0.;        // Stores the real internal chip temperature in degrees Celsius
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	651a      	str	r2, [r3, #80]	; 0x50

		// Self Test
	MPU9250 -> self_test_result[0] = 0.;  // holds results of gyro and accelerometer self test
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	655a      	str	r2, [r3, #84]	; 0x54
	MPU9250 -> self_test_result[1] = 0.;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58
	MPU9250 -> self_test_result[2] = 0.;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	65da      	str	r2, [r3, #92]	; 0x5c
	MPU9250 -> self_test_result[3] = 0.;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	661a      	str	r2, [r3, #96]	; 0x60
	MPU9250 -> self_test_result[4] = 0.;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	665a      	str	r2, [r3, #100]	; 0x64
	MPU9250 -> self_test_result[5] = 0.;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	669a      	str	r2, [r3, #104]	; 0x68

		// IMU Data
	MPU9250 -> a[0] = 0.;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	66da      	str	r2, [r3, #108]	; 0x6c
	MPU9250 -> a[1] = 0.;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	671a      	str	r2, [r3, #112]	; 0x70
	MPU9250 -> a[2] = 0.;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	675a      	str	r2, [r3, #116]	; 0x74
	MPU9250 -> g[0] = 0.;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	679a      	str	r2, [r3, #120]	; 0x78
	MPU9250 -> g[1] = 0.;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	67da      	str	r2, [r3, #124]	; 0x7c
	MPU9250 -> g[2] = 0.;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	MPU9250 -> m[0] = 0.;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	MPU9250 -> m[1] = 0.;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	MPU9250 -> m[2] = 0.;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	MPU9250 -> q[0] = 1.;  // vector to hold quaternion
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	MPU9250 -> q[1] = 0.;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	MPU9250 -> q[2] = 0.;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	MPU9250 -> q[3] = 0.;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	MPU9250 -> rpy[0] = 0.;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	MPU9250 -> rpy[1] = 0.;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	MPU9250 -> rpy[2] = 0.;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	MPU9250 -> lin_acc[0] = 0.;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	MPU9250 -> lin_acc[1] = 0.;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	MPU9250 -> lin_acc[2] = 0.;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	MPU9250 -> has_connected = 0;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	MPU9250 -> n_filter_iter = 1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	412e8f5c 	.word	0x412e8f5c

08002b38 <update_madgwick>:

void update_madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 8002b38:	b5b0      	push	{r4, r5, r7, lr}
 8002b3a:	b08a      	sub	sp, #40	; 0x28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8002b42:	edc7 0a08 	vstr	s1, [r7, #32]
 8002b46:	ed87 1a07 	vstr	s2, [r7, #28]
 8002b4a:	edc7 1a06 	vstr	s3, [r7, #24]
 8002b4e:	ed87 2a05 	vstr	s4, [r7, #20]
 8002b52:	edc7 2a04 	vstr	s5, [r7, #16]
 8002b56:	ed87 3a03 	vstr	s6, [r7, #12]
 8002b5a:	edc7 3a02 	vstr	s7, [r7, #8]
 8002b5e:	ed87 4a01 	vstr	s8, [r7, #4]
 8002b62:	6038      	str	r0, [r7, #0]
	newTime = micros();
 8002b64:	f7fe fcfe 	bl	8001564 <micros>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a25      	ldr	r2, [pc, #148]	; (8002c00 <update_madgwick+0xc8>)
 8002b6c:	6013      	str	r3, [r2, #0]
	deltaT = newTime - oldTime;
 8002b6e:	4b24      	ldr	r3, [pc, #144]	; (8002c00 <update_madgwick+0xc8>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <update_madgwick+0xcc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fccb 	bl	8000514 <__aeabi_ui2d>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4921      	ldr	r1, [pc, #132]	; (8002c08 <update_madgwick+0xd0>)
 8002b84:	e9c1 2300 	strd	r2, r3, [r1]
	oldTime = newTime;
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <update_madgwick+0xc8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <update_madgwick+0xcc>)
 8002b8e:	6013      	str	r3, [r2, #0]
	deltaT = fabs(deltaT * 0.001 * 0.001);
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <update_madgwick+0xd0>)
 8002b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b96:	a318      	add	r3, pc, #96	; (adr r3, 8002bf8 <update_madgwick+0xc0>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd fd34 	bl	8000608 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	a313      	add	r3, pc, #76	; (adr r3, 8002bf8 <update_madgwick+0xc0>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fd2b 	bl	8000608 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4614      	mov	r4, r2
 8002bb8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <update_madgwick+0xd0>)
 8002bbe:	e9c3 4500 	strd	r4, r5, [r3]

	madgwick(ax, ay, az, gx, gy, gz, mx, my, mz, q);
 8002bc2:	6838      	ldr	r0, [r7, #0]
 8002bc4:	ed97 4a01 	vldr	s8, [r7, #4]
 8002bc8:	edd7 3a02 	vldr	s7, [r7, #8]
 8002bcc:	ed97 3a03 	vldr	s6, [r7, #12]
 8002bd0:	edd7 2a04 	vldr	s5, [r7, #16]
 8002bd4:	ed97 2a05 	vldr	s4, [r7, #20]
 8002bd8:	edd7 1a06 	vldr	s3, [r7, #24]
 8002bdc:	ed97 1a07 	vldr	s2, [r7, #28]
 8002be0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002be4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002be8:	f000 f810 	bl	8002c0c <madgwick>
}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf4:	f3af 8000 	nop.w
 8002bf8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bfc:	3f50624d 	.word	0x3f50624d
 8002c00:	20000218 	.word	0x20000218
 8002c04:	2000021c 	.word	0x2000021c
 8002c08:	20000210 	.word	0x20000210

08002c0c <madgwick>:

void madgwick(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float* q){
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b0ea      	sub	sp, #424	; 0x1a8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c18:	ed83 0a00 	vstr	s0, [r3]
 8002c1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c20:	edc3 0a00 	vstr	s1, [r3]
 8002c24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c28:	ed83 1a00 	vstr	s2, [r3]
 8002c2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c30:	edc3 1a00 	vstr	s3, [r3]
 8002c34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c38:	ed83 2a00 	vstr	s4, [r3]
 8002c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c40:	edc3 2a00 	vstr	s5, [r3]
 8002c44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c48:	ed83 3a00 	vstr	s6, [r3]
 8002c4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c50:	edc3 3a00 	vstr	s7, [r3]
 8002c54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c58:	ed83 4a00 	vstr	s8, [r3]
 8002c5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c60:	6018      	str	r0, [r3, #0]
	double q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];  // short name local variable for readability
 8002c62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc74 	bl	8000558 <__aeabi_f2d>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
 8002c78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3304      	adds	r3, #4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc68 	bl	8000558 <__aeabi_f2d>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
 8002c90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3308      	adds	r3, #8
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc5c 	bl	8000558 <__aeabi_f2d>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
 8002ca8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fc50 	bl	8000558 <__aeabi_f2d>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
	        double qDot1, qDot2, qDot3, qDot4;
	        double hx, hy;
	        double _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	        // Rate of change of quaternion from gyroscope
	        qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002cc0:	f8d7 4198 	ldr.w	r4, [r7, #408]	; 0x198
 8002cc4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8002cc8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ccc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	f7fd fc41 	bl	8000558 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fc93 	bl	8000608 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4614      	mov	r4, r2
 8002ce8:	461d      	mov	r5, r3
 8002cea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	f7fd fc32 	bl	8000558 <__aeabi_f2d>
 8002cf4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002cf8:	f7fd fc86 	bl	8000608 <__aeabi_dmul>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	f7fd fac8 	bl	8000298 <__aeabi_dsub>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4614      	mov	r4, r2
 8002d0e:	461d      	mov	r5, r3
 8002d10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	f7fd fc1f 	bl	8000558 <__aeabi_f2d>
 8002d1a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002d1e:	f7fd fc73 	bl	8000608 <__aeabi_dmul>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4620      	mov	r0, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f7fd fab5 	bl	8000298 <__aeabi_dsub>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	4bd4      	ldr	r3, [pc, #848]	; (800308c <madgwick+0x480>)
 8002d3c:	f7fd fc64 	bl	8000608 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	f7fd fc03 	bl	8000558 <__aeabi_f2d>
 8002d52:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002d56:	f7fd fc57 	bl	8000608 <__aeabi_dmul>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4614      	mov	r4, r2
 8002d60:	461d      	mov	r5, r3
 8002d62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	f7fd fbf6 	bl	8000558 <__aeabi_f2d>
 8002d6c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002d70:	f7fd fc4a 	bl	8000608 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd fa8e 	bl	800029c <__adddf3>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4614      	mov	r4, r2
 8002d86:	461d      	mov	r5, r3
 8002d88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	f7fd fbe3 	bl	8000558 <__aeabi_f2d>
 8002d92:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002d96:	f7fd fc37 	bl	8000608 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4620      	mov	r0, r4
 8002da0:	4629      	mov	r1, r5
 8002da2:	f7fd fa79 	bl	8000298 <__aeabi_dsub>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	4bb6      	ldr	r3, [pc, #728]	; (800308c <madgwick+0x480>)
 8002db4:	f7fd fc28 	bl	8000608 <__aeabi_dmul>
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002dc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	f7fd fbc7 	bl	8000558 <__aeabi_f2d>
 8002dca:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002dce:	f7fd fc1b 	bl	8000608 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4614      	mov	r4, r2
 8002dd8:	461d      	mov	r5, r3
 8002dda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	f7fd fbba 	bl	8000558 <__aeabi_f2d>
 8002de4:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002de8:	f7fd fc0e 	bl	8000608 <__aeabi_dmul>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4620      	mov	r0, r4
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7fd fa50 	bl	8000298 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4614      	mov	r4, r2
 8002dfe:	461d      	mov	r5, r3
 8002e00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	f7fd fba7 	bl	8000558 <__aeabi_f2d>
 8002e0a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002e0e:	f7fd fbfb 	bl	8000608 <__aeabi_dmul>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4620      	mov	r0, r4
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f7fd fa3f 	bl	800029c <__adddf3>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	4b98      	ldr	r3, [pc, #608]	; (800308c <madgwick+0x480>)
 8002e2c:	f7fd fbec 	bl	8000608 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	        qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002e38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	f7fd fb8b 	bl	8000558 <__aeabi_f2d>
 8002e42:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002e46:	f7fd fbdf 	bl	8000608 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4614      	mov	r4, r2
 8002e50:	461d      	mov	r5, r3
 8002e52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	f7fd fb7e 	bl	8000558 <__aeabi_f2d>
 8002e5c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002e60:	f7fd fbd2 	bl	8000608 <__aeabi_dmul>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4620      	mov	r0, r4
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	f7fd fa16 	bl	800029c <__adddf3>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4614      	mov	r4, r2
 8002e76:	461d      	mov	r5, r3
 8002e78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	f7fd fb6b 	bl	8000558 <__aeabi_f2d>
 8002e82:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002e86:	f7fd fbbf 	bl	8000608 <__aeabi_dmul>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd fa01 	bl	8000298 <__aeabi_dsub>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	4b7a      	ldr	r3, [pc, #488]	; (800308c <madgwick+0x480>)
 8002ea4:	f7fd fbb0 	bl	8000608 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168

	        // Normalise accelerometer measurement
	        double a_norm = ax * ax + ay * ay + az * az;
 8002eb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002eb4:	edd3 7a00 	vldr	s15, [r3]
 8002eb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ebc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ec0:	edd3 7a00 	vldr	s15, [r3]
 8002ec4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ecc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ed0:	edd3 7a00 	vldr	s15, [r3]
 8002ed4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	ee17 0a90 	vmov	r0, s15
 8002ee0:	f7fd fb3a 	bl	8000558 <__aeabi_f2d>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	        if (a_norm == 0.) return;  // handle NaN
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8002ef8:	f7fd fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f041 84a7 	bne.w	8004852 <madgwick+0x1c46>
	        recipNorm = 1.0 / sqrt(a_norm);
 8002f04:	ed97 0b58 	vldr	d0, [r7, #352]	; 0x160
 8002f08:	f008 fcfe 	bl	800b908 <sqrt>
 8002f0c:	ec53 2b10 	vmov	r2, r3, d0
 8002f10:	f04f 0000 	mov.w	r0, #0
 8002f14:	495e      	ldr	r1, [pc, #376]	; (8003090 <madgwick+0x484>)
 8002f16:	f7fd fca1 	bl	800085c <__aeabi_ddiv>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        ax *= recipNorm;
 8002f22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	f7fd fb16 	bl	8000558 <__aeabi_f2d>
 8002f2c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002f30:	f7fd fb6a 	bl	8000608 <__aeabi_dmul>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	f107 045c 	add.w	r4, r7, #92	; 0x5c
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe5a 	bl	8000bf8 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	6023      	str	r3, [r4, #0]
	        ay *= recipNorm;
 8002f48:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	f7fd fb03 	bl	8000558 <__aeabi_f2d>
 8002f52:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002f56:	f7fd fb57 	bl	8000608 <__aeabi_dmul>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f7fd fe47 	bl	8000bf8 <__aeabi_d2f>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6023      	str	r3, [r4, #0]
	        az *= recipNorm;
 8002f6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	f7fd faf0 	bl	8000558 <__aeabi_f2d>
 8002f78:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002f7c:	f7fd fb44 	bl	8000608 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fd fe34 	bl	8000bf8 <__aeabi_d2f>
 8002f90:	4603      	mov	r3, r0
 8002f92:	6023      	str	r3, [r4, #0]


	        // Normalise magnetometer measurement
	        double m_norm = mx * mx + my * my + mz * mz;
 8002f94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f98:	edd3 7a00 	vldr	s15, [r3]
 8002f9c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fc0:	ee17 0a90 	vmov	r0, s15
 8002fc4:	f7fd fac8 	bl	8000558 <__aeabi_f2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
	        if (m_norm == 0.) return;  // handle NaN
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8002fdc:	f7fd fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f041 8437 	bne.w	8004856 <madgwick+0x1c4a>
	        recipNorm = 1.0 / sqrt(m_norm);
 8002fe8:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8002fec:	f008 fc8c 	bl	800b908 <sqrt>
 8002ff0:	ec53 2b10 	vmov	r2, r3, d0
 8002ff4:	f04f 0000 	mov.w	r0, #0
 8002ff8:	4925      	ldr	r1, [pc, #148]	; (8003090 <madgwick+0x484>)
 8002ffa:	f7fd fc2f 	bl	800085c <__aeabi_ddiv>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        mx *= recipNorm;
 8003006:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	f7fd faa4 	bl	8000558 <__aeabi_f2d>
 8003010:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003014:	f7fd faf8 	bl	8000608 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f7fd fde8 	bl	8000bf8 <__aeabi_d2f>
 8003028:	4603      	mov	r3, r0
 800302a:	6023      	str	r3, [r4, #0]
	        my *= recipNorm;
 800302c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f7fd fa91 	bl	8000558 <__aeabi_f2d>
 8003036:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 800303a:	f7fd fae5 	bl	8000608 <__aeabi_dmul>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fdd5 	bl	8000bf8 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	6023      	str	r3, [r4, #0]
	        mz *= recipNorm;
 8003052:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	f7fd fa7e 	bl	8000558 <__aeabi_f2d>
 800305c:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8003060:	f7fd fad2 	bl	8000608 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f7fd fdc2 	bl	8000bf8 <__aeabi_d2f>
 8003074:	4603      	mov	r3, r0
 8003076:	6023      	str	r3, [r4, #0]

	        // Auxiliary variables to avoid repeated arithmetic
	        _2q0mx = 2.0f * q0 * mx;
 8003078:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	f7fd f90c 	bl	800029c <__adddf3>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	e004      	b.n	8003094 <madgwick+0x488>
 800308a:	bf00      	nop
 800308c:	3fe00000 	.word	0x3fe00000
 8003090:	3ff00000 	.word	0x3ff00000
 8003094:	4614      	mov	r4, r2
 8003096:	461d      	mov	r5, r3
 8003098:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	f7fd fa5b 	bl	8000558 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd faad 	bl	8000608 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	        _2q0my = 2.0f * q0 * my;
 80030b6:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	f7fd f8ed 	bl	800029c <__adddf3>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4614      	mov	r4, r2
 80030c8:	461d      	mov	r5, r3
 80030ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	f7fd fa42 	bl	8000558 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd fa94 	bl	8000608 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	        _2q0mz = 2.0f * q0 * mz;
 80030e8:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	f7fd f8d4 	bl	800029c <__adddf3>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	461d      	mov	r5, r3
 80030fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003100:	6818      	ldr	r0, [r3, #0]
 8003102:	f7fd fa29 	bl	8000558 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd fa7b 	bl	8000608 <__aeabi_dmul>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	        _2q1mx = 2.0f * q1 * mx;
 800311a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	f7fd f8bb 	bl	800029c <__adddf3>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4614      	mov	r4, r2
 800312c:	461d      	mov	r5, r3
 800312e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	f7fd fa10 	bl	8000558 <__aeabi_f2d>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4620      	mov	r0, r4
 800313e:	4629      	mov	r1, r5
 8003140:	f7fd fa62 	bl	8000608 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	        _2q0 = 2.0f * q0;
 800314c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	f7fd f8a2 	bl	800029c <__adddf3>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	        _2q1 = 2.0f * q1;
 8003160:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	f7fd f898 	bl	800029c <__adddf3>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	        _2q2 = 2.0f * q2;
 8003174:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	f7fd f88e 	bl	800029c <__adddf3>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	        _2q3 = 2.0f * q3;
 8003188:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	f7fd f884 	bl	800029c <__adddf3>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	        _2q0q2 = 2.0f * q0 * q2;
 800319c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	f7fd f87a 	bl	800029c <__adddf3>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031b0:	f7fd fa2a 	bl	8000608 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108
	        _2q2q3 = 2.0f * q2 * q3;
 80031bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	f7fd f86a 	bl	800029c <__adddf3>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80031d0:	f7fd fa1a 	bl	8000608 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100
	        q0q0 = q0 * q0;
 80031dc:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80031e0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80031e4:	f7fd fa10 	bl	8000608 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
	        q0q1 = q0 * q1;
 80031f0:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 80031f4:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80031f8:	f7fd fa06 	bl	8000608 <__aeabi_dmul>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	        q0q2 = q0 * q2;
 8003204:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003208:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800320c:	f7fd f9fc 	bl	8000608 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	        q0q3 = q0 * q3;
 8003218:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800321c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8003220:	f7fd f9f2 	bl	8000608 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
	        q1q1 = q1 * q1;
 800322c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003230:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003234:	f7fd f9e8 	bl	8000608 <__aeabi_dmul>
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	        q1q2 = q1 * q2;
 8003240:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003244:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003248:	f7fd f9de 	bl	8000608 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	        q1q3 = q1 * q3;
 8003254:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003258:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800325c:	f7fd f9d4 	bl	8000608 <__aeabi_dmul>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	        q2q2 = q2 * q2;
 8003268:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800326c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003270:	f7fd f9ca 	bl	8000608 <__aeabi_dmul>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	        q2q3 = q2 * q3;
 800327c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003280:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003284:	f7fd f9c0 	bl	8000608 <__aeabi_dmul>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	        q3q3 = q3 * q3;
 8003290:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003294:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003298:	f7fd f9b6 	bl	8000608 <__aeabi_dmul>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0

	        // Reference direction of Earth's magnetic field
	        hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80032a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	f7fd f955 	bl	8000558 <__aeabi_f2d>
 80032ae:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80032b2:	f7fd f9a9 	bl	8000608 <__aeabi_dmul>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4614      	mov	r4, r2
 80032bc:	461d      	mov	r5, r3
 80032be:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80032c2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80032c6:	f7fd f99f 	bl	8000608 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4620      	mov	r0, r4
 80032d0:	4629      	mov	r1, r5
 80032d2:	f7fc ffe1 	bl	8000298 <__aeabi_dsub>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4614      	mov	r4, r2
 80032dc:	461d      	mov	r5, r3
 80032de:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80032e2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80032e6:	f7fd f98f 	bl	8000608 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4620      	mov	r0, r4
 80032f0:	4629      	mov	r1, r5
 80032f2:	f7fc ffd3 	bl	800029c <__adddf3>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4614      	mov	r4, r2
 80032fc:	461d      	mov	r5, r3
 80032fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	f7fd f928 	bl	8000558 <__aeabi_f2d>
 8003308:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800330c:	f7fd f97c 	bl	8000608 <__aeabi_dmul>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4620      	mov	r0, r4
 8003316:	4629      	mov	r1, r5
 8003318:	f7fc ffc0 	bl	800029c <__adddf3>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	f7fd f915 	bl	8000558 <__aeabi_f2d>
 800332e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003332:	f7fd f969 	bl	8000608 <__aeabi_dmul>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003342:	f7fd f961 	bl	8000608 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4620      	mov	r0, r4
 800334c:	4629      	mov	r1, r5
 800334e:	f7fc ffa5 	bl	800029c <__adddf3>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4614      	mov	r4, r2
 8003358:	461d      	mov	r5, r3
 800335a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800335e:	6818      	ldr	r0, [r3, #0]
 8003360:	f7fd f8fa 	bl	8000558 <__aeabi_f2d>
 8003364:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003368:	f7fd f94e 	bl	8000608 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003378:	f7fd f946 	bl	8000608 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fc ff8a 	bl	800029c <__adddf3>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	461d      	mov	r5, r3
 8003390:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f7fd f8df 	bl	8000558 <__aeabi_f2d>
 800339a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800339e:	f7fd f933 	bl	8000608 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4620      	mov	r0, r4
 80033a8:	4629      	mov	r1, r5
 80033aa:	f7fc ff75 	bl	8000298 <__aeabi_dsub>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4690      	mov	r8, r2
 80033b4:	4699      	mov	r9, r3
 80033b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	f7fd f8cc 	bl	8000558 <__aeabi_f2d>
 80033c0:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80033c4:	f7fd f920 	bl	8000608 <__aeabi_dmul>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80033d0:	4640      	mov	r0, r8
 80033d2:	4649      	mov	r1, r9
 80033d4:	f7fc ff60 	bl	8000298 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	e9c4 2300 	strd	r2, r3, [r4]
	        hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80033e0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80033e4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80033e8:	f7fd f90e 	bl	8000608 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4614      	mov	r4, r2
 80033f2:	461d      	mov	r5, r3
 80033f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	f7fd f8ad 	bl	8000558 <__aeabi_f2d>
 80033fe:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8003402:	f7fd f901 	bl	8000608 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	f7fc ff45 	bl	800029c <__adddf3>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	4614      	mov	r4, r2
 8003418:	461d      	mov	r5, r3
 800341a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800341e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8003422:	f7fd f8f1 	bl	8000608 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4620      	mov	r0, r4
 800342c:	4629      	mov	r1, r5
 800342e:	f7fc ff33 	bl	8000298 <__aeabi_dsub>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4614      	mov	r4, r2
 8003438:	461d      	mov	r5, r3
 800343a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800343e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8003442:	f7fd f8e1 	bl	8000608 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fc ff25 	bl	800029c <__adddf3>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4614      	mov	r4, r2
 8003458:	461d      	mov	r5, r3
 800345a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	f7fd f87a 	bl	8000558 <__aeabi_f2d>
 8003464:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8003468:	f7fd f8ce 	bl	8000608 <__aeabi_dmul>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4620      	mov	r0, r4
 8003472:	4629      	mov	r1, r5
 8003474:	f7fc ff10 	bl	8000298 <__aeabi_dsub>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4614      	mov	r4, r2
 800347e:	461d      	mov	r5, r3
 8003480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	f7fd f867 	bl	8000558 <__aeabi_f2d>
 800348a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800348e:	f7fd f8bb 	bl	8000608 <__aeabi_dmul>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f7fc feff 	bl	800029c <__adddf3>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4614      	mov	r4, r2
 80034a4:	461d      	mov	r5, r3
 80034a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034aa:	6818      	ldr	r0, [r3, #0]
 80034ac:	f7fd f854 	bl	8000558 <__aeabi_f2d>
 80034b0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80034b4:	f7fd f8a8 	bl	8000608 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80034c4:	f7fd f8a0 	bl	8000608 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fc fee4 	bl	800029c <__adddf3>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4690      	mov	r8, r2
 80034da:	4699      	mov	r9, r3
 80034dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	f7fd f839 	bl	8000558 <__aeabi_f2d>
 80034e6:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80034ea:	f7fd f88d 	bl	8000608 <__aeabi_dmul>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80034f6:	4640      	mov	r0, r8
 80034f8:	4649      	mov	r1, r9
 80034fa:	f7fc fecd 	bl	8000298 <__aeabi_dsub>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	e9c4 2300 	strd	r2, r3, [r4]
	        _2bx = sqrt(hx * hx + hy * hy);
 8003506:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800350a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800350e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003512:	f7fd f879 	bl	8000608 <__aeabi_dmul>
 8003516:	4602      	mov	r2, r0
 8003518:	460b      	mov	r3, r1
 800351a:	4614      	mov	r4, r2
 800351c:	461d      	mov	r5, r3
 800351e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8003522:	e9d1 2300 	ldrd	r2, r3, [r1]
 8003526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800352a:	f7fd f86d 	bl	8000608 <__aeabi_dmul>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fc feb1 	bl	800029c <__adddf3>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	ec43 2b17 	vmov	d7, r2, r3
 8003542:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8003546:	eeb0 0a47 	vmov.f32	s0, s14
 800354a:	eef0 0a67 	vmov.f32	s1, s15
 800354e:	f008 f9db 	bl	800b908 <sqrt>
 8003552:	ed84 0b00 	vstr	d0, [r4]
	        _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8003556:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
 800355c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003560:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
 8003566:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800356a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800356e:	f7fd f84b 	bl	8000608 <__aeabi_dmul>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4614      	mov	r4, r2
 8003578:	461d      	mov	r5, r3
 800357a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800357e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003582:	f7fd f841 	bl	8000608 <__aeabi_dmul>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4620      	mov	r0, r4
 800358c:	4629      	mov	r1, r5
 800358e:	f7fc fe85 	bl	800029c <__adddf3>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4614      	mov	r4, r2
 8003598:	461d      	mov	r5, r3
 800359a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800359e:	6818      	ldr	r0, [r3, #0]
 80035a0:	f7fc ffda 	bl	8000558 <__aeabi_f2d>
 80035a4:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80035a8:	f7fd f82e 	bl	8000608 <__aeabi_dmul>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4620      	mov	r0, r4
 80035b2:	4629      	mov	r1, r5
 80035b4:	f7fc fe72 	bl	800029c <__adddf3>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4614      	mov	r4, r2
 80035be:	461d      	mov	r5, r3
 80035c0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80035c4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80035c8:	f7fd f81e 	bl	8000608 <__aeabi_dmul>
 80035cc:	4602      	mov	r2, r0
 80035ce:	460b      	mov	r3, r1
 80035d0:	4620      	mov	r0, r4
 80035d2:	4629      	mov	r1, r5
 80035d4:	f7fc fe62 	bl	800029c <__adddf3>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4614      	mov	r4, r2
 80035de:	461d      	mov	r5, r3
 80035e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	f7fc ffb7 	bl	8000558 <__aeabi_f2d>
 80035ea:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80035ee:	f7fd f80b 	bl	8000608 <__aeabi_dmul>
 80035f2:	4602      	mov	r2, r0
 80035f4:	460b      	mov	r3, r1
 80035f6:	4620      	mov	r0, r4
 80035f8:	4629      	mov	r1, r5
 80035fa:	f7fc fe4d 	bl	8000298 <__aeabi_dsub>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4614      	mov	r4, r2
 8003604:	461d      	mov	r5, r3
 8003606:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	f7fc ffa4 	bl	8000558 <__aeabi_f2d>
 8003610:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8003614:	f7fc fff8 	bl	8000608 <__aeabi_dmul>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003624:	f7fc fff0 	bl	8000608 <__aeabi_dmul>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4620      	mov	r0, r4
 800362e:	4629      	mov	r1, r5
 8003630:	f7fc fe34 	bl	800029c <__adddf3>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4614      	mov	r4, r2
 800363a:	461d      	mov	r5, r3
 800363c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7fc ff89 	bl	8000558 <__aeabi_f2d>
 8003646:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800364a:	f7fc ffdd 	bl	8000608 <__aeabi_dmul>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4620      	mov	r0, r4
 8003654:	4629      	mov	r1, r5
 8003656:	f7fc fe1f 	bl	8000298 <__aeabi_dsub>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4690      	mov	r8, r2
 8003660:	4699      	mov	r9, r3
 8003662:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	f7fc ff76 	bl	8000558 <__aeabi_f2d>
 800366c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003670:	f7fc ffca 	bl	8000608 <__aeabi_dmul>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800367c:	4640      	mov	r0, r8
 800367e:	4649      	mov	r1, r9
 8003680:	f7fc fe0c 	bl	800029c <__adddf3>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	e9c4 2300 	strd	r2, r3, [r4]
	        _4bx = 2.0f * _2bx;
 800368c:	f107 0488 	add.w	r4, r7, #136	; 0x88
 8003690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	f7fc fdfe 	bl	800029c <__adddf3>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	e9c4 2300 	strd	r2, r3, [r4]
	        _4bz = 2.0f * _2bz;
 80036a8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80036ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	f7fc fdf0 	bl	800029c <__adddf3>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	e9c4 2300 	strd	r2, r3, [r4]

	        // Gradient decent algorithm corrective step
	        s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80036c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80036c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80036d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	f7fc fdde 	bl	800029c <__adddf3>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80036ec:	f7fc fdd4 	bl	8000298 <__aeabi_dsub>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4614      	mov	r4, r2
 80036f6:	461d      	mov	r5, r3
 80036f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	f7fc ff2b 	bl	8000558 <__aeabi_f2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4620      	mov	r0, r4
 8003708:	4629      	mov	r1, r5
 800370a:	f7fc fdc5 	bl	8000298 <__aeabi_dsub>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003716:	f7fc ff77 	bl	8000608 <__aeabi_dmul>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4690      	mov	r8, r2
 8003720:	4699      	mov	r9, r3
 8003722:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	f7fc fdb7 	bl	800029c <__adddf3>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4610      	mov	r0, r2
 8003734:	4619      	mov	r1, r3
 8003736:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 800373a:	f7fc fdaf 	bl	800029c <__adddf3>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4614      	mov	r4, r2
 8003744:	461d      	mov	r5, r3
 8003746:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	f7fc ff04 	bl	8000558 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4620      	mov	r0, r4
 8003756:	4629      	mov	r1, r5
 8003758:	f7fc fd9e 	bl	8000298 <__aeabi_dsub>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	4610      	mov	r0, r2
 8003762:	4619      	mov	r1, r3
 8003764:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8003768:	f7fc ff4e 	bl	8000608 <__aeabi_dmul>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4640      	mov	r0, r8
 8003772:	4649      	mov	r1, r9
 8003774:	f7fc fd92 	bl	800029c <__adddf3>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4692      	mov	sl, r2
 800377e:	469b      	mov	fp, r3
 8003780:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003784:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800378c:	f7fc ff3c 	bl	8000608 <__aeabi_dmul>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4690      	mov	r8, r2
 8003796:	4699      	mov	r9, r3
 8003798:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800379c:	f04f 0000 	mov.w	r0, #0
 80037a0:	49d6      	ldr	r1, [pc, #856]	; (8003afc <madgwick+0xef0>)
 80037a2:	f7fc fd79 	bl	8000298 <__aeabi_dsub>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80037b2:	f7fc fd71 	bl	8000298 <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f7fc ff1f 	bl	8000608 <__aeabi_dmul>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4614      	mov	r4, r2
 80037d0:	461d      	mov	r5, r3
 80037d2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80037d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037da:	f7fc fd5d 	bl	8000298 <__aeabi_dsub>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ee:	f7fc ff0b 	bl	8000608 <__aeabi_dmul>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4620      	mov	r0, r4
 80037f8:	4629      	mov	r1, r5
 80037fa:	f7fc fd4f 	bl	800029c <__adddf3>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4614      	mov	r4, r2
 8003804:	461d      	mov	r5, r3
 8003806:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	f7fc fea4 	bl	8000558 <__aeabi_f2d>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4620      	mov	r0, r4
 8003816:	4629      	mov	r1, r5
 8003818:	f7fc fd3e 	bl	8000298 <__aeabi_dsub>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fc fef0 	bl	8000608 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4650      	mov	r0, sl
 800382e:	4659      	mov	r1, fp
 8003830:	f7fc fd32 	bl	8000298 <__aeabi_dsub>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4692      	mov	sl, r2
 800383a:	469b      	mov	fp, r3
 800383c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	623a      	str	r2, [r7, #32]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
 800384c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003850:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003854:	f7fc fed8 	bl	8000608 <__aeabi_dmul>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003864:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800386c:	f7fc fecc 	bl	8000608 <__aeabi_dmul>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4620      	mov	r0, r4
 8003876:	4629      	mov	r1, r5
 8003878:	f7fc fd10 	bl	800029c <__adddf3>
 800387c:	4602      	mov	r2, r0
 800387e:	460b      	mov	r3, r1
 8003880:	4690      	mov	r8, r2
 8003882:	4699      	mov	r9, r3
 8003884:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8003888:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800388c:	f7fc fd04 	bl	8000298 <__aeabi_dsub>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc feb2 	bl	8000608 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4614      	mov	r4, r2
 80038aa:	461d      	mov	r5, r3
 80038ac:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80038b0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80038b4:	f7fc fcf2 	bl	800029c <__adddf3>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4610      	mov	r0, r2
 80038be:	4619      	mov	r1, r3
 80038c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f7fc fe9e 	bl	8000608 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4620      	mov	r0, r4
 80038d2:	4629      	mov	r1, r5
 80038d4:	f7fc fce2 	bl	800029c <__adddf3>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4614      	mov	r4, r2
 80038de:	461d      	mov	r5, r3
 80038e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038e4:	6818      	ldr	r0, [r3, #0]
 80038e6:	f7fc fe37 	bl	8000558 <__aeabi_f2d>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4620      	mov	r0, r4
 80038f0:	4629      	mov	r1, r5
 80038f2:	f7fc fcd1 	bl	8000298 <__aeabi_dsub>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4640      	mov	r0, r8
 80038fc:	4649      	mov	r1, r9
 80038fe:	f7fc fe83 	bl	8000608 <__aeabi_dmul>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4650      	mov	r0, sl
 8003908:	4659      	mov	r1, fp
 800390a:	f7fc fcc7 	bl	800029c <__adddf3>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4692      	mov	sl, r2
 8003914:	469b      	mov	fp, r3
 8003916:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800391a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 800391e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003922:	f7fc fe71 	bl	8000608 <__aeabi_dmul>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003932:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003936:	f7fc fcb1 	bl	800029c <__adddf3>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f7fc fe5d 	bl	8000608 <__aeabi_dmul>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4614      	mov	r4, r2
 8003954:	461d      	mov	r5, r3
 8003956:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800395a:	f04f 0000 	mov.w	r0, #0
 800395e:	4967      	ldr	r1, [pc, #412]	; (8003afc <madgwick+0xef0>)
 8003960:	f7fc fc9a 	bl	8000298 <__aeabi_dsub>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4610      	mov	r0, r2
 800396a:	4619      	mov	r1, r3
 800396c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003970:	f7fc fc92 	bl	8000298 <__aeabi_dsub>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4610      	mov	r0, r2
 800397a:	4619      	mov	r1, r3
 800397c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f7fc fe40 	bl	8000608 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4620      	mov	r0, r4
 800398e:	4629      	mov	r1, r5
 8003990:	f7fc fc84 	bl	800029c <__adddf3>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4614      	mov	r4, r2
 800399a:	461d      	mov	r5, r3
 800399c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	f7fc fdd9 	bl	8000558 <__aeabi_f2d>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4620      	mov	r0, r4
 80039ac:	4629      	mov	r1, r5
 80039ae:	f7fc fc73 	bl	8000298 <__aeabi_dsub>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4640      	mov	r0, r8
 80039b8:	4649      	mov	r1, r9
 80039ba:	f7fc fe25 	bl	8000608 <__aeabi_dmul>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80039c6:	4650      	mov	r0, sl
 80039c8:	4659      	mov	r1, fp
 80039ca:	f7fc fc67 	bl	800029c <__adddf3>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	e9c4 2300 	strd	r2, r3, [r4]
	        s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80039d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	f7fc fc5d 	bl	800029c <__adddf3>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4610      	mov	r0, r2
 80039e8:	4619      	mov	r1, r3
 80039ea:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80039ee:	f7fc fc53 	bl	8000298 <__aeabi_dsub>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4614      	mov	r4, r2
 80039f8:	461d      	mov	r5, r3
 80039fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	f7fc fdaa 	bl	8000558 <__aeabi_f2d>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fc44 	bl	8000298 <__aeabi_dsub>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003a1c:	f7fc fdf4 	bl	8000608 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	f7fc fc34 	bl	800029c <__adddf3>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4610      	mov	r0, r2
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8003a40:	f7fc fc2c 	bl	800029c <__adddf3>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4614      	mov	r4, r2
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f7fc fd81 	bl	8000558 <__aeabi_f2d>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fc fc1b 	bl	8000298 <__aeabi_dsub>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8003a6e:	f7fc fdcb 	bl	8000608 <__aeabi_dmul>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4640      	mov	r0, r8
 8003a78:	4649      	mov	r1, r9
 8003a7a:	f7fc fc0f 	bl	800029c <__adddf3>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	460b      	mov	r3, r1
 8003a82:	4692      	mov	sl, r2
 8003a84:	469b      	mov	fp, r3
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <madgwick+0xef4>)
 8003a8c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a90:	f7fc fdba 	bl	8000608 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4690      	mov	r8, r2
 8003a9a:	4699      	mov	r9, r3
 8003a9c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	f7fc fbfa 	bl	800029c <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	4914      	ldr	r1, [pc, #80]	; (8003b04 <madgwick+0xef8>)
 8003ab2:	f7fc fbf1 	bl	8000298 <__aeabi_dsub>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4614      	mov	r4, r2
 8003abc:	461d      	mov	r5, r3
 8003abe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	f7fc fbe9 	bl	800029c <__adddf3>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	4620      	mov	r0, r4
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	f7fc fbe1 	bl	8000298 <__aeabi_dsub>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4614      	mov	r4, r2
 8003adc:	461d      	mov	r5, r3
 8003ade:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	f7fc fd38 	bl	8000558 <__aeabi_f2d>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fbd2 	bl	8000298 <__aeabi_dsub>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	e006      	b.n	8003b08 <madgwick+0xefc>
 8003afa:	bf00      	nop
 8003afc:	3fe00000 	.word	0x3fe00000
 8003b00:	40100000 	.word	0x40100000
 8003b04:	3ff00000 	.word	0x3ff00000
 8003b08:	4640      	mov	r0, r8
 8003b0a:	4649      	mov	r1, r9
 8003b0c:	f7fc fd7c 	bl	8000608 <__aeabi_dmul>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4650      	mov	r0, sl
 8003b16:	4659      	mov	r1, fp
 8003b18:	f7fc fbbe 	bl	8000298 <__aeabi_dsub>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4692      	mov	sl, r2
 8003b22:	469b      	mov	fp, r3
 8003b24:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003b28:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b30:	f7fc fd6a 	bl	8000608 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4690      	mov	r8, r2
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003b40:	f04f 0000 	mov.w	r0, #0
 8003b44:	49d5      	ldr	r1, [pc, #852]	; (8003e9c <madgwick+0x1290>)
 8003b46:	f7fc fba7 	bl	8000298 <__aeabi_dsub>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003b56:	f7fc fb9f 	bl	8000298 <__aeabi_dsub>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f7fc fd4d 	bl	8000608 <__aeabi_dmul>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8003b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b7e:	f7fc fb8b 	bl	8000298 <__aeabi_dsub>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	f7fc fd39 	bl	8000608 <__aeabi_dmul>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4629      	mov	r1, r5
 8003b9e:	f7fc fb7d 	bl	800029c <__adddf3>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4614      	mov	r4, r2
 8003ba8:	461d      	mov	r5, r3
 8003baa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	f7fc fcd2 	bl	8000558 <__aeabi_f2d>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4620      	mov	r0, r4
 8003bba:	4629      	mov	r1, r5
 8003bbc:	f7fc fb6c 	bl	8000298 <__aeabi_dsub>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4640      	mov	r0, r8
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	f7fc fd1e 	bl	8000608 <__aeabi_dmul>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4650      	mov	r0, sl
 8003bd2:	4659      	mov	r1, fp
 8003bd4:	f7fc fb62 	bl	800029c <__adddf3>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4692      	mov	sl, r2
 8003bde:	469b      	mov	fp, r3
 8003be0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003be4:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bec:	f7fc fd0c 	bl	8000608 <__aeabi_dmul>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4614      	mov	r4, r2
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003bfc:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8003c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c04:	f7fc fd00 	bl	8000608 <__aeabi_dmul>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc fb44 	bl	800029c <__adddf3>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4690      	mov	r8, r2
 8003c1a:	4699      	mov	r9, r3
 8003c1c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8003c20:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003c24:	f7fc fb38 	bl	8000298 <__aeabi_dsub>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f7fc fce6 	bl	8000608 <__aeabi_dmul>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	461d      	mov	r5, r3
 8003c44:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003c48:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003c4c:	f7fc fb26 	bl	800029c <__adddf3>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f7fc fcd2 	bl	8000608 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fb16 	bl	800029c <__adddf3>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	f7fc fc6b 	bl	8000558 <__aeabi_f2d>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4620      	mov	r0, r4
 8003c88:	4629      	mov	r1, r5
 8003c8a:	f7fc fb05 	bl	8000298 <__aeabi_dsub>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4640      	mov	r0, r8
 8003c94:	4649      	mov	r1, r9
 8003c96:	f7fc fcb7 	bl	8000608 <__aeabi_dmul>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4650      	mov	r0, sl
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	f7fc fafb 	bl	800029c <__adddf3>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4692      	mov	sl, r2
 8003cac:	469b      	mov	fp, r3
 8003cae:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003cb2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cba:	f7fc fca5 	bl	8000608 <__aeabi_dmul>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4614      	mov	r4, r2
 8003cc4:	461d      	mov	r5, r3
 8003cc6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003cca:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cd2:	f7fc fc99 	bl	8000608 <__aeabi_dmul>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f7fc fadb 	bl	8000298 <__aeabi_dsub>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4690      	mov	r8, r2
 8003ce8:	4699      	mov	r9, r3
 8003cea:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8003cee:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8003cf2:	f7fc fad3 	bl	800029c <__adddf3>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	f7fc fc7f 	bl	8000608 <__aeabi_dmul>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4614      	mov	r4, r2
 8003d10:	461d      	mov	r5, r3
 8003d12:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	4960      	ldr	r1, [pc, #384]	; (8003e9c <madgwick+0x1290>)
 8003d1c:	f7fc fabc 	bl	8000298 <__aeabi_dsub>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003d2c:	f7fc fab4 	bl	8000298 <__aeabi_dsub>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fc62 	bl	8000608 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	f7fc faa6 	bl	800029c <__adddf3>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	f7fc fbfb 	bl	8000558 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc fa95 	bl	8000298 <__aeabi_dsub>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4640      	mov	r0, r8
 8003d74:	4649      	mov	r1, r9
 8003d76:	f7fc fc47 	bl	8000608 <__aeabi_dmul>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003d82:	4650      	mov	r0, sl
 8003d84:	4659      	mov	r1, fp
 8003d86:	f7fc fa89 	bl	800029c <__adddf3>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9c4 2300 	strd	r2, r3, [r4]
	        s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8003d92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d96:	61bb      	str	r3, [r7, #24]
 8003d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	f7fc fa77 	bl	800029c <__adddf3>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4610      	mov	r0, r2
 8003db4:	4619      	mov	r1, r3
 8003db6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8003dba:	f7fc fa6d 	bl	8000298 <__aeabi_dsub>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	461d      	mov	r5, r3
 8003dc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	f7fc fbc4 	bl	8000558 <__aeabi_f2d>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	4629      	mov	r1, r5
 8003dd8:	f7fc fa5e 	bl	8000298 <__aeabi_dsub>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003de4:	f7fc fc10 	bl	8000608 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4690      	mov	r8, r2
 8003dee:	4699      	mov	r9, r3
 8003df0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	f7fc fa50 	bl	800029c <__adddf3>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8003e08:	f7fc fa48 	bl	800029c <__adddf3>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4614      	mov	r4, r2
 8003e12:	461d      	mov	r5, r3
 8003e14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	f7fc fb9d 	bl	8000558 <__aeabi_f2d>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	460b      	mov	r3, r1
 8003e22:	4620      	mov	r0, r4
 8003e24:	4629      	mov	r1, r5
 8003e26:	f7fc fa37 	bl	8000298 <__aeabi_dsub>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003e36:	f7fc fbe7 	bl	8000608 <__aeabi_dmul>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4640      	mov	r0, r8
 8003e40:	4649      	mov	r1, r9
 8003e42:	f7fc fa2b 	bl	800029c <__adddf3>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4692      	mov	sl, r2
 8003e4c:	469b      	mov	fp, r3
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <madgwick+0x1294>)
 8003e54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003e58:	f7fc fbd6 	bl	8000608 <__aeabi_dmul>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4690      	mov	r8, r2
 8003e62:	4699      	mov	r9, r3
 8003e64:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	f7fc fa16 	bl	800029c <__adddf3>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	490a      	ldr	r1, [pc, #40]	; (8003ea4 <madgwick+0x1298>)
 8003e7a:	f7fc fa0d 	bl	8000298 <__aeabi_dsub>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4614      	mov	r4, r2
 8003e84:	461d      	mov	r5, r3
 8003e86:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	f7fc fa05 	bl	800029c <__adddf3>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4620      	mov	r0, r4
 8003e98:	4629      	mov	r1, r5
 8003e9a:	e005      	b.n	8003ea8 <madgwick+0x129c>
 8003e9c:	3fe00000 	.word	0x3fe00000
 8003ea0:	40100000 	.word	0x40100000
 8003ea4:	3ff00000 	.word	0x3ff00000
 8003ea8:	f7fc f9f6 	bl	8000298 <__aeabi_dsub>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4614      	mov	r4, r2
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	f7fc fb4d 	bl	8000558 <__aeabi_f2d>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7fc f9e7 	bl	8000298 <__aeabi_dsub>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4640      	mov	r0, r8
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	f7fc fb99 	bl	8000608 <__aeabi_dmul>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4650      	mov	r0, sl
 8003edc:	4659      	mov	r1, fp
 8003ede:	f7fc f9db 	bl	8000298 <__aeabi_dsub>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4692      	mov	sl, r2
 8003ee8:	469b      	mov	fp, r3
 8003eea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	613a      	str	r2, [r7, #16]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8003efe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f02:	f7fc fb81 	bl	8000608 <__aeabi_dmul>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4614      	mov	r4, r2
 8003f0c:	461d      	mov	r5, r3
 8003f0e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003f12:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8003f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f1a:	f7fc fb75 	bl	8000608 <__aeabi_dmul>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc f9b7 	bl	8000298 <__aeabi_dsub>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4690      	mov	r8, r2
 8003f30:	4699      	mov	r9, r3
 8003f32:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003f36:	f04f 0000 	mov.w	r0, #0
 8003f3a:	49d4      	ldr	r1, [pc, #848]	; (800428c <madgwick+0x1680>)
 8003f3c:	f7fc f9ac 	bl	8000298 <__aeabi_dsub>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003f4c:	f7fc f9a4 	bl	8000298 <__aeabi_dsub>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc fb52 	bl	8000608 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4614      	mov	r4, r2
 8003f6a:	461d      	mov	r5, r3
 8003f6c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8003f70:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f74:	f7fc f990 	bl	8000298 <__aeabi_dsub>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f88:	f7fc fb3e 	bl	8000608 <__aeabi_dmul>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f7fc f982 	bl	800029c <__adddf3>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4614      	mov	r4, r2
 8003f9e:	461d      	mov	r5, r3
 8003fa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f7fc fad7 	bl	8000558 <__aeabi_f2d>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4620      	mov	r0, r4
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7fc f971 	bl	8000298 <__aeabi_dsub>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4640      	mov	r0, r8
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	f7fc fb23 	bl	8000608 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4650      	mov	r0, sl
 8003fc8:	4659      	mov	r1, fp
 8003fca:	f7fc f967 	bl	800029c <__adddf3>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4692      	mov	sl, r2
 8003fd4:	469b      	mov	fp, r3
 8003fd6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003fda:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8003fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fe2:	f7fc fb11 	bl	8000608 <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4614      	mov	r4, r2
 8003fec:	461d      	mov	r5, r3
 8003fee:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003ff2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ffa:	f7fc fb05 	bl	8000608 <__aeabi_dmul>
 8003ffe:	4602      	mov	r2, r0
 8004000:	460b      	mov	r3, r1
 8004002:	4620      	mov	r0, r4
 8004004:	4629      	mov	r1, r5
 8004006:	f7fc f949 	bl	800029c <__adddf3>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4690      	mov	r8, r2
 8004010:	4699      	mov	r9, r3
 8004012:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004016:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800401a:	f7fc f93d 	bl	8000298 <__aeabi_dsub>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f7fc faeb 	bl	8000608 <__aeabi_dmul>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4614      	mov	r4, r2
 8004038:	461d      	mov	r5, r3
 800403a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800403e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8004042:	f7fc f92b 	bl	800029c <__adddf3>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc fad7 	bl	8000608 <__aeabi_dmul>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4620      	mov	r0, r4
 8004060:	4629      	mov	r1, r5
 8004062:	f7fc f91b 	bl	800029c <__adddf3>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4614      	mov	r4, r2
 800406c:	461d      	mov	r5, r3
 800406e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f7fc fa70 	bl	8000558 <__aeabi_f2d>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4620      	mov	r0, r4
 800407e:	4629      	mov	r1, r5
 8004080:	f7fc f90a 	bl	8000298 <__aeabi_dsub>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4640      	mov	r0, r8
 800408a:	4649      	mov	r1, r9
 800408c:	f7fc fabc 	bl	8000608 <__aeabi_dmul>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4650      	mov	r0, sl
 8004096:	4659      	mov	r1, fp
 8004098:	f7fc f900 	bl	800029c <__adddf3>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4692      	mov	sl, r2
 80040a2:	469b      	mov	fp, r3
 80040a4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80040a8:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 80040ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040b0:	f7fc faaa 	bl	8000608 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4614      	mov	r4, r2
 80040ba:	461d      	mov	r5, r3
 80040bc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80040c0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 80040c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c8:	f7fc fa9e 	bl	8000608 <__aeabi_dmul>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4620      	mov	r0, r4
 80040d2:	4629      	mov	r1, r5
 80040d4:	f7fc f8e0 	bl	8000298 <__aeabi_dsub>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4690      	mov	r8, r2
 80040de:	4699      	mov	r9, r3
 80040e0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80040e4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80040e8:	f7fc f8d8 	bl	800029c <__adddf3>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f7fc fa84 	bl	8000608 <__aeabi_dmul>
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	4614      	mov	r4, r2
 8004106:	461d      	mov	r5, r3
 8004108:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800410c:	f04f 0000 	mov.w	r0, #0
 8004110:	495e      	ldr	r1, [pc, #376]	; (800428c <madgwick+0x1680>)
 8004112:	f7fc f8c1 	bl	8000298 <__aeabi_dsub>
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4610      	mov	r0, r2
 800411c:	4619      	mov	r1, r3
 800411e:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004122:	f7fc f8b9 	bl	8000298 <__aeabi_dsub>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc fa67 	bl	8000608 <__aeabi_dmul>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4620      	mov	r0, r4
 8004140:	4629      	mov	r1, r5
 8004142:	f7fc f8ab 	bl	800029c <__adddf3>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4614      	mov	r4, r2
 800414c:	461d      	mov	r5, r3
 800414e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004152:	6818      	ldr	r0, [r3, #0]
 8004154:	f7fc fa00 	bl	8000558 <__aeabi_f2d>
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4620      	mov	r0, r4
 800415e:	4629      	mov	r1, r5
 8004160:	f7fc f89a 	bl	8000298 <__aeabi_dsub>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4640      	mov	r0, r8
 800416a:	4649      	mov	r1, r9
 800416c:	f7fc fa4c 	bl	8000608 <__aeabi_dmul>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8004178:	4650      	mov	r0, sl
 800417a:	4659      	mov	r1, fp
 800417c:	f7fc f88e 	bl	800029c <__adddf3>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	e9c4 2300 	strd	r2, r3, [r4]
	        s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8004188:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	f7fc f884 	bl	800029c <__adddf3>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 80041a0:	f7fc f87a 	bl	8000298 <__aeabi_dsub>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4614      	mov	r4, r2
 80041aa:	461d      	mov	r5, r3
 80041ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f7fc f9d1 	bl	8000558 <__aeabi_f2d>
 80041b6:	4602      	mov	r2, r0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4620      	mov	r0, r4
 80041bc:	4629      	mov	r1, r5
 80041be:	f7fc f86b 	bl	8000298 <__aeabi_dsub>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80041ce:	f7fc fa1b 	bl	8000608 <__aeabi_dmul>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4614      	mov	r4, r2
 80041d8:	461d      	mov	r5, r3
 80041da:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	f7fc f85b 	bl	800029c <__adddf3>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4610      	mov	r0, r2
 80041ec:	4619      	mov	r1, r3
 80041ee:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 80041f2:	f7fc f853 	bl	800029c <__adddf3>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4690      	mov	r8, r2
 80041fc:	4699      	mov	r9, r3
 80041fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004202:	6818      	ldr	r0, [r3, #0]
 8004204:	f7fc f9a8 	bl	8000558 <__aeabi_f2d>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4640      	mov	r0, r8
 800420e:	4649      	mov	r1, r9
 8004210:	f7fc f842 	bl	8000298 <__aeabi_dsub>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8004220:	f7fc f9f2 	bl	8000608 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4620      	mov	r0, r4
 800422a:	4629      	mov	r1, r5
 800422c:	f7fc f836 	bl	800029c <__adddf3>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4690      	mov	r8, r2
 8004236:	4699      	mov	r9, r3
 8004238:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	60ba      	str	r2, [r7, #8]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 800424c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004250:	f7fc f9da 	bl	8000608 <__aeabi_dmul>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004260:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8004264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004268:	f7fc f9ce 	bl	8000608 <__aeabi_dmul>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4620      	mov	r0, r4
 8004272:	4629      	mov	r1, r5
 8004274:	f7fc f812 	bl	800029c <__adddf3>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4692      	mov	sl, r2
 800427e:	469b      	mov	fp, r3
 8004280:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004284:	f04f 0000 	mov.w	r0, #0
 8004288:	e002      	b.n	8004290 <madgwick+0x1684>
 800428a:	bf00      	nop
 800428c:	3fe00000 	.word	0x3fe00000
 8004290:	49ce      	ldr	r1, [pc, #824]	; (80045cc <madgwick+0x19c0>)
 8004292:	f7fc f801 	bl	8000298 <__aeabi_dsub>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80042a2:	f7fb fff9 	bl	8000298 <__aeabi_dsub>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4610      	mov	r0, r2
 80042ac:	4619      	mov	r1, r3
 80042ae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc f9a7 	bl	8000608 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4614      	mov	r4, r2
 80042c0:	461d      	mov	r5, r3
 80042c2:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80042c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042ca:	f7fb ffe5 	bl	8000298 <__aeabi_dsub>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f7fc f993 	bl	8000608 <__aeabi_dmul>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4620      	mov	r0, r4
 80042e8:	4629      	mov	r1, r5
 80042ea:	f7fb ffd7 	bl	800029c <__adddf3>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4614      	mov	r4, r2
 80042f4:	461d      	mov	r5, r3
 80042f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	f7fc f92c 	bl	8000558 <__aeabi_f2d>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4620      	mov	r0, r4
 8004306:	4629      	mov	r1, r5
 8004308:	f7fb ffc6 	bl	8000298 <__aeabi_dsub>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4650      	mov	r0, sl
 8004312:	4659      	mov	r1, fp
 8004314:	f7fc f978 	bl	8000608 <__aeabi_dmul>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4640      	mov	r0, r8
 800431e:	4649      	mov	r1, r9
 8004320:	f7fb ffbc 	bl	800029c <__adddf3>
 8004324:	4602      	mov	r2, r0
 8004326:	460b      	mov	r3, r1
 8004328:	4614      	mov	r4, r2
 800432a:	461d      	mov	r5, r3
 800432c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	603a      	str	r2, [r7, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8004340:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004344:	f7fc f960 	bl	8000608 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4690      	mov	r8, r2
 800434e:	4699      	mov	r9, r3
 8004350:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004354:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8004358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800435c:	f7fc f954 	bl	8000608 <__aeabi_dmul>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4640      	mov	r0, r8
 8004366:	4649      	mov	r1, r9
 8004368:	f7fb ff98 	bl	800029c <__adddf3>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4690      	mov	r8, r2
 8004372:	4699      	mov	r9, r3
 8004374:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004378:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800437c:	f7fb ff8c 	bl	8000298 <__aeabi_dsub>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fc f93a 	bl	8000608 <__aeabi_dmul>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4692      	mov	sl, r2
 800439a:	469b      	mov	fp, r3
 800439c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80043a0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80043a4:	f7fb ff7a 	bl	800029c <__adddf3>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4610      	mov	r0, r2
 80043ae:	4619      	mov	r1, r3
 80043b0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f7fc f926 	bl	8000608 <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4650      	mov	r0, sl
 80043c2:	4659      	mov	r1, fp
 80043c4:	f7fb ff6a 	bl	800029c <__adddf3>
 80043c8:	4602      	mov	r2, r0
 80043ca:	460b      	mov	r3, r1
 80043cc:	4692      	mov	sl, r2
 80043ce:	469b      	mov	fp, r3
 80043d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	f7fc f8bf 	bl	8000558 <__aeabi_f2d>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	4650      	mov	r0, sl
 80043e0:	4659      	mov	r1, fp
 80043e2:	f7fb ff59 	bl	8000298 <__aeabi_dsub>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4640      	mov	r0, r8
 80043ec:	4649      	mov	r1, r9
 80043ee:	f7fc f90b 	bl	8000608 <__aeabi_dmul>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4620      	mov	r0, r4
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7fb ff4f 	bl	800029c <__adddf3>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4690      	mov	r8, r2
 8004404:	4699      	mov	r9, r3
 8004406:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800440a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 800440e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004412:	f7fc f8f9 	bl	8000608 <__aeabi_dmul>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4614      	mov	r4, r2
 800441c:	461d      	mov	r5, r3
 800441e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8004422:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8004426:	f7fb ff39 	bl	800029c <__adddf3>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc f8e5 	bl	8000608 <__aeabi_dmul>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4692      	mov	sl, r2
 8004444:	469b      	mov	fp, r3
 8004446:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	495f      	ldr	r1, [pc, #380]	; (80045cc <madgwick+0x19c0>)
 8004450:	f7fb ff22 	bl	8000298 <__aeabi_dsub>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004460:	f7fb ff1a 	bl	8000298 <__aeabi_dsub>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fc f8c8 	bl	8000608 <__aeabi_dmul>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4650      	mov	r0, sl
 800447e:	4659      	mov	r1, fp
 8004480:	f7fb ff0c 	bl	800029c <__adddf3>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4692      	mov	sl, r2
 800448a:	469b      	mov	fp, r3
 800448c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	f7fc f861 	bl	8000558 <__aeabi_f2d>
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4650      	mov	r0, sl
 800449c:	4659      	mov	r1, fp
 800449e:	f7fb fefb 	bl	8000298 <__aeabi_dsub>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4620      	mov	r0, r4
 80044a8:	4629      	mov	r1, r5
 80044aa:	f7fc f8ad 	bl	8000608 <__aeabi_dmul>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fb feef 	bl	800029c <__adddf3>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	e9c4 2300 	strd	r2, r3, [r4]
	        recipNorm = 1.0 / sqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);  // normalise step magnitude
 80044c6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80044ca:	e9d1 2300 	ldrd	r2, r3, [r1]
 80044ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044d2:	f7fc f899 	bl	8000608 <__aeabi_dmul>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4614      	mov	r4, r2
 80044dc:	461d      	mov	r5, r3
 80044de:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80044e2:	e9d1 2300 	ldrd	r2, r3, [r1]
 80044e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ea:	f7fc f88d 	bl	8000608 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4620      	mov	r0, r4
 80044f4:	4629      	mov	r1, r5
 80044f6:	f7fb fed1 	bl	800029c <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4614      	mov	r4, r2
 8004500:	461d      	mov	r5, r3
 8004502:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004506:	e9d1 2300 	ldrd	r2, r3, [r1]
 800450a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800450e:	f7fc f87b 	bl	8000608 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4620      	mov	r0, r4
 8004518:	4629      	mov	r1, r5
 800451a:	f7fb febf 	bl	800029c <__adddf3>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4614      	mov	r4, r2
 8004524:	461d      	mov	r5, r3
 8004526:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800452a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800452e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004532:	f7fc f869 	bl	8000608 <__aeabi_dmul>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4620      	mov	r0, r4
 800453c:	4629      	mov	r1, r5
 800453e:	f7fb fead 	bl	800029c <__adddf3>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	ec43 2b17 	vmov	d7, r2, r3
 800454a:	eeb0 0a47 	vmov.f32	s0, s14
 800454e:	eef0 0a67 	vmov.f32	s1, s15
 8004552:	f007 f9d9 	bl	800b908 <sqrt>
 8004556:	ec53 2b10 	vmov	r2, r3, d0
 800455a:	f04f 0000 	mov.w	r0, #0
 800455e:	491c      	ldr	r1, [pc, #112]	; (80045d0 <madgwick+0x19c4>)
 8004560:	f7fc f97c 	bl	800085c <__aeabi_ddiv>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        s0 *= recipNorm;
 800456c:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8004570:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004574:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8004578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800457c:	f7fc f844 	bl	8000608 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	e9c4 2300 	strd	r2, r3, [r4]
	        s1 *= recipNorm;
 8004588:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800458c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8004590:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8004594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004598:	f7fc f836 	bl	8000608 <__aeabi_dmul>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	e9c4 2300 	strd	r2, r3, [r4]
	        s2 *= recipNorm;
 80045a4:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80045a8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80045ac:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80045b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045b4:	f7fc f828 	bl	8000608 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	e9c4 2300 	strd	r2, r3, [r4]
	        s3 *= recipNorm;
 80045c0:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80045c4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80045c8:	e004      	b.n	80045d4 <madgwick+0x19c8>
 80045ca:	bf00      	nop
 80045cc:	3fe00000 	.word	0x3fe00000
 80045d0:	3ff00000 	.word	0x3ff00000
 80045d4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80045d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045dc:	f7fc f814 	bl	8000608 <__aeabi_dmul>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	e9c4 2300 	strd	r2, r3, [r4]

	        // Apply feedback step
	        qDot1 -= beta * s0;
 80045e8:	4b9e      	ldr	r3, [pc, #632]	; (8004864 <madgwick+0x1c58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fb ffb3 	bl	8000558 <__aeabi_f2d>
 80045f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	f7fc f805 	bl	8000608 <__aeabi_dmul>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	; 0x180
 8004606:	f7fb fe47 	bl	8000298 <__aeabi_dsub>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
	        qDot2 -= beta * s1;
 8004612:	4b94      	ldr	r3, [pc, #592]	; (8004864 <madgwick+0x1c58>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fb ff9e 	bl	8000558 <__aeabi_f2d>
 800461c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f7fb fff0 	bl	8000608 <__aeabi_dmul>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8004630:	f7fb fe32 	bl	8000298 <__aeabi_dsub>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
	        qDot3 -= beta * s2;
 800463c:	4b89      	ldr	r3, [pc, #548]	; (8004864 <madgwick+0x1c58>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f7fb ff89 	bl	8000558 <__aeabi_f2d>
 8004646:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fb ffdb 	bl	8000608 <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800465a:	f7fb fe1d 	bl	8000298 <__aeabi_dsub>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
	        qDot4 -= beta * s3;
 8004666:	4b7f      	ldr	r3, [pc, #508]	; (8004864 <madgwick+0x1c58>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb ff74 	bl	8000558 <__aeabi_f2d>
 8004670:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb ffc6 	bl	8000608 <__aeabi_dmul>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 8004684:	f7fb fe08 	bl	8000298 <__aeabi_dsub>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168

	        // Integrate rate of change of quaternion to yield quaternion
	        q0 += qDot1 * deltaT;
 8004690:	4b75      	ldr	r3, [pc, #468]	; (8004868 <madgwick+0x1c5c>)
 8004692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004696:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 800469a:	f7fb ffb5 	bl	8000608 <__aeabi_dmul>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80046a6:	f7fb fdf9 	bl	800029c <__adddf3>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	        q1 += qDot2 * deltaT;
 80046b2:	4b6d      	ldr	r3, [pc, #436]	; (8004868 <madgwick+0x1c5c>)
 80046b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046b8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 80046bc:	f7fb ffa4 	bl	8000608 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80046c8:	f7fb fde8 	bl	800029c <__adddf3>
 80046cc:	4602      	mov	r2, r0
 80046ce:	460b      	mov	r3, r1
 80046d0:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
	        q2 += qDot3 * deltaT;
 80046d4:	4b64      	ldr	r3, [pc, #400]	; (8004868 <madgwick+0x1c5c>)
 80046d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046da:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 80046de:	f7fb ff93 	bl	8000608 <__aeabi_dmul>
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80046ea:	f7fb fdd7 	bl	800029c <__adddf3>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	        q3 += qDot4 * deltaT;
 80046f6:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <madgwick+0x1c5c>)
 80046f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046fc:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8004700:	f7fb ff82 	bl	8000608 <__aeabi_dmul>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800470c:	f7fb fdc6 	bl	800029c <__adddf3>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188

	        // Normalise quaternion
	        recipNorm = 1.0 / sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8004718:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 800471c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004720:	f7fb ff72 	bl	8000608 <__aeabi_dmul>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4614      	mov	r4, r2
 800472a:	461d      	mov	r5, r3
 800472c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8004730:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004734:	f7fb ff68 	bl	8000608 <__aeabi_dmul>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fdac 	bl	800029c <__adddf3>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4614      	mov	r4, r2
 800474a:	461d      	mov	r5, r3
 800474c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8004750:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004754:	f7fb ff58 	bl	8000608 <__aeabi_dmul>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	f7fb fd9c 	bl	800029c <__adddf3>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4614      	mov	r4, r2
 800476a:	461d      	mov	r5, r3
 800476c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8004770:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004774:	f7fb ff48 	bl	8000608 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4620      	mov	r0, r4
 800477e:	4629      	mov	r1, r5
 8004780:	f7fb fd8c 	bl	800029c <__adddf3>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	ec43 2b17 	vmov	d7, r2, r3
 800478c:	eeb0 0a47 	vmov.f32	s0, s14
 8004790:	eef0 0a67 	vmov.f32	s1, s15
 8004794:	f007 f8b8 	bl	800b908 <sqrt>
 8004798:	ec53 2b10 	vmov	r2, r3, d0
 800479c:	f04f 0000 	mov.w	r0, #0
 80047a0:	4932      	ldr	r1, [pc, #200]	; (800486c <madgwick+0x1c60>)
 80047a2:	f7fc f85b 	bl	800085c <__aeabi_ddiv>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
	        q0 *= recipNorm;
 80047ae:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80047b2:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80047b6:	f7fb ff27 	bl	8000608 <__aeabi_dmul>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9c7 2368 	strd	r2, r3, [r7, #416]	; 0x1a0
	        q1 *= recipNorm;
 80047c2:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80047c6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80047ca:	f7fb ff1d 	bl	8000608 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
	        q2 *= recipNorm;
 80047d6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80047da:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80047de:	f7fb ff13 	bl	8000608 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
	        q3 *= recipNorm;
 80047ea:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 80047ee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80047f2:	f7fb ff09 	bl	8000608 <__aeabi_dmul>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188

	        q[0] = q0;
 80047fe:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8004802:	f7fc f9f9 	bl	8000bf8 <__aeabi_d2f>
 8004806:	4602      	mov	r2, r0
 8004808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	601a      	str	r2, [r3, #0]
	        q[1] = q1;
 8004810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1d1c      	adds	r4, r3, #4
 8004818:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800481c:	f7fc f9ec 	bl	8000bf8 <__aeabi_d2f>
 8004820:	4603      	mov	r3, r0
 8004822:	6023      	str	r3, [r4, #0]
	        q[2] = q2;
 8004824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f103 0408 	add.w	r4, r3, #8
 800482e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004832:	f7fc f9e1 	bl	8000bf8 <__aeabi_d2f>
 8004836:	4603      	mov	r3, r0
 8004838:	6023      	str	r3, [r4, #0]
	        q[3] = q3;
 800483a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f103 040c 	add.w	r4, r3, #12
 8004844:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004848:	f7fc f9d6 	bl	8000bf8 <__aeabi_d2f>
 800484c:	4603      	mov	r3, r0
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	e002      	b.n	8004858 <madgwick+0x1c4c>
	        if (a_norm == 0.) return;  // handle NaN
 8004852:	bf00      	nop
 8004854:	e000      	b.n	8004858 <madgwick+0x1c4c>
	        if (m_norm == 0.) return;  // handle NaN
 8004856:	bf00      	nop
	        /*print_float(str, gy);
	        print_float(str, gz);
	        print_float(str, mx);
	        print_float(str, my);
	        print_float(str, mz);*/
}
 8004858:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 800485c:	46bd      	mov	sp, r7
 800485e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004862:	bf00      	nop
 8004864:	20000004 	.word	0x20000004
 8004868:	20000210 	.word	0x20000210
 800486c:	3ff00000 	.word	0x3ff00000

08004870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <HAL_MspInit+0x4c>)
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <HAL_MspInit+0x4c>)
 8004880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004884:	6453      	str	r3, [r2, #68]	; 0x44
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_MspInit+0x4c>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_MspInit+0x4c>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <HAL_MspInit+0x4c>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	; 0x40
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_MspInit+0x4c>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800

080048c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_I2C_MspInit+0x84>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12b      	bne.n	800493a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_I2C_MspInit+0x88>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_I2C_MspInit+0x88>)
 80048ec:	f043 0302 	orr.w	r3, r3, #2
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_I2C_MspInit+0x88>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048fe:	23c0      	movs	r3, #192	; 0xc0
 8004900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004902:	2312      	movs	r3, #18
 8004904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800490e:	2304      	movs	r3, #4
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004912:	f107 0314 	add.w	r3, r7, #20
 8004916:	4619      	mov	r1, r3
 8004918:	480c      	ldr	r0, [pc, #48]	; (800494c <HAL_I2C_MspInit+0x8c>)
 800491a:	f000 fb09 	bl	8004f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_I2C_MspInit+0x88>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <HAL_I2C_MspInit+0x88>)
 8004928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800492c:	6413      	str	r3, [r2, #64]	; 0x40
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_I2C_MspInit+0x88>)
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800493a:	bf00      	nop
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40005400 	.word	0x40005400
 8004948:	40023800 	.word	0x40023800
 800494c:	40020400 	.word	0x40020400

08004950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_UART_MspInit+0x84>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d12c      	bne.n	80049cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	4b18      	ldr	r3, [pc, #96]	; (80049d8 <HAL_UART_MspInit+0x88>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_UART_MspInit+0x88>)
 800497c:	f043 0310 	orr.w	r3, r3, #16
 8004980:	6453      	str	r3, [r2, #68]	; 0x44
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_UART_MspInit+0x88>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <HAL_UART_MspInit+0x88>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a10      	ldr	r2, [pc, #64]	; (80049d8 <HAL_UART_MspInit+0x88>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <HAL_UART_MspInit+0x88>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80049aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80049ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b0:	2302      	movs	r3, #2
 80049b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b8:	2303      	movs	r3, #3
 80049ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80049bc:	2307      	movs	r3, #7
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	4619      	mov	r1, r3
 80049c6:	4805      	ldr	r0, [pc, #20]	; (80049dc <HAL_UART_MspInit+0x8c>)
 80049c8:	f000 fab2 	bl	8004f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80049cc:	bf00      	nop
 80049ce:	3728      	adds	r7, #40	; 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40011000 	.word	0x40011000
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40020000 	.word	0x40020000

080049e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <NMI_Handler+0x4>

080049e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049ea:	e7fe      	b.n	80049ea <HardFault_Handler+0x4>

080049ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <MemManage_Handler+0x4>

080049f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049f6:	e7fe      	b.n	80049f6 <BusFault_Handler+0x4>

080049f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049fc:	e7fe      	b.n	80049fc <UsageFault_Handler+0x4>

080049fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049fe:	b480      	push	{r7}
 8004a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a2c:	f000 f956 	bl	8004cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
	return 1;
 8004a38:	2301      	movs	r3, #1
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <_kill>:

int _kill(int pid, int sig)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a4e:	f002 fb01 	bl	8007054 <__errno>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2216      	movs	r2, #22
 8004a56:	601a      	str	r2, [r3, #0]
	return -1;
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_exit>:

void _exit (int status)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff ffe7 	bl	8004a44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a76:	e7fe      	b.n	8004a76 <_exit+0x12>

08004a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e00a      	b.n	8004aa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a8a:	f3af 8000 	nop.w
 8004a8e:	4601      	mov	r1, r0
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	60ba      	str	r2, [r7, #8]
 8004a96:	b2ca      	uxtb	r2, r1
 8004a98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	dbf0      	blt.n	8004a8a <_read+0x12>
	}

return len;
 8004aa8:	687b      	ldr	r3, [r7, #4]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b086      	sub	sp, #24
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e009      	b.n	8004ad8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	60ba      	str	r2, [r7, #8]
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	dbf1      	blt.n	8004ac4 <_write+0x12>
	}
	return len;
 8004ae0:	687b      	ldr	r3, [r7, #4]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <_close>:

int _close(int file)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
	return -1;
 8004af2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b12:	605a      	str	r2, [r3, #4]
	return 0;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_isatty>:

int _isatty(int file)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
	return 1;
 8004b2a:	2301      	movs	r3, #1
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	return 0;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b5c:	4a14      	ldr	r2, [pc, #80]	; (8004bb0 <_sbrk+0x5c>)
 8004b5e:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <_sbrk+0x60>)
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b68:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <_sbrk+0x64>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b70:	4b11      	ldr	r3, [pc, #68]	; (8004bb8 <_sbrk+0x64>)
 8004b72:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <_sbrk+0x68>)
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b76:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <_sbrk+0x64>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d207      	bcs.n	8004b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b84:	f002 fa66 	bl	8007054 <__errno>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b92:	e009      	b.n	8004ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <_sbrk+0x64>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <_sbrk+0x64>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <_sbrk+0x64>)
 8004ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20020000 	.word	0x20020000
 8004bb4:	00000400 	.word	0x00000400
 8004bb8:	20000220 	.word	0x20000220
 8004bbc:	20000398 	.word	0x20000398

08004bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <SystemInit+0x20>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	4a05      	ldr	r2, [pc, #20]	; (8004be0 <SystemInit+0x20>)
 8004bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000ed00 	.word	0xe000ed00

08004be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004be4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004be8:	480d      	ldr	r0, [pc, #52]	; (8004c20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bea:	490e      	ldr	r1, [pc, #56]	; (8004c24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bec:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bf0:	e002      	b.n	8004bf8 <LoopCopyDataInit>

08004bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bf6:	3304      	adds	r3, #4

08004bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bfc:	d3f9      	bcc.n	8004bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bfe:	4a0b      	ldr	r2, [pc, #44]	; (8004c2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004c00:	4c0b      	ldr	r4, [pc, #44]	; (8004c30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c04:	e001      	b.n	8004c0a <LoopFillZerobss>

08004c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c08:	3204      	adds	r2, #4

08004c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c0c:	d3fb      	bcc.n	8004c06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c0e:	f7ff ffd7 	bl	8004bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c12:	f002 fa25 	bl	8007060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c16:	f7fc fa09 	bl	800102c <main>
  bx  lr    
 8004c1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c24:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004c28:	0800c72c 	.word	0x0800c72c
  ldr r2, =_sbss
 8004c2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004c30:	20000398 	.word	0x20000398

08004c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c34:	e7fe      	b.n	8004c34 <ADC_IRQHandler>
	...

08004c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_Init+0x40>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <HAL_Init+0x40>)
 8004c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_Init+0x40>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <HAL_Init+0x40>)
 8004c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_Init+0x40>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_Init+0x40>)
 8004c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c60:	2003      	movs	r0, #3
 8004c62:	f000 f931 	bl	8004ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c66:	200f      	movs	r0, #15
 8004c68:	f000 f808 	bl	8004c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c6c:	f7ff fe00 	bl	8004870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40023c00 	.word	0x40023c00

08004c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <HAL_InitTick+0x54>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_InitTick+0x58>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f93b 	bl	8004f16 <HAL_SYSTICK_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e00e      	b.n	8004cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b0f      	cmp	r3, #15
 8004cae:	d80a      	bhi.n	8004cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb8:	f000 f911 	bl	8004ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cbc:	4a06      	ldr	r2, [pc, #24]	; (8004cd8 <HAL_InitTick+0x5c>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000008 	.word	0x20000008
 8004cd4:	20000010 	.word	0x20000010
 8004cd8:	2000000c 	.word	0x2000000c

08004cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ce0:	4b06      	ldr	r3, [pc, #24]	; (8004cfc <HAL_IncTick+0x20>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <HAL_IncTick+0x24>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4413      	add	r3, r2
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <HAL_IncTick+0x24>)
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000010 	.word	0x20000010
 8004d00:	20000384 	.word	0x20000384

08004d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return uwTick;
 8004d08:	4b03      	ldr	r3, [pc, #12]	; (8004d18 <HAL_GetTick+0x14>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000384 	.word	0x20000384

08004d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d24:	f7ff ffee 	bl	8004d04 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d34:	d005      	beq.n	8004d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d36:	4b0a      	ldr	r3, [pc, #40]	; (8004d60 <HAL_Delay+0x44>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004d42:	bf00      	nop
 8004d44:	f7ff ffde 	bl	8004d04 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d8f7      	bhi.n	8004d44 <HAL_Delay+0x28>
  {
  }
}
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000010 	.word	0x20000010

08004d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d74:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d80:	4013      	ands	r3, r2
 8004d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d96:	4a04      	ldr	r2, [pc, #16]	; (8004da8 <__NVIC_SetPriorityGrouping+0x44>)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	60d3      	str	r3, [r2, #12]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	e000ed00 	.word	0xe000ed00

08004dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 0307 	and.w	r3, r3, #7
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	e000ed00 	.word	0xe000ed00

08004dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	4603      	mov	r3, r0
 8004dd0:	6039      	str	r1, [r7, #0]
 8004dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	db0a      	blt.n	8004df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	490c      	ldr	r1, [pc, #48]	; (8004e14 <__NVIC_SetPriority+0x4c>)
 8004de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004de6:	0112      	lsls	r2, r2, #4
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	440b      	add	r3, r1
 8004dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004df0:	e00a      	b.n	8004e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	4908      	ldr	r1, [pc, #32]	; (8004e18 <__NVIC_SetPriority+0x50>)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	0112      	lsls	r2, r2, #4
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	440b      	add	r3, r1
 8004e06:	761a      	strb	r2, [r3, #24]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	e000e100 	.word	0xe000e100
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b089      	sub	sp, #36	; 0x24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f1c3 0307 	rsb	r3, r3, #7
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	bf28      	it	cs
 8004e3a:	2304      	movcs	r3, #4
 8004e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	3304      	adds	r3, #4
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d902      	bls.n	8004e4c <NVIC_EncodePriority+0x30>
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3b03      	subs	r3, #3
 8004e4a:	e000      	b.n	8004e4e <NVIC_EncodePriority+0x32>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	401a      	ands	r2, r3
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	43d9      	mvns	r1, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e74:	4313      	orrs	r3, r2
         );
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3724      	adds	r7, #36	; 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e94:	d301      	bcc.n	8004e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00f      	b.n	8004eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <SysTick_Config+0x40>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ea2:	210f      	movs	r1, #15
 8004ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ea8:	f7ff ff8e 	bl	8004dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SysTick_Config+0x40>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004eb2:	4b04      	ldr	r3, [pc, #16]	; (8004ec4 <SysTick_Config+0x40>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000e010 	.word	0xe000e010

08004ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff47 	bl	8004d64 <__NVIC_SetPriorityGrouping>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b086      	sub	sp, #24
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ef0:	f7ff ff5c 	bl	8004dac <__NVIC_GetPriorityGrouping>
 8004ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	6978      	ldr	r0, [r7, #20]
 8004efc:	f7ff ff8e 	bl	8004e1c <NVIC_EncodePriority>
 8004f00:	4602      	mov	r2, r0
 8004f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f06:	4611      	mov	r1, r2
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ff5d 	bl	8004dc8 <__NVIC_SetPriority>
}
 8004f0e:	bf00      	nop
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff ffb0 	bl	8004e84 <SysTick_Config>
 8004f24:	4603      	mov	r3, r0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	; 0x24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	e159      	b.n	8005200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	f040 8148 	bne.w	80051fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d005      	beq.n	8004f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d130      	bne.n	8004fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f92:	43db      	mvns	r3, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4013      	ands	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fb8:	2201      	movs	r2, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	091b      	lsrs	r3, r3, #4
 8004fce:	f003 0201 	and.w	r2, r3, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 0303 	and.w	r3, r3, #3
 8004fec:	2b03      	cmp	r3, #3
 8004fee:	d017      	beq.n	8005020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0303 	and.w	r3, r3, #3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d123      	bne.n	8005074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	08da      	lsrs	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3208      	adds	r2, #8
 8005034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	220f      	movs	r2, #15
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	fa02 f303 	lsl.w	r3, r2, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4313      	orrs	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	08da      	lsrs	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3208      	adds	r2, #8
 800506e:	69b9      	ldr	r1, [r7, #24]
 8005070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	2203      	movs	r2, #3
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0203 	and.w	r2, r3, #3
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	fa02 f303 	lsl.w	r3, r2, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80a2 	beq.w	80051fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	4b57      	ldr	r3, [pc, #348]	; (8005218 <HAL_GPIO_Init+0x2e8>)
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	4a56      	ldr	r2, [pc, #344]	; (8005218 <HAL_GPIO_Init+0x2e8>)
 80050c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c4:	6453      	str	r3, [r2, #68]	; 0x44
 80050c6:	4b54      	ldr	r3, [pc, #336]	; (8005218 <HAL_GPIO_Init+0x2e8>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d2:	4a52      	ldr	r2, [pc, #328]	; (800521c <HAL_GPIO_Init+0x2ec>)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	3302      	adds	r3, #2
 80050da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	220f      	movs	r2, #15
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	4013      	ands	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a49      	ldr	r2, [pc, #292]	; (8005220 <HAL_GPIO_Init+0x2f0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d019      	beq.n	8005132 <HAL_GPIO_Init+0x202>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a48      	ldr	r2, [pc, #288]	; (8005224 <HAL_GPIO_Init+0x2f4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d013      	beq.n	800512e <HAL_GPIO_Init+0x1fe>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a47      	ldr	r2, [pc, #284]	; (8005228 <HAL_GPIO_Init+0x2f8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00d      	beq.n	800512a <HAL_GPIO_Init+0x1fa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a46      	ldr	r2, [pc, #280]	; (800522c <HAL_GPIO_Init+0x2fc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <HAL_GPIO_Init+0x1f6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a45      	ldr	r2, [pc, #276]	; (8005230 <HAL_GPIO_Init+0x300>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d101      	bne.n	8005122 <HAL_GPIO_Init+0x1f2>
 800511e:	2304      	movs	r3, #4
 8005120:	e008      	b.n	8005134 <HAL_GPIO_Init+0x204>
 8005122:	2307      	movs	r3, #7
 8005124:	e006      	b.n	8005134 <HAL_GPIO_Init+0x204>
 8005126:	2303      	movs	r3, #3
 8005128:	e004      	b.n	8005134 <HAL_GPIO_Init+0x204>
 800512a:	2302      	movs	r3, #2
 800512c:	e002      	b.n	8005134 <HAL_GPIO_Init+0x204>
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_GPIO_Init+0x204>
 8005132:	2300      	movs	r3, #0
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	f002 0203 	and.w	r2, r2, #3
 800513a:	0092      	lsls	r2, r2, #2
 800513c:	4093      	lsls	r3, r2
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005144:	4935      	ldr	r1, [pc, #212]	; (800521c <HAL_GPIO_Init+0x2ec>)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	089b      	lsrs	r3, r3, #2
 800514a:	3302      	adds	r3, #2
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005152:	4b38      	ldr	r3, [pc, #224]	; (8005234 <HAL_GPIO_Init+0x304>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005176:	4a2f      	ldr	r2, [pc, #188]	; (8005234 <HAL_GPIO_Init+0x304>)
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800517c:	4b2d      	ldr	r3, [pc, #180]	; (8005234 <HAL_GPIO_Init+0x304>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	43db      	mvns	r3, r3
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4013      	ands	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a0:	4a24      	ldr	r2, [pc, #144]	; (8005234 <HAL_GPIO_Init+0x304>)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051a6:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_GPIO_Init+0x304>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ca:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <HAL_GPIO_Init+0x304>)
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051d0:	4b18      	ldr	r3, [pc, #96]	; (8005234 <HAL_GPIO_Init+0x304>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	43db      	mvns	r3, r3
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	4013      	ands	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051f4:	4a0f      	ldr	r2, [pc, #60]	; (8005234 <HAL_GPIO_Init+0x304>)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b0f      	cmp	r3, #15
 8005204:	f67f aea2 	bls.w	8004f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	3724      	adds	r7, #36	; 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	40013800 	.word	0x40013800
 8005220:	40020000 	.word	0x40020000
 8005224:	40020400 	.word	0x40020400
 8005228:	40020800 	.word	0x40020800
 800522c:	40020c00 	.word	0x40020c00
 8005230:	40021000 	.word	0x40021000
 8005234:	40013c00 	.word	0x40013c00

08005238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
 8005244:	4613      	mov	r3, r2
 8005246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005248:	787b      	ldrb	r3, [r7, #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800524e:	887a      	ldrh	r2, [r7, #2]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005254:	e003      	b.n	800525e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	041a      	lsls	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	619a      	str	r2, [r3, #24]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e12b      	b.n	80054d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff fb14 	bl	80048c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d0:	f001 fb82 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4a81      	ldr	r2, [pc, #516]	; (80054e0 <HAL_I2C_Init+0x274>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d807      	bhi.n	80052f0 <HAL_I2C_Init+0x84>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a80      	ldr	r2, [pc, #512]	; (80054e4 <HAL_I2C_Init+0x278>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	bf94      	ite	ls
 80052e8:	2301      	movls	r3, #1
 80052ea:	2300      	movhi	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e006      	b.n	80052fe <HAL_I2C_Init+0x92>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a7d      	ldr	r2, [pc, #500]	; (80054e8 <HAL_I2C_Init+0x27c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bf94      	ite	ls
 80052f8:	2301      	movls	r3, #1
 80052fa:	2300      	movhi	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0e7      	b.n	80054d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a78      	ldr	r2, [pc, #480]	; (80054ec <HAL_I2C_Init+0x280>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0c9b      	lsrs	r3, r3, #18
 8005310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a6a      	ldr	r2, [pc, #424]	; (80054e0 <HAL_I2C_Init+0x274>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <HAL_I2C_Init+0xd4>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3301      	adds	r3, #1
 800533e:	e009      	b.n	8005354 <HAL_I2C_Init+0xe8>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <HAL_I2C_Init+0x284>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	099b      	lsrs	r3, r3, #6
 8005352:	3301      	adds	r3, #1
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	495c      	ldr	r1, [pc, #368]	; (80054e0 <HAL_I2C_Init+0x274>)
 8005370:	428b      	cmp	r3, r1
 8005372:	d819      	bhi.n	80053a8 <HAL_I2C_Init+0x13c>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1e59      	subs	r1, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005388:	400b      	ands	r3, r1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_I2C_Init+0x138>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1e59      	subs	r1, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fbb1 f3f3 	udiv	r3, r1, r3
 800539c:	3301      	adds	r3, #1
 800539e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a2:	e051      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 80053a4:	2304      	movs	r3, #4
 80053a6:	e04f      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d111      	bne.n	80053d4 <HAL_I2C_Init+0x168>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1e58      	subs	r0, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	440b      	add	r3, r1
 80053be:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e012      	b.n	80053fa <HAL_I2C_Init+0x18e>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1e58      	subs	r0, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	0099      	lsls	r1, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ea:	3301      	adds	r3, #1
 80053ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Init+0x196>
 80053fe:	2301      	movs	r3, #1
 8005400:	e022      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10e      	bne.n	8005428 <HAL_I2C_Init+0x1bc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1e58      	subs	r0, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	440b      	add	r3, r1
 8005418:	fbb0 f3f3 	udiv	r3, r0, r3
 800541c:	3301      	adds	r3, #1
 800541e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	e00f      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1e58      	subs	r0, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	0099      	lsls	r1, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	fbb0 f3f3 	udiv	r3, r0, r3
 800543e:	3301      	adds	r3, #1
 8005440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	6809      	ldr	r1, [r1, #0]
 800544c:	4313      	orrs	r3, r2
 800544e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6911      	ldr	r1, [r2, #16]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	430b      	orrs	r3, r1
 800548a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	000186a0 	.word	0x000186a0
 80054e4:	001e847f 	.word	0x001e847f
 80054e8:	003d08ff 	.word	0x003d08ff
 80054ec:	431bde83 	.word	0x431bde83
 80054f0:	10624dd3 	.word	0x10624dd3

080054f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	461a      	mov	r2, r3
 8005500:	460b      	mov	r3, r1
 8005502:	817b      	strh	r3, [r7, #10]
 8005504:	4613      	mov	r3, r2
 8005506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005508:	f7ff fbfc 	bl	8004d04 <HAL_GetTick>
 800550c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	f040 80e0 	bne.w	80056dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2319      	movs	r3, #25
 8005522:	2201      	movs	r2, #1
 8005524:	4970      	ldr	r1, [pc, #448]	; (80056e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fc58 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
 8005534:	e0d3      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_I2C_Master_Transmit+0x50>
 8005540:	2302      	movs	r3, #2
 8005542:	e0cc      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d007      	beq.n	800556a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2221      	movs	r2, #33	; 0x21
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2210      	movs	r2, #16
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	893a      	ldrh	r2, [r7, #8]
 800559a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a50      	ldr	r2, [pc, #320]	; (80056ec <HAL_I2C_Master_Transmit+0x1f8>)
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055ac:	8979      	ldrh	r1, [r7, #10]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fac2 	bl	8005b3c <I2C_MasterRequestWrite>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e08d      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055d8:	e066      	b.n	80056a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	6a39      	ldr	r1, [r7, #32]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fcd2 	bl	8005f88 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d107      	bne.n	8005602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e06b      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11b      	bne.n	800567c <HAL_I2C_Master_Transmit+0x188>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	6a39      	ldr	r1, [r7, #32]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fcc2 	bl	800600a <I2C_WaitOnBTFFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005690:	2b04      	cmp	r3, #4
 8005692:	d107      	bne.n	80056a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e01a      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d194      	bne.n	80055da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	00100002 	.word	0x00100002
 80056ec:	ffff0000 	.word	0xffff0000

080056f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08c      	sub	sp, #48	; 0x30
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	460b      	mov	r3, r1
 80056fe:	817b      	strh	r3, [r7, #10]
 8005700:	4613      	mov	r3, r2
 8005702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005704:	f7ff fafe 	bl	8004d04 <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b20      	cmp	r3, #32
 8005714:	f040 820b 	bne.w	8005b2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	2319      	movs	r3, #25
 800571e:	2201      	movs	r2, #1
 8005720:	497c      	ldr	r1, [pc, #496]	; (8005914 <HAL_I2C_Master_Receive+0x224>)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fb5a 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
 8005730:	e1fe      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <HAL_I2C_Master_Receive+0x50>
 800573c:	2302      	movs	r3, #2
 800573e:	e1f7      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b01      	cmp	r3, #1
 8005754:	d007      	beq.n	8005766 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2222      	movs	r2, #34	; 0x22
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2210      	movs	r2, #16
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	893a      	ldrh	r2, [r7, #8]
 8005796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a5c      	ldr	r2, [pc, #368]	; (8005918 <HAL_I2C_Master_Receive+0x228>)
 80057a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057a8:	8979      	ldrh	r1, [r7, #10]
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fa46 	bl	8005c40 <I2C_MasterRequestRead>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e1b8      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d113      	bne.n	80057ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c6:	2300      	movs	r3, #0
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e18c      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d11b      	bne.n	800582e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	e16c      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005832:	2b02      	cmp	r3, #2
 8005834:	d11b      	bne.n	800586e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005844:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	61bb      	str	r3, [r7, #24]
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	e14c      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005894:	e138      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589a:	2b03      	cmp	r3, #3
 800589c:	f200 80f1 	bhi.w	8005a82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d123      	bne.n	80058f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fbed 	bl	800608c <I2C_WaitOnRXNEFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e139      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d8:	3b01      	subs	r3, #1
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	3b01      	subs	r3, #1
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ee:	e10b      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d14e      	bne.n	8005996 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2200      	movs	r2, #0
 8005900:	4906      	ldr	r1, [pc, #24]	; (800591c <HAL_I2C_Master_Receive+0x22c>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fa6a 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e10e      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
 8005912:	bf00      	nop
 8005914:	00100002 	.word	0x00100002
 8005918:	ffff0000 	.word	0xffff0000
 800591c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005994:	e0b8      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2200      	movs	r2, #0
 800599e:	4966      	ldr	r1, [pc, #408]	; (8005b38 <HAL_I2C_Master_Receive+0x448>)
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 fa1b 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0bf      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	3b01      	subs	r3, #1
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	2200      	movs	r2, #0
 80059fa:	494f      	ldr	r1, [pc, #316]	; (8005b38 <HAL_I2C_Master_Receive+0x448>)
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f9ed 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e091      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a80:	e042      	b.n	8005b08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fb00 	bl	800608c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e04c      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	691a      	ldr	r2, [r3, #16]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d118      	bne.n	8005b08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	1c5a      	adds	r2, r3, #1
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f aec2 	bne.w	8005896 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e000      	b.n	8005b30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b2e:	2302      	movs	r3, #2
  }
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3728      	adds	r7, #40	; 0x28
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	00010004 	.word	0x00010004

08005b3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d006      	beq.n	8005b66 <I2C_MasterRequestWrite+0x2a>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d003      	beq.n	8005b66 <I2C_MasterRequestWrite+0x2a>
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b64:	d108      	bne.n	8005b78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	e00b      	b.n	8005b90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	2b12      	cmp	r3, #18
 8005b7e:	d107      	bne.n	8005b90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f91d 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d103      	bne.n	8005bc0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e035      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bcc:	d108      	bne.n	8005be0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005bce:	897b      	ldrh	r3, [r7, #10]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	e01b      	b.n	8005c18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005be0:	897b      	ldrh	r3, [r7, #10]
 8005be2:	11db      	asrs	r3, r3, #7
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0306 	and.w	r3, r3, #6
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f063 030f 	orn	r3, r3, #15
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	490e      	ldr	r1, [pc, #56]	; (8005c38 <I2C_MasterRequestWrite+0xfc>)
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f943 	bl	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e010      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4907      	ldr	r1, [pc, #28]	; (8005c3c <I2C_MasterRequestWrite+0x100>)
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f933 	bl	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00010008 	.word	0x00010008
 8005c3c:	00010002 	.word	0x00010002

08005c40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d006      	beq.n	8005c7a <I2C_MasterRequestRead+0x3a>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d003      	beq.n	8005c7a <I2C_MasterRequestRead+0x3a>
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c78:	d108      	bne.n	8005c8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e00b      	b.n	8005ca4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b11      	cmp	r3, #17
 8005c92:	d107      	bne.n	8005ca4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f893 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00d      	beq.n	8005cd8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cca:	d103      	bne.n	8005cd4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e079      	b.n	8005dcc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ce0:	d108      	bne.n	8005cf4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ce2:	897b      	ldrh	r3, [r7, #10]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	611a      	str	r2, [r3, #16]
 8005cf2:	e05f      	b.n	8005db4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005cf4:	897b      	ldrh	r3, [r7, #10]
 8005cf6:	11db      	asrs	r3, r3, #7
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0306 	and.w	r3, r3, #6
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f063 030f 	orn	r3, r3, #15
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4930      	ldr	r1, [pc, #192]	; (8005dd4 <I2C_MasterRequestRead+0x194>)
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f000 f8b9 	bl	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e054      	b.n	8005dcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	4929      	ldr	r1, [pc, #164]	; (8005dd8 <I2C_MasterRequestRead+0x198>)
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 f8a9 	bl	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e044      	b.n	8005dcc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d66:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f831 	bl	8005ddc <I2C_WaitOnFlagUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00d      	beq.n	8005d9c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8e:	d103      	bne.n	8005d98 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e017      	b.n	8005dcc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005d9c:	897b      	ldrh	r3, [r7, #10]
 8005d9e:	11db      	asrs	r3, r3, #7
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f003 0306 	and.w	r3, r3, #6
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	f063 030e 	orn	r3, r3, #14
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	4907      	ldr	r1, [pc, #28]	; (8005dd8 <I2C_MasterRequestRead+0x198>)
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f865 	bl	8005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	00010008 	.word	0x00010008
 8005dd8:	00010002 	.word	0x00010002

08005ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dec:	e025      	b.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df4:	d021      	beq.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7fe ff85 	bl	8004d04 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d302      	bcc.n	8005e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d116      	bne.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e023      	b.n	8005e82 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	0c1b      	lsrs	r3, r3, #16
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d10d      	bne.n	8005e60 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	43da      	mvns	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	e00c      	b.n	8005e7a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	43da      	mvns	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d0b6      	beq.n	8005dee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e98:	e051      	b.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea8:	d123      	bne.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f043 0204 	orr.w	r2, r3, #4
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e046      	b.n	8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef8:	d021      	beq.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efa:	f7fe ff03 	bl	8004d04 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d116      	bne.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0220 	orr.w	r2, r3, #32
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e020      	b.n	8005f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	0c1b      	lsrs	r3, r3, #16
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d10c      	bne.n	8005f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	43da      	mvns	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	e00b      	b.n	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	43da      	mvns	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf14      	ite	ne
 8005f74:	2301      	movne	r3, #1
 8005f76:	2300      	moveq	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d18d      	bne.n	8005e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f94:	e02d      	b.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f8ce 	bl	8006138 <I2C_IsAcknowledgeFailed>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e02d      	b.n	8006002 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fac:	d021      	beq.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fe fea9 	bl	8004d04 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d116      	bne.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2220      	movs	r2, #32
 8005fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fde:	f043 0220 	orr.w	r2, r3, #32
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e007      	b.n	8006002 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d1ca      	bne.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	60f8      	str	r0, [r7, #12]
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006016:	e02d      	b.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f88d 	bl	8006138 <I2C_IsAcknowledgeFailed>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e02d      	b.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d021      	beq.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006030:	f7fe fe68 	bl	8004d04 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	429a      	cmp	r2, r3
 800603e:	d302      	bcc.n	8006046 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d116      	bne.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	f043 0220 	orr.w	r2, r3, #32
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e007      	b.n	8006084 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d1ca      	bne.n	8006018 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006098:	e042      	b.n	8006120 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0310 	and.w	r3, r3, #16
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d119      	bne.n	80060dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0210 	mvn.w	r2, #16
 80060b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e029      	b.n	8006130 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060dc:	f7fe fe12 	bl	8004d04 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d302      	bcc.n	80060f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d116      	bne.n	8006120 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	f043 0220 	orr.w	r2, r3, #32
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e007      	b.n	8006130 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d1b5      	bne.n	800609a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800614e:	d11b      	bne.n	8006188 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006158:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	f043 0204 	orr.w	r2, r3, #4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e000      	b.n	800618a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
	...

08006198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e264      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d075      	beq.n	80062a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061b6:	4ba3      	ldr	r3, [pc, #652]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d00c      	beq.n	80061dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061c2:	4ba0      	ldr	r3, [pc, #640]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d112      	bne.n	80061f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ce:	4b9d      	ldr	r3, [pc, #628]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061da:	d10b      	bne.n	80061f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061dc:	4b99      	ldr	r3, [pc, #612]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d05b      	beq.n	80062a0 <HAL_RCC_OscConfig+0x108>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d157      	bne.n	80062a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e23f      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fc:	d106      	bne.n	800620c <HAL_RCC_OscConfig+0x74>
 80061fe:	4b91      	ldr	r3, [pc, #580]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a90      	ldr	r2, [pc, #576]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	e01d      	b.n	8006248 <HAL_RCC_OscConfig+0xb0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006214:	d10c      	bne.n	8006230 <HAL_RCC_OscConfig+0x98>
 8006216:	4b8b      	ldr	r3, [pc, #556]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a8a      	ldr	r2, [pc, #552]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 800621c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	4b88      	ldr	r3, [pc, #544]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a87      	ldr	r2, [pc, #540]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e00b      	b.n	8006248 <HAL_RCC_OscConfig+0xb0>
 8006230:	4b84      	ldr	r3, [pc, #528]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a83      	ldr	r2, [pc, #524]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4b81      	ldr	r3, [pc, #516]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a80      	ldr	r2, [pc, #512]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006250:	f7fe fd58 	bl	8004d04 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006258:	f7fe fd54 	bl	8004d04 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b64      	cmp	r3, #100	; 0x64
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e204      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800626a:	4b76      	ldr	r3, [pc, #472]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d0f0      	beq.n	8006258 <HAL_RCC_OscConfig+0xc0>
 8006276:	e014      	b.n	80062a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006278:	f7fe fd44 	bl	8004d04 <HAL_GetTick>
 800627c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006280:	f7fe fd40 	bl	8004d04 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b64      	cmp	r3, #100	; 0x64
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e1f0      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006292:	4b6c      	ldr	r3, [pc, #432]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f0      	bne.n	8006280 <HAL_RCC_OscConfig+0xe8>
 800629e:	e000      	b.n	80062a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d063      	beq.n	8006376 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ae:	4b65      	ldr	r3, [pc, #404]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 030c 	and.w	r3, r3, #12
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00b      	beq.n	80062d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ba:	4b62      	ldr	r3, [pc, #392]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d11c      	bne.n	8006300 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062c6:	4b5f      	ldr	r3, [pc, #380]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d116      	bne.n	8006300 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062d2:	4b5c      	ldr	r3, [pc, #368]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0302 	and.w	r3, r3, #2
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_RCC_OscConfig+0x152>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d001      	beq.n	80062ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e1c4      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ea:	4b56      	ldr	r3, [pc, #344]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	4952      	ldr	r1, [pc, #328]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fe:	e03a      	b.n	8006376 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006308:	4b4f      	ldr	r3, [pc, #316]	; (8006448 <HAL_RCC_OscConfig+0x2b0>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fe fcf9 	bl	8004d04 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006316:	f7fe fcf5 	bl	8004d04 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e1a5      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006328:	4b46      	ldr	r3, [pc, #280]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006334:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4940      	ldr	r1, [pc, #256]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006344:	4313      	orrs	r3, r2
 8006346:	600b      	str	r3, [r1, #0]
 8006348:	e015      	b.n	8006376 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800634a:	4b3f      	ldr	r3, [pc, #252]	; (8006448 <HAL_RCC_OscConfig+0x2b0>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fe fcd8 	bl	8004d04 <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006358:	f7fe fcd4 	bl	8004d04 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e184      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b00      	cmp	r3, #0
 8006380:	d030      	beq.n	80063e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d016      	beq.n	80063b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800638a:	4b30      	ldr	r3, [pc, #192]	; (800644c <HAL_RCC_OscConfig+0x2b4>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006390:	f7fe fcb8 	bl	8004d04 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006398:	f7fe fcb4 	bl	8004d04 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e164      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063aa:	4b26      	ldr	r3, [pc, #152]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80063ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d0f0      	beq.n	8006398 <HAL_RCC_OscConfig+0x200>
 80063b6:	e015      	b.n	80063e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063b8:	4b24      	ldr	r3, [pc, #144]	; (800644c <HAL_RCC_OscConfig+0x2b4>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063be:	f7fe fca1 	bl	8004d04 <HAL_GetTick>
 80063c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c6:	f7fe fc9d 	bl	8004d04 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e14d      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063d8:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80063da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d1f0      	bne.n	80063c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80a0 	beq.w	8006532 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10f      	bne.n	8006422 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	4b0f      	ldr	r3, [pc, #60]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	4a0e      	ldr	r2, [pc, #56]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006410:	6413      	str	r3, [r2, #64]	; 0x40
 8006412:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <HAL_RCC_OscConfig+0x2ac>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800641a:	60bb      	str	r3, [r7, #8]
 800641c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800641e:	2301      	movs	r3, #1
 8006420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <HAL_RCC_OscConfig+0x2b8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642a:	2b00      	cmp	r3, #0
 800642c:	d121      	bne.n	8006472 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCC_OscConfig+0x2b8>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a07      	ldr	r2, [pc, #28]	; (8006450 <HAL_RCC_OscConfig+0x2b8>)
 8006434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800643a:	f7fe fc63 	bl	8004d04 <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006440:	e011      	b.n	8006466 <HAL_RCC_OscConfig+0x2ce>
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	42470000 	.word	0x42470000
 800644c:	42470e80 	.word	0x42470e80
 8006450:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006454:	f7fe fc56 	bl	8004d04 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e106      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006466:	4b85      	ldr	r3, [pc, #532]	; (800667c <HAL_RCC_OscConfig+0x4e4>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d106      	bne.n	8006488 <HAL_RCC_OscConfig+0x2f0>
 800647a:	4b81      	ldr	r3, [pc, #516]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a80      	ldr	r2, [pc, #512]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	e01c      	b.n	80064c2 <HAL_RCC_OscConfig+0x32a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b05      	cmp	r3, #5
 800648e:	d10c      	bne.n	80064aa <HAL_RCC_OscConfig+0x312>
 8006490:	4b7b      	ldr	r3, [pc, #492]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006494:	4a7a      	ldr	r2, [pc, #488]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006496:	f043 0304 	orr.w	r3, r3, #4
 800649a:	6713      	str	r3, [r2, #112]	; 0x70
 800649c:	4b78      	ldr	r3, [pc, #480]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	4a77      	ldr	r2, [pc, #476]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	6713      	str	r3, [r2, #112]	; 0x70
 80064a8:	e00b      	b.n	80064c2 <HAL_RCC_OscConfig+0x32a>
 80064aa:	4b75      	ldr	r3, [pc, #468]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80064ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ae:	4a74      	ldr	r2, [pc, #464]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	6713      	str	r3, [r2, #112]	; 0x70
 80064b6:	4b72      	ldr	r3, [pc, #456]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	4a71      	ldr	r2, [pc, #452]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80064bc:	f023 0304 	bic.w	r3, r3, #4
 80064c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d015      	beq.n	80064f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ca:	f7fe fc1b 	bl	8004d04 <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d0:	e00a      	b.n	80064e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d2:	f7fe fc17 	bl	8004d04 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e0c5      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e8:	4b65      	ldr	r3, [pc, #404]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ee      	beq.n	80064d2 <HAL_RCC_OscConfig+0x33a>
 80064f4:	e014      	b.n	8006520 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f6:	f7fe fc05 	bl	8004d04 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fe fc01 	bl	8004d04 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0af      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006514:	4b5a      	ldr	r3, [pc, #360]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1ee      	bne.n	80064fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d105      	bne.n	8006532 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006526:	4b56      	ldr	r3, [pc, #344]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	4a55      	ldr	r2, [pc, #340]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 800652c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 809b 	beq.w	8006672 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800653c:	4b50      	ldr	r3, [pc, #320]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 030c 	and.w	r3, r3, #12
 8006544:	2b08      	cmp	r3, #8
 8006546:	d05c      	beq.n	8006602 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d141      	bne.n	80065d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006550:	4b4c      	ldr	r3, [pc, #304]	; (8006684 <HAL_RCC_OscConfig+0x4ec>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006556:	f7fe fbd5 	bl	8004d04 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800655e:	f7fe fbd1 	bl	8004d04 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e081      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006570:	4b43      	ldr	r3, [pc, #268]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69da      	ldr	r2, [r3, #28]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	431a      	orrs	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	019b      	lsls	r3, r3, #6
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	085b      	lsrs	r3, r3, #1
 8006594:	3b01      	subs	r3, #1
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	431a      	orrs	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	061b      	lsls	r3, r3, #24
 80065a0:	4937      	ldr	r1, [pc, #220]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a6:	4b37      	ldr	r3, [pc, #220]	; (8006684 <HAL_RCC_OscConfig+0x4ec>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ac:	f7fe fbaa 	bl	8004d04 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b4:	f7fe fba6 	bl	8004d04 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e056      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c6:	4b2e      	ldr	r3, [pc, #184]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0f0      	beq.n	80065b4 <HAL_RCC_OscConfig+0x41c>
 80065d2:	e04e      	b.n	8006672 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_OscConfig+0x4ec>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065da:	f7fe fb93 	bl	8004d04 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e2:	f7fe fb8f 	bl	8004d04 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e03f      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f4:	4b22      	ldr	r3, [pc, #136]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f0      	bne.n	80065e2 <HAL_RCC_OscConfig+0x44a>
 8006600:	e037      	b.n	8006672 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e032      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800660e:	4b1c      	ldr	r3, [pc, #112]	; (8006680 <HAL_RCC_OscConfig+0x4e8>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d028      	beq.n	800666e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006626:	429a      	cmp	r2, r3
 8006628:	d121      	bne.n	800666e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d11a      	bne.n	800666e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800663e:	4013      	ands	r3, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006644:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006646:	4293      	cmp	r3, r2
 8006648:	d111      	bne.n	800666e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	085b      	lsrs	r3, r3, #1
 8006656:	3b01      	subs	r3, #1
 8006658:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800665a:	429a      	cmp	r2, r3
 800665c:	d107      	bne.n	800666e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800666a:	429a      	cmp	r2, r3
 800666c:	d001      	beq.n	8006672 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40007000 	.word	0x40007000
 8006680:	40023800 	.word	0x40023800
 8006684:	42470060 	.word	0x42470060

08006688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0cc      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800669c:	4b68      	ldr	r3, [pc, #416]	; (8006840 <HAL_RCC_ClockConfig+0x1b8>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d90c      	bls.n	80066c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066aa:	4b65      	ldr	r3, [pc, #404]	; (8006840 <HAL_RCC_ClockConfig+0x1b8>)
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b2:	4b63      	ldr	r3, [pc, #396]	; (8006840 <HAL_RCC_ClockConfig+0x1b8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0b8      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0302 	and.w	r3, r3, #2
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d020      	beq.n	8006712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066dc:	4b59      	ldr	r3, [pc, #356]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4a58      	ldr	r2, [pc, #352]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d005      	beq.n	8006700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066f4:	4b53      	ldr	r3, [pc, #332]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	4a52      	ldr	r2, [pc, #328]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006700:	4b50      	ldr	r3, [pc, #320]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	494d      	ldr	r1, [pc, #308]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	4313      	orrs	r3, r2
 8006710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d044      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d107      	bne.n	8006736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006726:	4b47      	ldr	r3, [pc, #284]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d119      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e07f      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d003      	beq.n	8006746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006742:	2b03      	cmp	r3, #3
 8006744:	d107      	bne.n	8006756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006746:	4b3f      	ldr	r3, [pc, #252]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d109      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e06f      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006756:	4b3b      	ldr	r3, [pc, #236]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e067      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006766:	4b37      	ldr	r3, [pc, #220]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f023 0203 	bic.w	r2, r3, #3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4934      	ldr	r1, [pc, #208]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	4313      	orrs	r3, r2
 8006776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006778:	f7fe fac4 	bl	8004d04 <HAL_GetTick>
 800677c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	e00a      	b.n	8006796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006780:	f7fe fac0 	bl	8004d04 <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	f241 3288 	movw	r2, #5000	; 0x1388
 800678e:	4293      	cmp	r3, r2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e04f      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006796:	4b2b      	ldr	r3, [pc, #172]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 020c 	and.w	r2, r3, #12
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d1eb      	bne.n	8006780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067a8:	4b25      	ldr	r3, [pc, #148]	; (8006840 <HAL_RCC_ClockConfig+0x1b8>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	683a      	ldr	r2, [r7, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d20c      	bcs.n	80067d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067b6:	4b22      	ldr	r3, [pc, #136]	; (8006840 <HAL_RCC_ClockConfig+0x1b8>)
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067be:	4b20      	ldr	r3, [pc, #128]	; (8006840 <HAL_RCC_ClockConfig+0x1b8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0307 	and.w	r3, r3, #7
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d001      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e032      	b.n	8006836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067dc:	4b19      	ldr	r3, [pc, #100]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	4916      	ldr	r1, [pc, #88]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0308 	and.w	r3, r3, #8
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	490e      	ldr	r1, [pc, #56]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	4313      	orrs	r3, r2
 800680c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800680e:	f000 f821 	bl	8006854 <HAL_RCC_GetSysClockFreq>
 8006812:	4602      	mov	r2, r0
 8006814:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <HAL_RCC_ClockConfig+0x1bc>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	490a      	ldr	r1, [pc, #40]	; (8006848 <HAL_RCC_ClockConfig+0x1c0>)
 8006820:	5ccb      	ldrb	r3, [r1, r3]
 8006822:	fa22 f303 	lsr.w	r3, r2, r3
 8006826:	4a09      	ldr	r2, [pc, #36]	; (800684c <HAL_RCC_ClockConfig+0x1c4>)
 8006828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800682a:	4b09      	ldr	r3, [pc, #36]	; (8006850 <HAL_RCC_ClockConfig+0x1c8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fa24 	bl	8004c7c <HAL_InitTick>

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023c00 	.word	0x40023c00
 8006844:	40023800 	.word	0x40023800
 8006848:	0800c214 	.word	0x0800c214
 800684c:	20000008 	.word	0x20000008
 8006850:	2000000c 	.word	0x2000000c

08006854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006854:	b5b0      	push	{r4, r5, r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800685a:	2100      	movs	r1, #0
 800685c:	6079      	str	r1, [r7, #4]
 800685e:	2100      	movs	r1, #0
 8006860:	60f9      	str	r1, [r7, #12]
 8006862:	2100      	movs	r1, #0
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006866:	2100      	movs	r1, #0
 8006868:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800686a:	4952      	ldr	r1, [pc, #328]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800686c:	6889      	ldr	r1, [r1, #8]
 800686e:	f001 010c 	and.w	r1, r1, #12
 8006872:	2908      	cmp	r1, #8
 8006874:	d00d      	beq.n	8006892 <HAL_RCC_GetSysClockFreq+0x3e>
 8006876:	2908      	cmp	r1, #8
 8006878:	f200 8094 	bhi.w	80069a4 <HAL_RCC_GetSysClockFreq+0x150>
 800687c:	2900      	cmp	r1, #0
 800687e:	d002      	beq.n	8006886 <HAL_RCC_GetSysClockFreq+0x32>
 8006880:	2904      	cmp	r1, #4
 8006882:	d003      	beq.n	800688c <HAL_RCC_GetSysClockFreq+0x38>
 8006884:	e08e      	b.n	80069a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006886:	4b4c      	ldr	r3, [pc, #304]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8006888:	60bb      	str	r3, [r7, #8]
       break;
 800688a:	e08e      	b.n	80069aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800688c:	4b4b      	ldr	r3, [pc, #300]	; (80069bc <HAL_RCC_GetSysClockFreq+0x168>)
 800688e:	60bb      	str	r3, [r7, #8]
      break;
 8006890:	e08b      	b.n	80069aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006892:	4948      	ldr	r1, [pc, #288]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006894:	6849      	ldr	r1, [r1, #4]
 8006896:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800689a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800689c:	4945      	ldr	r1, [pc, #276]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800689e:	6849      	ldr	r1, [r1, #4]
 80068a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80068a4:	2900      	cmp	r1, #0
 80068a6:	d024      	beq.n	80068f2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068a8:	4942      	ldr	r1, [pc, #264]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80068aa:	6849      	ldr	r1, [r1, #4]
 80068ac:	0989      	lsrs	r1, r1, #6
 80068ae:	4608      	mov	r0, r1
 80068b0:	f04f 0100 	mov.w	r1, #0
 80068b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80068b8:	f04f 0500 	mov.w	r5, #0
 80068bc:	ea00 0204 	and.w	r2, r0, r4
 80068c0:	ea01 0305 	and.w	r3, r1, r5
 80068c4:	493d      	ldr	r1, [pc, #244]	; (80069bc <HAL_RCC_GetSysClockFreq+0x168>)
 80068c6:	fb01 f003 	mul.w	r0, r1, r3
 80068ca:	2100      	movs	r1, #0
 80068cc:	fb01 f102 	mul.w	r1, r1, r2
 80068d0:	1844      	adds	r4, r0, r1
 80068d2:	493a      	ldr	r1, [pc, #232]	; (80069bc <HAL_RCC_GetSysClockFreq+0x168>)
 80068d4:	fba2 0101 	umull	r0, r1, r2, r1
 80068d8:	1863      	adds	r3, r4, r1
 80068da:	4619      	mov	r1, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	461a      	mov	r2, r3
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	f7fa f9d8 	bl	8000c98 <__aeabi_uldivmod>
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4613      	mov	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	e04a      	b.n	8006988 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068f2:	4b30      	ldr	r3, [pc, #192]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x160>)
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	099b      	lsrs	r3, r3, #6
 80068f8:	461a      	mov	r2, r3
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	ea02 0400 	and.w	r4, r2, r0
 800690a:	ea03 0501 	and.w	r5, r3, r1
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	014b      	lsls	r3, r1, #5
 800691c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006920:	0142      	lsls	r2, r0, #5
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	1b00      	subs	r0, r0, r4
 8006928:	eb61 0105 	sbc.w	r1, r1, r5
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	f04f 0300 	mov.w	r3, #0
 8006934:	018b      	lsls	r3, r1, #6
 8006936:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800693a:	0182      	lsls	r2, r0, #6
 800693c:	1a12      	subs	r2, r2, r0
 800693e:	eb63 0301 	sbc.w	r3, r3, r1
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f04f 0100 	mov.w	r1, #0
 800694a:	00d9      	lsls	r1, r3, #3
 800694c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006950:	00d0      	lsls	r0, r2, #3
 8006952:	4602      	mov	r2, r0
 8006954:	460b      	mov	r3, r1
 8006956:	1912      	adds	r2, r2, r4
 8006958:	eb45 0303 	adc.w	r3, r5, r3
 800695c:	f04f 0000 	mov.w	r0, #0
 8006960:	f04f 0100 	mov.w	r1, #0
 8006964:	0299      	lsls	r1, r3, #10
 8006966:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800696a:	0290      	lsls	r0, r2, #10
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4610      	mov	r0, r2
 8006972:	4619      	mov	r1, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	461a      	mov	r2, r3
 8006978:	f04f 0300 	mov.w	r3, #0
 800697c:	f7fa f98c 	bl	8000c98 <__aeabi_uldivmod>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4613      	mov	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	3301      	adds	r3, #1
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	60bb      	str	r3, [r7, #8]
      break;
 80069a2:	e002      	b.n	80069aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80069a6:	60bb      	str	r3, [r7, #8]
      break;
 80069a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069aa:	68bb      	ldr	r3, [r7, #8]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bdb0      	pop	{r4, r5, r7, pc}
 80069b4:	40023800 	.word	0x40023800
 80069b8:	00f42400 	.word	0x00f42400
 80069bc:	017d7840 	.word	0x017d7840

080069c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069c4:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069c6:	681b      	ldr	r3, [r3, #0]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000008 	.word	0x20000008

080069d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069dc:	f7ff fff0 	bl	80069c0 <HAL_RCC_GetHCLKFreq>
 80069e0:	4602      	mov	r2, r0
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	0a9b      	lsrs	r3, r3, #10
 80069e8:	f003 0307 	and.w	r3, r3, #7
 80069ec:	4903      	ldr	r1, [pc, #12]	; (80069fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80069ee:	5ccb      	ldrb	r3, [r1, r3]
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	40023800 	.word	0x40023800
 80069fc:	0800c224 	.word	0x0800c224

08006a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a04:	f7ff ffdc 	bl	80069c0 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	0b5b      	lsrs	r3, r3, #13
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4903      	ldr	r1, [pc, #12]	; (8006a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0800c224 	.word	0x0800c224

08006a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e03f      	b.n	8006aba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fd ff7e 	bl	8004950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2224      	movs	r2, #36	; 0x24
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68da      	ldr	r2, [r3, #12]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f929 	bl	8006cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68da      	ldr	r2, [r3, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08a      	sub	sp, #40	; 0x28
 8006ac6:	af02      	add	r7, sp, #8
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b20      	cmp	r3, #32
 8006ae0:	d17c      	bne.n	8006bdc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_UART_Transmit+0x2c>
 8006ae8:	88fb      	ldrh	r3, [r7, #6]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e075      	b.n	8006bde <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_UART_Transmit+0x3e>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e06e      	b.n	8006bde <HAL_UART_Transmit+0x11c>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2221      	movs	r2, #33	; 0x21
 8006b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b16:	f7fe f8f5 	bl	8004d04 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	88fa      	ldrh	r2, [r7, #6]
 8006b26:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b30:	d108      	bne.n	8006b44 <HAL_UART_Transmit+0x82>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e003      	b.n	8006b4c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b54:	e02a      	b.n	8006bac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 f840 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e036      	b.n	8006bde <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	3302      	adds	r3, #2
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e007      	b.n	8006b9e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1cf      	bne.n	8006b56 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2140      	movs	r1, #64	; 0x40
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f810 	bl	8006be6 <UART_WaitOnFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e006      	b.n	8006bde <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e000      	b.n	8006bde <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
  }
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3720      	adds	r7, #32
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b090      	sub	sp, #64	; 0x40
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bf6:	e050      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bfe:	d04c      	beq.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c06:	f7fe f87d 	bl	8004d04 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d241      	bcs.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c36:	637a      	str	r2, [r7, #52]	; 0x34
 8006c38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3314      	adds	r3, #20
 8006c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3314      	adds	r3, #20
 8006c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c6a:	623a      	str	r2, [r7, #32]
 8006c6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	69f9      	ldr	r1, [r7, #28]
 8006c70:	6a3a      	ldr	r2, [r7, #32]
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e00f      	b.n	8006cba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	bf0c      	ite	eq
 8006caa:	2301      	moveq	r3, #1
 8006cac:	2300      	movne	r3, #0
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	79fb      	ldrb	r3, [r7, #7]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d09f      	beq.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3740      	adds	r7, #64	; 0x40
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
	...

08006cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc8:	b09f      	sub	sp, #124	; 0x7c
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cda:	68d9      	ldr	r1, [r3, #12]
 8006cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	ea40 0301 	orr.w	r3, r0, r1
 8006ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d08:	f021 010c 	bic.w	r1, r1, #12
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d12:	430b      	orrs	r3, r1
 8006d14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d22:	6999      	ldr	r1, [r3, #24]
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	ea40 0301 	orr.w	r3, r0, r1
 8006d2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4bc5      	ldr	r3, [pc, #788]	; (8007048 <UART_SetConfig+0x384>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d004      	beq.n	8006d42 <UART_SetConfig+0x7e>
 8006d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4bc3      	ldr	r3, [pc, #780]	; (800704c <UART_SetConfig+0x388>)
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d103      	bne.n	8006d4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d42:	f7ff fe5d 	bl	8006a00 <HAL_RCC_GetPCLK2Freq>
 8006d46:	6778      	str	r0, [r7, #116]	; 0x74
 8006d48:	e002      	b.n	8006d50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d4a:	f7ff fe45 	bl	80069d8 <HAL_RCC_GetPCLK1Freq>
 8006d4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	f040 80b6 	bne.w	8006ec8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d5e:	461c      	mov	r4, r3
 8006d60:	f04f 0500 	mov.w	r5, #0
 8006d64:	4622      	mov	r2, r4
 8006d66:	462b      	mov	r3, r5
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	6439      	str	r1, [r7, #64]	; 0x40
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d74:	1912      	adds	r2, r2, r4
 8006d76:	eb45 0303 	adc.w	r3, r5, r3
 8006d7a:	f04f 0000 	mov.w	r0, #0
 8006d7e:	f04f 0100 	mov.w	r1, #0
 8006d82:	00d9      	lsls	r1, r3, #3
 8006d84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d88:	00d0      	lsls	r0, r2, #3
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	1911      	adds	r1, r2, r4
 8006d90:	6639      	str	r1, [r7, #96]	; 0x60
 8006d92:	416b      	adcs	r3, r5
 8006d94:	667b      	str	r3, [r7, #100]	; 0x64
 8006d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f04f 0300 	mov.w	r3, #0
 8006da0:	1891      	adds	r1, r2, r2
 8006da2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006da4:	415b      	adcs	r3, r3
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006da8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006dac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006db0:	f7f9 ff72 	bl	8000c98 <__aeabi_uldivmod>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4ba5      	ldr	r3, [pc, #660]	; (8007050 <UART_SetConfig+0x38c>)
 8006dba:	fba3 2302 	umull	r2, r3, r3, r2
 8006dbe:	095b      	lsrs	r3, r3, #5
 8006dc0:	011e      	lsls	r6, r3, #4
 8006dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dc4:	461c      	mov	r4, r3
 8006dc6:	f04f 0500 	mov.w	r5, #0
 8006dca:	4622      	mov	r2, r4
 8006dcc:	462b      	mov	r3, r5
 8006dce:	1891      	adds	r1, r2, r2
 8006dd0:	6339      	str	r1, [r7, #48]	; 0x30
 8006dd2:	415b      	adcs	r3, r3
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006dda:	1912      	adds	r2, r2, r4
 8006ddc:	eb45 0303 	adc.w	r3, r5, r3
 8006de0:	f04f 0000 	mov.w	r0, #0
 8006de4:	f04f 0100 	mov.w	r1, #0
 8006de8:	00d9      	lsls	r1, r3, #3
 8006dea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dee:	00d0      	lsls	r0, r2, #3
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	1911      	adds	r1, r2, r4
 8006df6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006df8:	416b      	adcs	r3, r5
 8006dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	461a      	mov	r2, r3
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	1891      	adds	r1, r2, r2
 8006e08:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e0a:	415b      	adcs	r3, r3
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e16:	f7f9 ff3f 	bl	8000c98 <__aeabi_uldivmod>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4b8c      	ldr	r3, [pc, #560]	; (8007050 <UART_SetConfig+0x38c>)
 8006e20:	fba3 1302 	umull	r1, r3, r3, r2
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	2164      	movs	r1, #100	; 0x64
 8006e28:	fb01 f303 	mul.w	r3, r1, r3
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	3332      	adds	r3, #50	; 0x32
 8006e32:	4a87      	ldr	r2, [pc, #540]	; (8007050 <UART_SetConfig+0x38c>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e40:	441e      	add	r6, r3
 8006e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e44:	4618      	mov	r0, r3
 8006e46:	f04f 0100 	mov.w	r1, #0
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	1894      	adds	r4, r2, r2
 8006e50:	623c      	str	r4, [r7, #32]
 8006e52:	415b      	adcs	r3, r3
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e5a:	1812      	adds	r2, r2, r0
 8006e5c:	eb41 0303 	adc.w	r3, r1, r3
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	f04f 0500 	mov.w	r5, #0
 8006e68:	00dd      	lsls	r5, r3, #3
 8006e6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e6e:	00d4      	lsls	r4, r2, #3
 8006e70:	4622      	mov	r2, r4
 8006e72:	462b      	mov	r3, r5
 8006e74:	1814      	adds	r4, r2, r0
 8006e76:	653c      	str	r4, [r7, #80]	; 0x50
 8006e78:	414b      	adcs	r3, r1
 8006e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	461a      	mov	r2, r3
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	1891      	adds	r1, r2, r2
 8006e88:	61b9      	str	r1, [r7, #24]
 8006e8a:	415b      	adcs	r3, r3
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e96:	f7f9 feff 	bl	8000c98 <__aeabi_uldivmod>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4b6c      	ldr	r3, [pc, #432]	; (8007050 <UART_SetConfig+0x38c>)
 8006ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	2164      	movs	r1, #100	; 0x64
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	00db      	lsls	r3, r3, #3
 8006eb0:	3332      	adds	r3, #50	; 0x32
 8006eb2:	4a67      	ldr	r2, [pc, #412]	; (8007050 <UART_SetConfig+0x38c>)
 8006eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f003 0207 	and.w	r2, r3, #7
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4432      	add	r2, r6
 8006ec4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ec6:	e0b9      	b.n	800703c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eca:	461c      	mov	r4, r3
 8006ecc:	f04f 0500 	mov.w	r5, #0
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	462b      	mov	r3, r5
 8006ed4:	1891      	adds	r1, r2, r2
 8006ed6:	6139      	str	r1, [r7, #16]
 8006ed8:	415b      	adcs	r3, r3
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ee0:	1912      	adds	r2, r2, r4
 8006ee2:	eb45 0303 	adc.w	r3, r5, r3
 8006ee6:	f04f 0000 	mov.w	r0, #0
 8006eea:	f04f 0100 	mov.w	r1, #0
 8006eee:	00d9      	lsls	r1, r3, #3
 8006ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ef4:	00d0      	lsls	r0, r2, #3
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	eb12 0804 	adds.w	r8, r2, r4
 8006efe:	eb43 0905 	adc.w	r9, r3, r5
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f04f 0100 	mov.w	r1, #0
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	008b      	lsls	r3, r1, #2
 8006f16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f1a:	0082      	lsls	r2, r0, #2
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 feba 	bl	8000c98 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4b49      	ldr	r3, [pc, #292]	; (8007050 <UART_SetConfig+0x38c>)
 8006f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	011e      	lsls	r6, r3, #4
 8006f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f34:	4618      	mov	r0, r3
 8006f36:	f04f 0100 	mov.w	r1, #0
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	1894      	adds	r4, r2, r2
 8006f40:	60bc      	str	r4, [r7, #8]
 8006f42:	415b      	adcs	r3, r3
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4a:	1812      	adds	r2, r2, r0
 8006f4c:	eb41 0303 	adc.w	r3, r1, r3
 8006f50:	f04f 0400 	mov.w	r4, #0
 8006f54:	f04f 0500 	mov.w	r5, #0
 8006f58:	00dd      	lsls	r5, r3, #3
 8006f5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f5e:	00d4      	lsls	r4, r2, #3
 8006f60:	4622      	mov	r2, r4
 8006f62:	462b      	mov	r3, r5
 8006f64:	1814      	adds	r4, r2, r0
 8006f66:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f68:	414b      	adcs	r3, r1
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f04f 0100 	mov.w	r1, #0
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	008b      	lsls	r3, r1, #2
 8006f80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f84:	0082      	lsls	r2, r0, #2
 8006f86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f8a:	f7f9 fe85 	bl	8000c98 <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4b2f      	ldr	r3, [pc, #188]	; (8007050 <UART_SetConfig+0x38c>)
 8006f94:	fba3 1302 	umull	r1, r3, r3, r2
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	2164      	movs	r1, #100	; 0x64
 8006f9c:	fb01 f303 	mul.w	r3, r1, r3
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	3332      	adds	r3, #50	; 0x32
 8006fa6:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <UART_SetConfig+0x38c>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb2:	441e      	add	r6, r3
 8006fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	1894      	adds	r4, r2, r2
 8006fc2:	603c      	str	r4, [r7, #0]
 8006fc4:	415b      	adcs	r3, r3
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fcc:	1812      	adds	r2, r2, r0
 8006fce:	eb41 0303 	adc.w	r3, r1, r3
 8006fd2:	f04f 0400 	mov.w	r4, #0
 8006fd6:	f04f 0500 	mov.w	r5, #0
 8006fda:	00dd      	lsls	r5, r3, #3
 8006fdc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fe0:	00d4      	lsls	r4, r2, #3
 8006fe2:	4622      	mov	r2, r4
 8006fe4:	462b      	mov	r3, r5
 8006fe6:	eb12 0a00 	adds.w	sl, r2, r0
 8006fea:	eb43 0b01 	adc.w	fp, r3, r1
 8006fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f04f 0100 	mov.w	r1, #0
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	008b      	lsls	r3, r1, #2
 8007002:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007006:	0082      	lsls	r2, r0, #2
 8007008:	4650      	mov	r0, sl
 800700a:	4659      	mov	r1, fp
 800700c:	f7f9 fe44 	bl	8000c98 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <UART_SetConfig+0x38c>)
 8007016:	fba3 1302 	umull	r1, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	2164      	movs	r1, #100	; 0x64
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	3332      	adds	r3, #50	; 0x32
 8007028:	4a09      	ldr	r2, [pc, #36]	; (8007050 <UART_SetConfig+0x38c>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	f003 020f 	and.w	r2, r3, #15
 8007034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4432      	add	r2, r6
 800703a:	609a      	str	r2, [r3, #8]
}
 800703c:	bf00      	nop
 800703e:	377c      	adds	r7, #124	; 0x7c
 8007040:	46bd      	mov	sp, r7
 8007042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007046:	bf00      	nop
 8007048:	40011000 	.word	0x40011000
 800704c:	40011400 	.word	0x40011400
 8007050:	51eb851f 	.word	0x51eb851f

08007054 <__errno>:
 8007054:	4b01      	ldr	r3, [pc, #4]	; (800705c <__errno+0x8>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000014 	.word	0x20000014

08007060 <__libc_init_array>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	4d0d      	ldr	r5, [pc, #52]	; (8007098 <__libc_init_array+0x38>)
 8007064:	4c0d      	ldr	r4, [pc, #52]	; (800709c <__libc_init_array+0x3c>)
 8007066:	1b64      	subs	r4, r4, r5
 8007068:	10a4      	asrs	r4, r4, #2
 800706a:	2600      	movs	r6, #0
 800706c:	42a6      	cmp	r6, r4
 800706e:	d109      	bne.n	8007084 <__libc_init_array+0x24>
 8007070:	4d0b      	ldr	r5, [pc, #44]	; (80070a0 <__libc_init_array+0x40>)
 8007072:	4c0c      	ldr	r4, [pc, #48]	; (80070a4 <__libc_init_array+0x44>)
 8007074:	f004 ffca 	bl	800c00c <_init>
 8007078:	1b64      	subs	r4, r4, r5
 800707a:	10a4      	asrs	r4, r4, #2
 800707c:	2600      	movs	r6, #0
 800707e:	42a6      	cmp	r6, r4
 8007080:	d105      	bne.n	800708e <__libc_init_array+0x2e>
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	f855 3b04 	ldr.w	r3, [r5], #4
 8007088:	4798      	blx	r3
 800708a:	3601      	adds	r6, #1
 800708c:	e7ee      	b.n	800706c <__libc_init_array+0xc>
 800708e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007092:	4798      	blx	r3
 8007094:	3601      	adds	r6, #1
 8007096:	e7f2      	b.n	800707e <__libc_init_array+0x1e>
 8007098:	0800c724 	.word	0x0800c724
 800709c:	0800c724 	.word	0x0800c724
 80070a0:	0800c724 	.word	0x0800c724
 80070a4:	0800c728 	.word	0x0800c728

080070a8 <memcpy>:
 80070a8:	440a      	add	r2, r1
 80070aa:	4291      	cmp	r1, r2
 80070ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80070b0:	d100      	bne.n	80070b4 <memcpy+0xc>
 80070b2:	4770      	bx	lr
 80070b4:	b510      	push	{r4, lr}
 80070b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070be:	4291      	cmp	r1, r2
 80070c0:	d1f9      	bne.n	80070b6 <memcpy+0xe>
 80070c2:	bd10      	pop	{r4, pc}

080070c4 <memset>:
 80070c4:	4402      	add	r2, r0
 80070c6:	4603      	mov	r3, r0
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d100      	bne.n	80070ce <memset+0xa>
 80070cc:	4770      	bx	lr
 80070ce:	f803 1b01 	strb.w	r1, [r3], #1
 80070d2:	e7f9      	b.n	80070c8 <memset+0x4>

080070d4 <__cvt>:
 80070d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070d8:	ec55 4b10 	vmov	r4, r5, d0
 80070dc:	2d00      	cmp	r5, #0
 80070de:	460e      	mov	r6, r1
 80070e0:	4619      	mov	r1, r3
 80070e2:	462b      	mov	r3, r5
 80070e4:	bfbb      	ittet	lt
 80070e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070ea:	461d      	movlt	r5, r3
 80070ec:	2300      	movge	r3, #0
 80070ee:	232d      	movlt	r3, #45	; 0x2d
 80070f0:	700b      	strb	r3, [r1, #0]
 80070f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070f8:	4691      	mov	r9, r2
 80070fa:	f023 0820 	bic.w	r8, r3, #32
 80070fe:	bfbc      	itt	lt
 8007100:	4622      	movlt	r2, r4
 8007102:	4614      	movlt	r4, r2
 8007104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007108:	d005      	beq.n	8007116 <__cvt+0x42>
 800710a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800710e:	d100      	bne.n	8007112 <__cvt+0x3e>
 8007110:	3601      	adds	r6, #1
 8007112:	2102      	movs	r1, #2
 8007114:	e000      	b.n	8007118 <__cvt+0x44>
 8007116:	2103      	movs	r1, #3
 8007118:	ab03      	add	r3, sp, #12
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	ab02      	add	r3, sp, #8
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	ec45 4b10 	vmov	d0, r4, r5
 8007124:	4653      	mov	r3, sl
 8007126:	4632      	mov	r2, r6
 8007128:	f001 fdb6 	bl	8008c98 <_dtoa_r>
 800712c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007130:	4607      	mov	r7, r0
 8007132:	d102      	bne.n	800713a <__cvt+0x66>
 8007134:	f019 0f01 	tst.w	r9, #1
 8007138:	d022      	beq.n	8007180 <__cvt+0xac>
 800713a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800713e:	eb07 0906 	add.w	r9, r7, r6
 8007142:	d110      	bne.n	8007166 <__cvt+0x92>
 8007144:	783b      	ldrb	r3, [r7, #0]
 8007146:	2b30      	cmp	r3, #48	; 0x30
 8007148:	d10a      	bne.n	8007160 <__cvt+0x8c>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 fcc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007156:	b918      	cbnz	r0, 8007160 <__cvt+0x8c>
 8007158:	f1c6 0601 	rsb	r6, r6, #1
 800715c:	f8ca 6000 	str.w	r6, [sl]
 8007160:	f8da 3000 	ldr.w	r3, [sl]
 8007164:	4499      	add	r9, r3
 8007166:	2200      	movs	r2, #0
 8007168:	2300      	movs	r3, #0
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 fcb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007172:	b108      	cbz	r0, 8007178 <__cvt+0xa4>
 8007174:	f8cd 900c 	str.w	r9, [sp, #12]
 8007178:	2230      	movs	r2, #48	; 0x30
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	454b      	cmp	r3, r9
 800717e:	d307      	bcc.n	8007190 <__cvt+0xbc>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007184:	1bdb      	subs	r3, r3, r7
 8007186:	4638      	mov	r0, r7
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	b004      	add	sp, #16
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	1c59      	adds	r1, r3, #1
 8007192:	9103      	str	r1, [sp, #12]
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	e7f0      	b.n	800717a <__cvt+0xa6>

08007198 <__exponent>:
 8007198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800719a:	4603      	mov	r3, r0
 800719c:	2900      	cmp	r1, #0
 800719e:	bfb8      	it	lt
 80071a0:	4249      	neglt	r1, r1
 80071a2:	f803 2b02 	strb.w	r2, [r3], #2
 80071a6:	bfb4      	ite	lt
 80071a8:	222d      	movlt	r2, #45	; 0x2d
 80071aa:	222b      	movge	r2, #43	; 0x2b
 80071ac:	2909      	cmp	r1, #9
 80071ae:	7042      	strb	r2, [r0, #1]
 80071b0:	dd2a      	ble.n	8007208 <__exponent+0x70>
 80071b2:	f10d 0407 	add.w	r4, sp, #7
 80071b6:	46a4      	mov	ip, r4
 80071b8:	270a      	movs	r7, #10
 80071ba:	46a6      	mov	lr, r4
 80071bc:	460a      	mov	r2, r1
 80071be:	fb91 f6f7 	sdiv	r6, r1, r7
 80071c2:	fb07 1516 	mls	r5, r7, r6, r1
 80071c6:	3530      	adds	r5, #48	; 0x30
 80071c8:	2a63      	cmp	r2, #99	; 0x63
 80071ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80071ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071d2:	4631      	mov	r1, r6
 80071d4:	dcf1      	bgt.n	80071ba <__exponent+0x22>
 80071d6:	3130      	adds	r1, #48	; 0x30
 80071d8:	f1ae 0502 	sub.w	r5, lr, #2
 80071dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071e0:	1c44      	adds	r4, r0, #1
 80071e2:	4629      	mov	r1, r5
 80071e4:	4561      	cmp	r1, ip
 80071e6:	d30a      	bcc.n	80071fe <__exponent+0x66>
 80071e8:	f10d 0209 	add.w	r2, sp, #9
 80071ec:	eba2 020e 	sub.w	r2, r2, lr
 80071f0:	4565      	cmp	r5, ip
 80071f2:	bf88      	it	hi
 80071f4:	2200      	movhi	r2, #0
 80071f6:	4413      	add	r3, r2
 80071f8:	1a18      	subs	r0, r3, r0
 80071fa:	b003      	add	sp, #12
 80071fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007202:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007206:	e7ed      	b.n	80071e4 <__exponent+0x4c>
 8007208:	2330      	movs	r3, #48	; 0x30
 800720a:	3130      	adds	r1, #48	; 0x30
 800720c:	7083      	strb	r3, [r0, #2]
 800720e:	70c1      	strb	r1, [r0, #3]
 8007210:	1d03      	adds	r3, r0, #4
 8007212:	e7f1      	b.n	80071f8 <__exponent+0x60>

08007214 <_printf_float>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	ed2d 8b02 	vpush	{d8}
 800721c:	b08d      	sub	sp, #52	; 0x34
 800721e:	460c      	mov	r4, r1
 8007220:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007224:	4616      	mov	r6, r2
 8007226:	461f      	mov	r7, r3
 8007228:	4605      	mov	r5, r0
 800722a:	f002 fe91 	bl	8009f50 <_localeconv_r>
 800722e:	f8d0 a000 	ldr.w	sl, [r0]
 8007232:	4650      	mov	r0, sl
 8007234:	f7f8 ffd4 	bl	80001e0 <strlen>
 8007238:	2300      	movs	r3, #0
 800723a:	930a      	str	r3, [sp, #40]	; 0x28
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	9305      	str	r3, [sp, #20]
 8007240:	f8d8 3000 	ldr.w	r3, [r8]
 8007244:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007248:	3307      	adds	r3, #7
 800724a:	f023 0307 	bic.w	r3, r3, #7
 800724e:	f103 0208 	add.w	r2, r3, #8
 8007252:	f8c8 2000 	str.w	r2, [r8]
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800725e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007262:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007266:	9307      	str	r3, [sp, #28]
 8007268:	f8cd 8018 	str.w	r8, [sp, #24]
 800726c:	ee08 0a10 	vmov	s16, r0
 8007270:	4b9f      	ldr	r3, [pc, #636]	; (80074f0 <_printf_float+0x2dc>)
 8007272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800727a:	f7f9 fc5f 	bl	8000b3c <__aeabi_dcmpun>
 800727e:	bb88      	cbnz	r0, 80072e4 <_printf_float+0xd0>
 8007280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007284:	4b9a      	ldr	r3, [pc, #616]	; (80074f0 <_printf_float+0x2dc>)
 8007286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800728a:	f7f9 fc39 	bl	8000b00 <__aeabi_dcmple>
 800728e:	bb48      	cbnz	r0, 80072e4 <_printf_float+0xd0>
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	4640      	mov	r0, r8
 8007296:	4649      	mov	r1, r9
 8007298:	f7f9 fc28 	bl	8000aec <__aeabi_dcmplt>
 800729c:	b110      	cbz	r0, 80072a4 <_printf_float+0x90>
 800729e:	232d      	movs	r3, #45	; 0x2d
 80072a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a4:	4b93      	ldr	r3, [pc, #588]	; (80074f4 <_printf_float+0x2e0>)
 80072a6:	4894      	ldr	r0, [pc, #592]	; (80074f8 <_printf_float+0x2e4>)
 80072a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072ac:	bf94      	ite	ls
 80072ae:	4698      	movls	r8, r3
 80072b0:	4680      	movhi	r8, r0
 80072b2:	2303      	movs	r3, #3
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	9b05      	ldr	r3, [sp, #20]
 80072b8:	f023 0204 	bic.w	r2, r3, #4
 80072bc:	6022      	str	r2, [r4, #0]
 80072be:	f04f 0900 	mov.w	r9, #0
 80072c2:	9700      	str	r7, [sp, #0]
 80072c4:	4633      	mov	r3, r6
 80072c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80072c8:	4621      	mov	r1, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 f9d8 	bl	8007680 <_printf_common>
 80072d0:	3001      	adds	r0, #1
 80072d2:	f040 8090 	bne.w	80073f6 <_printf_float+0x1e2>
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072da:	b00d      	add	sp, #52	; 0x34
 80072dc:	ecbd 8b02 	vpop	{d8}
 80072e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	4640      	mov	r0, r8
 80072ea:	4649      	mov	r1, r9
 80072ec:	f7f9 fc26 	bl	8000b3c <__aeabi_dcmpun>
 80072f0:	b140      	cbz	r0, 8007304 <_printf_float+0xf0>
 80072f2:	464b      	mov	r3, r9
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bfbc      	itt	lt
 80072f8:	232d      	movlt	r3, #45	; 0x2d
 80072fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072fe:	487f      	ldr	r0, [pc, #508]	; (80074fc <_printf_float+0x2e8>)
 8007300:	4b7f      	ldr	r3, [pc, #508]	; (8007500 <_printf_float+0x2ec>)
 8007302:	e7d1      	b.n	80072a8 <_printf_float+0x94>
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800730a:	9206      	str	r2, [sp, #24]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	d13f      	bne.n	8007390 <_printf_float+0x17c>
 8007310:	2306      	movs	r3, #6
 8007312:	6063      	str	r3, [r4, #4]
 8007314:	9b05      	ldr	r3, [sp, #20]
 8007316:	6861      	ldr	r1, [r4, #4]
 8007318:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800731c:	2300      	movs	r3, #0
 800731e:	9303      	str	r3, [sp, #12]
 8007320:	ab0a      	add	r3, sp, #40	; 0x28
 8007322:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007326:	ab09      	add	r3, sp, #36	; 0x24
 8007328:	ec49 8b10 	vmov	d0, r8, r9
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	6022      	str	r2, [r4, #0]
 8007330:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007334:	4628      	mov	r0, r5
 8007336:	f7ff fecd 	bl	80070d4 <__cvt>
 800733a:	9b06      	ldr	r3, [sp, #24]
 800733c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800733e:	2b47      	cmp	r3, #71	; 0x47
 8007340:	4680      	mov	r8, r0
 8007342:	d108      	bne.n	8007356 <_printf_float+0x142>
 8007344:	1cc8      	adds	r0, r1, #3
 8007346:	db02      	blt.n	800734e <_printf_float+0x13a>
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	4299      	cmp	r1, r3
 800734c:	dd41      	ble.n	80073d2 <_printf_float+0x1be>
 800734e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007352:	fa5f fb8b 	uxtb.w	fp, fp
 8007356:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800735a:	d820      	bhi.n	800739e <_printf_float+0x18a>
 800735c:	3901      	subs	r1, #1
 800735e:	465a      	mov	r2, fp
 8007360:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007364:	9109      	str	r1, [sp, #36]	; 0x24
 8007366:	f7ff ff17 	bl	8007198 <__exponent>
 800736a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736c:	1813      	adds	r3, r2, r0
 800736e:	2a01      	cmp	r2, #1
 8007370:	4681      	mov	r9, r0
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	dc02      	bgt.n	800737c <_printf_float+0x168>
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	07d2      	lsls	r2, r2, #31
 800737a:	d501      	bpl.n	8007380 <_printf_float+0x16c>
 800737c:	3301      	adds	r3, #1
 800737e:	6123      	str	r3, [r4, #16]
 8007380:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007384:	2b00      	cmp	r3, #0
 8007386:	d09c      	beq.n	80072c2 <_printf_float+0xae>
 8007388:	232d      	movs	r3, #45	; 0x2d
 800738a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738e:	e798      	b.n	80072c2 <_printf_float+0xae>
 8007390:	9a06      	ldr	r2, [sp, #24]
 8007392:	2a47      	cmp	r2, #71	; 0x47
 8007394:	d1be      	bne.n	8007314 <_printf_float+0x100>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1bc      	bne.n	8007314 <_printf_float+0x100>
 800739a:	2301      	movs	r3, #1
 800739c:	e7b9      	b.n	8007312 <_printf_float+0xfe>
 800739e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073a2:	d118      	bne.n	80073d6 <_printf_float+0x1c2>
 80073a4:	2900      	cmp	r1, #0
 80073a6:	6863      	ldr	r3, [r4, #4]
 80073a8:	dd0b      	ble.n	80073c2 <_printf_float+0x1ae>
 80073aa:	6121      	str	r1, [r4, #16]
 80073ac:	b913      	cbnz	r3, 80073b4 <_printf_float+0x1a0>
 80073ae:	6822      	ldr	r2, [r4, #0]
 80073b0:	07d0      	lsls	r0, r2, #31
 80073b2:	d502      	bpl.n	80073ba <_printf_float+0x1a6>
 80073b4:	3301      	adds	r3, #1
 80073b6:	440b      	add	r3, r1
 80073b8:	6123      	str	r3, [r4, #16]
 80073ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80073bc:	f04f 0900 	mov.w	r9, #0
 80073c0:	e7de      	b.n	8007380 <_printf_float+0x16c>
 80073c2:	b913      	cbnz	r3, 80073ca <_printf_float+0x1b6>
 80073c4:	6822      	ldr	r2, [r4, #0]
 80073c6:	07d2      	lsls	r2, r2, #31
 80073c8:	d501      	bpl.n	80073ce <_printf_float+0x1ba>
 80073ca:	3302      	adds	r3, #2
 80073cc:	e7f4      	b.n	80073b8 <_printf_float+0x1a4>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e7f2      	b.n	80073b8 <_printf_float+0x1a4>
 80073d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073d8:	4299      	cmp	r1, r3
 80073da:	db05      	blt.n	80073e8 <_printf_float+0x1d4>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	6121      	str	r1, [r4, #16]
 80073e0:	07d8      	lsls	r0, r3, #31
 80073e2:	d5ea      	bpl.n	80073ba <_printf_float+0x1a6>
 80073e4:	1c4b      	adds	r3, r1, #1
 80073e6:	e7e7      	b.n	80073b8 <_printf_float+0x1a4>
 80073e8:	2900      	cmp	r1, #0
 80073ea:	bfd4      	ite	le
 80073ec:	f1c1 0202 	rsble	r2, r1, #2
 80073f0:	2201      	movgt	r2, #1
 80073f2:	4413      	add	r3, r2
 80073f4:	e7e0      	b.n	80073b8 <_printf_float+0x1a4>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	055a      	lsls	r2, r3, #21
 80073fa:	d407      	bmi.n	800740c <_printf_float+0x1f8>
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	4642      	mov	r2, r8
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	d12c      	bne.n	8007464 <_printf_float+0x250>
 800740a:	e764      	b.n	80072d6 <_printf_float+0xc2>
 800740c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007410:	f240 80e0 	bls.w	80075d4 <_printf_float+0x3c0>
 8007414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007418:	2200      	movs	r2, #0
 800741a:	2300      	movs	r3, #0
 800741c:	f7f9 fb5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007420:	2800      	cmp	r0, #0
 8007422:	d034      	beq.n	800748e <_printf_float+0x27a>
 8007424:	4a37      	ldr	r2, [pc, #220]	; (8007504 <_printf_float+0x2f0>)
 8007426:	2301      	movs	r3, #1
 8007428:	4631      	mov	r1, r6
 800742a:	4628      	mov	r0, r5
 800742c:	47b8      	blx	r7
 800742e:	3001      	adds	r0, #1
 8007430:	f43f af51 	beq.w	80072d6 <_printf_float+0xc2>
 8007434:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007438:	429a      	cmp	r2, r3
 800743a:	db02      	blt.n	8007442 <_printf_float+0x22e>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07d8      	lsls	r0, r3, #31
 8007440:	d510      	bpl.n	8007464 <_printf_float+0x250>
 8007442:	ee18 3a10 	vmov	r3, s16
 8007446:	4652      	mov	r2, sl
 8007448:	4631      	mov	r1, r6
 800744a:	4628      	mov	r0, r5
 800744c:	47b8      	blx	r7
 800744e:	3001      	adds	r0, #1
 8007450:	f43f af41 	beq.w	80072d6 <_printf_float+0xc2>
 8007454:	f04f 0800 	mov.w	r8, #0
 8007458:	f104 091a 	add.w	r9, r4, #26
 800745c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800745e:	3b01      	subs	r3, #1
 8007460:	4543      	cmp	r3, r8
 8007462:	dc09      	bgt.n	8007478 <_printf_float+0x264>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	079b      	lsls	r3, r3, #30
 8007468:	f100 8105 	bmi.w	8007676 <_printf_float+0x462>
 800746c:	68e0      	ldr	r0, [r4, #12]
 800746e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007470:	4298      	cmp	r0, r3
 8007472:	bfb8      	it	lt
 8007474:	4618      	movlt	r0, r3
 8007476:	e730      	b.n	80072da <_printf_float+0xc6>
 8007478:	2301      	movs	r3, #1
 800747a:	464a      	mov	r2, r9
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f af27 	beq.w	80072d6 <_printf_float+0xc2>
 8007488:	f108 0801 	add.w	r8, r8, #1
 800748c:	e7e6      	b.n	800745c <_printf_float+0x248>
 800748e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc39      	bgt.n	8007508 <_printf_float+0x2f4>
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <_printf_float+0x2f0>)
 8007496:	2301      	movs	r3, #1
 8007498:	4631      	mov	r1, r6
 800749a:	4628      	mov	r0, r5
 800749c:	47b8      	blx	r7
 800749e:	3001      	adds	r0, #1
 80074a0:	f43f af19 	beq.w	80072d6 <_printf_float+0xc2>
 80074a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a8:	4313      	orrs	r3, r2
 80074aa:	d102      	bne.n	80074b2 <_printf_float+0x29e>
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	07d9      	lsls	r1, r3, #31
 80074b0:	d5d8      	bpl.n	8007464 <_printf_float+0x250>
 80074b2:	ee18 3a10 	vmov	r3, s16
 80074b6:	4652      	mov	r2, sl
 80074b8:	4631      	mov	r1, r6
 80074ba:	4628      	mov	r0, r5
 80074bc:	47b8      	blx	r7
 80074be:	3001      	adds	r0, #1
 80074c0:	f43f af09 	beq.w	80072d6 <_printf_float+0xc2>
 80074c4:	f04f 0900 	mov.w	r9, #0
 80074c8:	f104 0a1a 	add.w	sl, r4, #26
 80074cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ce:	425b      	negs	r3, r3
 80074d0:	454b      	cmp	r3, r9
 80074d2:	dc01      	bgt.n	80074d8 <_printf_float+0x2c4>
 80074d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d6:	e792      	b.n	80073fe <_printf_float+0x1ea>
 80074d8:	2301      	movs	r3, #1
 80074da:	4652      	mov	r2, sl
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	47b8      	blx	r7
 80074e2:	3001      	adds	r0, #1
 80074e4:	f43f aef7 	beq.w	80072d6 <_printf_float+0xc2>
 80074e8:	f109 0901 	add.w	r9, r9, #1
 80074ec:	e7ee      	b.n	80074cc <_printf_float+0x2b8>
 80074ee:	bf00      	nop
 80074f0:	7fefffff 	.word	0x7fefffff
 80074f4:	0800c230 	.word	0x0800c230
 80074f8:	0800c234 	.word	0x0800c234
 80074fc:	0800c23c 	.word	0x0800c23c
 8007500:	0800c238 	.word	0x0800c238
 8007504:	0800c240 	.word	0x0800c240
 8007508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800750c:	429a      	cmp	r2, r3
 800750e:	bfa8      	it	ge
 8007510:	461a      	movge	r2, r3
 8007512:	2a00      	cmp	r2, #0
 8007514:	4691      	mov	r9, r2
 8007516:	dc37      	bgt.n	8007588 <_printf_float+0x374>
 8007518:	f04f 0b00 	mov.w	fp, #0
 800751c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007520:	f104 021a 	add.w	r2, r4, #26
 8007524:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007526:	9305      	str	r3, [sp, #20]
 8007528:	eba3 0309 	sub.w	r3, r3, r9
 800752c:	455b      	cmp	r3, fp
 800752e:	dc33      	bgt.n	8007598 <_printf_float+0x384>
 8007530:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007534:	429a      	cmp	r2, r3
 8007536:	db3b      	blt.n	80075b0 <_printf_float+0x39c>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	07da      	lsls	r2, r3, #31
 800753c:	d438      	bmi.n	80075b0 <_printf_float+0x39c>
 800753e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007540:	9b05      	ldr	r3, [sp, #20]
 8007542:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	eba2 0901 	sub.w	r9, r2, r1
 800754a:	4599      	cmp	r9, r3
 800754c:	bfa8      	it	ge
 800754e:	4699      	movge	r9, r3
 8007550:	f1b9 0f00 	cmp.w	r9, #0
 8007554:	dc35      	bgt.n	80075c2 <_printf_float+0x3ae>
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800755e:	f104 0a1a 	add.w	sl, r4, #26
 8007562:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	eba3 0309 	sub.w	r3, r3, r9
 800756c:	4543      	cmp	r3, r8
 800756e:	f77f af79 	ble.w	8007464 <_printf_float+0x250>
 8007572:	2301      	movs	r3, #1
 8007574:	4652      	mov	r2, sl
 8007576:	4631      	mov	r1, r6
 8007578:	4628      	mov	r0, r5
 800757a:	47b8      	blx	r7
 800757c:	3001      	adds	r0, #1
 800757e:	f43f aeaa 	beq.w	80072d6 <_printf_float+0xc2>
 8007582:	f108 0801 	add.w	r8, r8, #1
 8007586:	e7ec      	b.n	8007562 <_printf_float+0x34e>
 8007588:	4613      	mov	r3, r2
 800758a:	4631      	mov	r1, r6
 800758c:	4642      	mov	r2, r8
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	d1c0      	bne.n	8007518 <_printf_float+0x304>
 8007596:	e69e      	b.n	80072d6 <_printf_float+0xc2>
 8007598:	2301      	movs	r3, #1
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	9205      	str	r2, [sp, #20]
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	f43f ae97 	beq.w	80072d6 <_printf_float+0xc2>
 80075a8:	9a05      	ldr	r2, [sp, #20]
 80075aa:	f10b 0b01 	add.w	fp, fp, #1
 80075ae:	e7b9      	b.n	8007524 <_printf_float+0x310>
 80075b0:	ee18 3a10 	vmov	r3, s16
 80075b4:	4652      	mov	r2, sl
 80075b6:	4631      	mov	r1, r6
 80075b8:	4628      	mov	r0, r5
 80075ba:	47b8      	blx	r7
 80075bc:	3001      	adds	r0, #1
 80075be:	d1be      	bne.n	800753e <_printf_float+0x32a>
 80075c0:	e689      	b.n	80072d6 <_printf_float+0xc2>
 80075c2:	9a05      	ldr	r2, [sp, #20]
 80075c4:	464b      	mov	r3, r9
 80075c6:	4442      	add	r2, r8
 80075c8:	4631      	mov	r1, r6
 80075ca:	4628      	mov	r0, r5
 80075cc:	47b8      	blx	r7
 80075ce:	3001      	adds	r0, #1
 80075d0:	d1c1      	bne.n	8007556 <_printf_float+0x342>
 80075d2:	e680      	b.n	80072d6 <_printf_float+0xc2>
 80075d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075d6:	2a01      	cmp	r2, #1
 80075d8:	dc01      	bgt.n	80075de <_printf_float+0x3ca>
 80075da:	07db      	lsls	r3, r3, #31
 80075dc:	d538      	bpl.n	8007650 <_printf_float+0x43c>
 80075de:	2301      	movs	r3, #1
 80075e0:	4642      	mov	r2, r8
 80075e2:	4631      	mov	r1, r6
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b8      	blx	r7
 80075e8:	3001      	adds	r0, #1
 80075ea:	f43f ae74 	beq.w	80072d6 <_printf_float+0xc2>
 80075ee:	ee18 3a10 	vmov	r3, s16
 80075f2:	4652      	mov	r2, sl
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f ae6b 	beq.w	80072d6 <_printf_float+0xc2>
 8007600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007604:	2200      	movs	r2, #0
 8007606:	2300      	movs	r3, #0
 8007608:	f7f9 fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800760c:	b9d8      	cbnz	r0, 8007646 <_printf_float+0x432>
 800760e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007610:	f108 0201 	add.w	r2, r8, #1
 8007614:	3b01      	subs	r3, #1
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	47b8      	blx	r7
 800761c:	3001      	adds	r0, #1
 800761e:	d10e      	bne.n	800763e <_printf_float+0x42a>
 8007620:	e659      	b.n	80072d6 <_printf_float+0xc2>
 8007622:	2301      	movs	r3, #1
 8007624:	4652      	mov	r2, sl
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	f43f ae52 	beq.w	80072d6 <_printf_float+0xc2>
 8007632:	f108 0801 	add.w	r8, r8, #1
 8007636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007638:	3b01      	subs	r3, #1
 800763a:	4543      	cmp	r3, r8
 800763c:	dcf1      	bgt.n	8007622 <_printf_float+0x40e>
 800763e:	464b      	mov	r3, r9
 8007640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007644:	e6dc      	b.n	8007400 <_printf_float+0x1ec>
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	f104 0a1a 	add.w	sl, r4, #26
 800764e:	e7f2      	b.n	8007636 <_printf_float+0x422>
 8007650:	2301      	movs	r3, #1
 8007652:	4642      	mov	r2, r8
 8007654:	e7df      	b.n	8007616 <_printf_float+0x402>
 8007656:	2301      	movs	r3, #1
 8007658:	464a      	mov	r2, r9
 800765a:	4631      	mov	r1, r6
 800765c:	4628      	mov	r0, r5
 800765e:	47b8      	blx	r7
 8007660:	3001      	adds	r0, #1
 8007662:	f43f ae38 	beq.w	80072d6 <_printf_float+0xc2>
 8007666:	f108 0801 	add.w	r8, r8, #1
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800766e:	1a5b      	subs	r3, r3, r1
 8007670:	4543      	cmp	r3, r8
 8007672:	dcf0      	bgt.n	8007656 <_printf_float+0x442>
 8007674:	e6fa      	b.n	800746c <_printf_float+0x258>
 8007676:	f04f 0800 	mov.w	r8, #0
 800767a:	f104 0919 	add.w	r9, r4, #25
 800767e:	e7f4      	b.n	800766a <_printf_float+0x456>

08007680 <_printf_common>:
 8007680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	4616      	mov	r6, r2
 8007686:	4699      	mov	r9, r3
 8007688:	688a      	ldr	r2, [r1, #8]
 800768a:	690b      	ldr	r3, [r1, #16]
 800768c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007690:	4293      	cmp	r3, r2
 8007692:	bfb8      	it	lt
 8007694:	4613      	movlt	r3, r2
 8007696:	6033      	str	r3, [r6, #0]
 8007698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800769c:	4607      	mov	r7, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	b10a      	cbz	r2, 80076a6 <_printf_common+0x26>
 80076a2:	3301      	adds	r3, #1
 80076a4:	6033      	str	r3, [r6, #0]
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	0699      	lsls	r1, r3, #26
 80076aa:	bf42      	ittt	mi
 80076ac:	6833      	ldrmi	r3, [r6, #0]
 80076ae:	3302      	addmi	r3, #2
 80076b0:	6033      	strmi	r3, [r6, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	f015 0506 	ands.w	r5, r5, #6
 80076b8:	d106      	bne.n	80076c8 <_printf_common+0x48>
 80076ba:	f104 0a19 	add.w	sl, r4, #25
 80076be:	68e3      	ldr	r3, [r4, #12]
 80076c0:	6832      	ldr	r2, [r6, #0]
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	42ab      	cmp	r3, r5
 80076c6:	dc26      	bgt.n	8007716 <_printf_common+0x96>
 80076c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076cc:	1e13      	subs	r3, r2, #0
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2301      	movne	r3, #1
 80076d4:	0692      	lsls	r2, r2, #26
 80076d6:	d42b      	bmi.n	8007730 <_printf_common+0xb0>
 80076d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076dc:	4649      	mov	r1, r9
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	3001      	adds	r0, #1
 80076e4:	d01e      	beq.n	8007724 <_printf_common+0xa4>
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	68e5      	ldr	r5, [r4, #12]
 80076ea:	6832      	ldr	r2, [r6, #0]
 80076ec:	f003 0306 	and.w	r3, r3, #6
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	bf08      	it	eq
 80076f4:	1aad      	subeq	r5, r5, r2
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	6922      	ldr	r2, [r4, #16]
 80076fa:	bf0c      	ite	eq
 80076fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007700:	2500      	movne	r5, #0
 8007702:	4293      	cmp	r3, r2
 8007704:	bfc4      	itt	gt
 8007706:	1a9b      	subgt	r3, r3, r2
 8007708:	18ed      	addgt	r5, r5, r3
 800770a:	2600      	movs	r6, #0
 800770c:	341a      	adds	r4, #26
 800770e:	42b5      	cmp	r5, r6
 8007710:	d11a      	bne.n	8007748 <_printf_common+0xc8>
 8007712:	2000      	movs	r0, #0
 8007714:	e008      	b.n	8007728 <_printf_common+0xa8>
 8007716:	2301      	movs	r3, #1
 8007718:	4652      	mov	r2, sl
 800771a:	4649      	mov	r1, r9
 800771c:	4638      	mov	r0, r7
 800771e:	47c0      	blx	r8
 8007720:	3001      	adds	r0, #1
 8007722:	d103      	bne.n	800772c <_printf_common+0xac>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772c:	3501      	adds	r5, #1
 800772e:	e7c6      	b.n	80076be <_printf_common+0x3e>
 8007730:	18e1      	adds	r1, r4, r3
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	2030      	movs	r0, #48	; 0x30
 8007736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800773a:	4422      	add	r2, r4
 800773c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007744:	3302      	adds	r3, #2
 8007746:	e7c7      	b.n	80076d8 <_printf_common+0x58>
 8007748:	2301      	movs	r3, #1
 800774a:	4622      	mov	r2, r4
 800774c:	4649      	mov	r1, r9
 800774e:	4638      	mov	r0, r7
 8007750:	47c0      	blx	r8
 8007752:	3001      	adds	r0, #1
 8007754:	d0e6      	beq.n	8007724 <_printf_common+0xa4>
 8007756:	3601      	adds	r6, #1
 8007758:	e7d9      	b.n	800770e <_printf_common+0x8e>
	...

0800775c <_printf_i>:
 800775c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007760:	460c      	mov	r4, r1
 8007762:	4691      	mov	r9, r2
 8007764:	7e27      	ldrb	r7, [r4, #24]
 8007766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007768:	2f78      	cmp	r7, #120	; 0x78
 800776a:	4680      	mov	r8, r0
 800776c:	469a      	mov	sl, r3
 800776e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007772:	d807      	bhi.n	8007784 <_printf_i+0x28>
 8007774:	2f62      	cmp	r7, #98	; 0x62
 8007776:	d80a      	bhi.n	800778e <_printf_i+0x32>
 8007778:	2f00      	cmp	r7, #0
 800777a:	f000 80d8 	beq.w	800792e <_printf_i+0x1d2>
 800777e:	2f58      	cmp	r7, #88	; 0x58
 8007780:	f000 80a3 	beq.w	80078ca <_printf_i+0x16e>
 8007784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800778c:	e03a      	b.n	8007804 <_printf_i+0xa8>
 800778e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007792:	2b15      	cmp	r3, #21
 8007794:	d8f6      	bhi.n	8007784 <_printf_i+0x28>
 8007796:	a001      	add	r0, pc, #4	; (adr r0, 800779c <_printf_i+0x40>)
 8007798:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	08007809 	.word	0x08007809
 80077a4:	08007785 	.word	0x08007785
 80077a8:	08007785 	.word	0x08007785
 80077ac:	08007785 	.word	0x08007785
 80077b0:	08007785 	.word	0x08007785
 80077b4:	08007809 	.word	0x08007809
 80077b8:	08007785 	.word	0x08007785
 80077bc:	08007785 	.word	0x08007785
 80077c0:	08007785 	.word	0x08007785
 80077c4:	08007785 	.word	0x08007785
 80077c8:	08007915 	.word	0x08007915
 80077cc:	08007839 	.word	0x08007839
 80077d0:	080078f7 	.word	0x080078f7
 80077d4:	08007785 	.word	0x08007785
 80077d8:	08007785 	.word	0x08007785
 80077dc:	08007937 	.word	0x08007937
 80077e0:	08007785 	.word	0x08007785
 80077e4:	08007839 	.word	0x08007839
 80077e8:	08007785 	.word	0x08007785
 80077ec:	08007785 	.word	0x08007785
 80077f0:	080078ff 	.word	0x080078ff
 80077f4:	680b      	ldr	r3, [r1, #0]
 80077f6:	1d1a      	adds	r2, r3, #4
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	600a      	str	r2, [r1, #0]
 80077fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007804:	2301      	movs	r3, #1
 8007806:	e0a3      	b.n	8007950 <_printf_i+0x1f4>
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	6808      	ldr	r0, [r1, #0]
 800780c:	062e      	lsls	r6, r5, #24
 800780e:	f100 0304 	add.w	r3, r0, #4
 8007812:	d50a      	bpl.n	800782a <_printf_i+0xce>
 8007814:	6805      	ldr	r5, [r0, #0]
 8007816:	600b      	str	r3, [r1, #0]
 8007818:	2d00      	cmp	r5, #0
 800781a:	da03      	bge.n	8007824 <_printf_i+0xc8>
 800781c:	232d      	movs	r3, #45	; 0x2d
 800781e:	426d      	negs	r5, r5
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	485e      	ldr	r0, [pc, #376]	; (80079a0 <_printf_i+0x244>)
 8007826:	230a      	movs	r3, #10
 8007828:	e019      	b.n	800785e <_printf_i+0x102>
 800782a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800782e:	6805      	ldr	r5, [r0, #0]
 8007830:	600b      	str	r3, [r1, #0]
 8007832:	bf18      	it	ne
 8007834:	b22d      	sxthne	r5, r5
 8007836:	e7ef      	b.n	8007818 <_printf_i+0xbc>
 8007838:	680b      	ldr	r3, [r1, #0]
 800783a:	6825      	ldr	r5, [r4, #0]
 800783c:	1d18      	adds	r0, r3, #4
 800783e:	6008      	str	r0, [r1, #0]
 8007840:	0628      	lsls	r0, r5, #24
 8007842:	d501      	bpl.n	8007848 <_printf_i+0xec>
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	e002      	b.n	800784e <_printf_i+0xf2>
 8007848:	0669      	lsls	r1, r5, #25
 800784a:	d5fb      	bpl.n	8007844 <_printf_i+0xe8>
 800784c:	881d      	ldrh	r5, [r3, #0]
 800784e:	4854      	ldr	r0, [pc, #336]	; (80079a0 <_printf_i+0x244>)
 8007850:	2f6f      	cmp	r7, #111	; 0x6f
 8007852:	bf0c      	ite	eq
 8007854:	2308      	moveq	r3, #8
 8007856:	230a      	movne	r3, #10
 8007858:	2100      	movs	r1, #0
 800785a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800785e:	6866      	ldr	r6, [r4, #4]
 8007860:	60a6      	str	r6, [r4, #8]
 8007862:	2e00      	cmp	r6, #0
 8007864:	bfa2      	ittt	ge
 8007866:	6821      	ldrge	r1, [r4, #0]
 8007868:	f021 0104 	bicge.w	r1, r1, #4
 800786c:	6021      	strge	r1, [r4, #0]
 800786e:	b90d      	cbnz	r5, 8007874 <_printf_i+0x118>
 8007870:	2e00      	cmp	r6, #0
 8007872:	d04d      	beq.n	8007910 <_printf_i+0x1b4>
 8007874:	4616      	mov	r6, r2
 8007876:	fbb5 f1f3 	udiv	r1, r5, r3
 800787a:	fb03 5711 	mls	r7, r3, r1, r5
 800787e:	5dc7      	ldrb	r7, [r0, r7]
 8007880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007884:	462f      	mov	r7, r5
 8007886:	42bb      	cmp	r3, r7
 8007888:	460d      	mov	r5, r1
 800788a:	d9f4      	bls.n	8007876 <_printf_i+0x11a>
 800788c:	2b08      	cmp	r3, #8
 800788e:	d10b      	bne.n	80078a8 <_printf_i+0x14c>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	07df      	lsls	r7, r3, #31
 8007894:	d508      	bpl.n	80078a8 <_printf_i+0x14c>
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	6861      	ldr	r1, [r4, #4]
 800789a:	4299      	cmp	r1, r3
 800789c:	bfde      	ittt	le
 800789e:	2330      	movle	r3, #48	; 0x30
 80078a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078a4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80078a8:	1b92      	subs	r2, r2, r6
 80078aa:	6122      	str	r2, [r4, #16]
 80078ac:	f8cd a000 	str.w	sl, [sp]
 80078b0:	464b      	mov	r3, r9
 80078b2:	aa03      	add	r2, sp, #12
 80078b4:	4621      	mov	r1, r4
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7ff fee2 	bl	8007680 <_printf_common>
 80078bc:	3001      	adds	r0, #1
 80078be:	d14c      	bne.n	800795a <_printf_i+0x1fe>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	4835      	ldr	r0, [pc, #212]	; (80079a0 <_printf_i+0x244>)
 80078cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	680e      	ldr	r6, [r1, #0]
 80078d4:	061f      	lsls	r7, r3, #24
 80078d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80078da:	600e      	str	r6, [r1, #0]
 80078dc:	d514      	bpl.n	8007908 <_printf_i+0x1ac>
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	bf44      	itt	mi
 80078e2:	f043 0320 	orrmi.w	r3, r3, #32
 80078e6:	6023      	strmi	r3, [r4, #0]
 80078e8:	b91d      	cbnz	r5, 80078f2 <_printf_i+0x196>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	f023 0320 	bic.w	r3, r3, #32
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	2310      	movs	r3, #16
 80078f4:	e7b0      	b.n	8007858 <_printf_i+0xfc>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	f043 0320 	orr.w	r3, r3, #32
 80078fc:	6023      	str	r3, [r4, #0]
 80078fe:	2378      	movs	r3, #120	; 0x78
 8007900:	4828      	ldr	r0, [pc, #160]	; (80079a4 <_printf_i+0x248>)
 8007902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007906:	e7e3      	b.n	80078d0 <_printf_i+0x174>
 8007908:	065e      	lsls	r6, r3, #25
 800790a:	bf48      	it	mi
 800790c:	b2ad      	uxthmi	r5, r5
 800790e:	e7e6      	b.n	80078de <_printf_i+0x182>
 8007910:	4616      	mov	r6, r2
 8007912:	e7bb      	b.n	800788c <_printf_i+0x130>
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	6826      	ldr	r6, [r4, #0]
 8007918:	6960      	ldr	r0, [r4, #20]
 800791a:	1d1d      	adds	r5, r3, #4
 800791c:	600d      	str	r5, [r1, #0]
 800791e:	0635      	lsls	r5, r6, #24
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	d501      	bpl.n	8007928 <_printf_i+0x1cc>
 8007924:	6018      	str	r0, [r3, #0]
 8007926:	e002      	b.n	800792e <_printf_i+0x1d2>
 8007928:	0671      	lsls	r1, r6, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0x1c8>
 800792c:	8018      	strh	r0, [r3, #0]
 800792e:	2300      	movs	r3, #0
 8007930:	6123      	str	r3, [r4, #16]
 8007932:	4616      	mov	r6, r2
 8007934:	e7ba      	b.n	80078ac <_printf_i+0x150>
 8007936:	680b      	ldr	r3, [r1, #0]
 8007938:	1d1a      	adds	r2, r3, #4
 800793a:	600a      	str	r2, [r1, #0]
 800793c:	681e      	ldr	r6, [r3, #0]
 800793e:	6862      	ldr	r2, [r4, #4]
 8007940:	2100      	movs	r1, #0
 8007942:	4630      	mov	r0, r6
 8007944:	f7f8 fc54 	bl	80001f0 <memchr>
 8007948:	b108      	cbz	r0, 800794e <_printf_i+0x1f2>
 800794a:	1b80      	subs	r0, r0, r6
 800794c:	6060      	str	r0, [r4, #4]
 800794e:	6863      	ldr	r3, [r4, #4]
 8007950:	6123      	str	r3, [r4, #16]
 8007952:	2300      	movs	r3, #0
 8007954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007958:	e7a8      	b.n	80078ac <_printf_i+0x150>
 800795a:	6923      	ldr	r3, [r4, #16]
 800795c:	4632      	mov	r2, r6
 800795e:	4649      	mov	r1, r9
 8007960:	4640      	mov	r0, r8
 8007962:	47d0      	blx	sl
 8007964:	3001      	adds	r0, #1
 8007966:	d0ab      	beq.n	80078c0 <_printf_i+0x164>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	079b      	lsls	r3, r3, #30
 800796c:	d413      	bmi.n	8007996 <_printf_i+0x23a>
 800796e:	68e0      	ldr	r0, [r4, #12]
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	4298      	cmp	r0, r3
 8007974:	bfb8      	it	lt
 8007976:	4618      	movlt	r0, r3
 8007978:	e7a4      	b.n	80078c4 <_printf_i+0x168>
 800797a:	2301      	movs	r3, #1
 800797c:	4632      	mov	r2, r6
 800797e:	4649      	mov	r1, r9
 8007980:	4640      	mov	r0, r8
 8007982:	47d0      	blx	sl
 8007984:	3001      	adds	r0, #1
 8007986:	d09b      	beq.n	80078c0 <_printf_i+0x164>
 8007988:	3501      	adds	r5, #1
 800798a:	68e3      	ldr	r3, [r4, #12]
 800798c:	9903      	ldr	r1, [sp, #12]
 800798e:	1a5b      	subs	r3, r3, r1
 8007990:	42ab      	cmp	r3, r5
 8007992:	dcf2      	bgt.n	800797a <_printf_i+0x21e>
 8007994:	e7eb      	b.n	800796e <_printf_i+0x212>
 8007996:	2500      	movs	r5, #0
 8007998:	f104 0619 	add.w	r6, r4, #25
 800799c:	e7f5      	b.n	800798a <_printf_i+0x22e>
 800799e:	bf00      	nop
 80079a0:	0800c242 	.word	0x0800c242
 80079a4:	0800c253 	.word	0x0800c253

080079a8 <_scanf_float>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	b087      	sub	sp, #28
 80079ae:	4617      	mov	r7, r2
 80079b0:	9303      	str	r3, [sp, #12]
 80079b2:	688b      	ldr	r3, [r1, #8]
 80079b4:	1e5a      	subs	r2, r3, #1
 80079b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079ba:	bf83      	ittte	hi
 80079bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079c0:	195b      	addhi	r3, r3, r5
 80079c2:	9302      	strhi	r3, [sp, #8]
 80079c4:	2300      	movls	r3, #0
 80079c6:	bf86      	itte	hi
 80079c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80079cc:	608b      	strhi	r3, [r1, #8]
 80079ce:	9302      	strls	r3, [sp, #8]
 80079d0:	680b      	ldr	r3, [r1, #0]
 80079d2:	468b      	mov	fp, r1
 80079d4:	2500      	movs	r5, #0
 80079d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80079da:	f84b 3b1c 	str.w	r3, [fp], #28
 80079de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80079e2:	4680      	mov	r8, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	465e      	mov	r6, fp
 80079e8:	46aa      	mov	sl, r5
 80079ea:	46a9      	mov	r9, r5
 80079ec:	9501      	str	r5, [sp, #4]
 80079ee:	68a2      	ldr	r2, [r4, #8]
 80079f0:	b152      	cbz	r2, 8007a08 <_scanf_float+0x60>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b4e      	cmp	r3, #78	; 0x4e
 80079f8:	d864      	bhi.n	8007ac4 <_scanf_float+0x11c>
 80079fa:	2b40      	cmp	r3, #64	; 0x40
 80079fc:	d83c      	bhi.n	8007a78 <_scanf_float+0xd0>
 80079fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007a02:	b2c8      	uxtb	r0, r1
 8007a04:	280e      	cmp	r0, #14
 8007a06:	d93a      	bls.n	8007a7e <_scanf_float+0xd6>
 8007a08:	f1b9 0f00 	cmp.w	r9, #0
 8007a0c:	d003      	beq.n	8007a16 <_scanf_float+0x6e>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a14:	6023      	str	r3, [r4, #0]
 8007a16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a1a:	f1ba 0f01 	cmp.w	sl, #1
 8007a1e:	f200 8113 	bhi.w	8007c48 <_scanf_float+0x2a0>
 8007a22:	455e      	cmp	r6, fp
 8007a24:	f200 8105 	bhi.w	8007c32 <_scanf_float+0x28a>
 8007a28:	2501      	movs	r5, #1
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	b007      	add	sp, #28
 8007a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a36:	2a0d      	cmp	r2, #13
 8007a38:	d8e6      	bhi.n	8007a08 <_scanf_float+0x60>
 8007a3a:	a101      	add	r1, pc, #4	; (adr r1, 8007a40 <_scanf_float+0x98>)
 8007a3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007a40:	08007b7f 	.word	0x08007b7f
 8007a44:	08007a09 	.word	0x08007a09
 8007a48:	08007a09 	.word	0x08007a09
 8007a4c:	08007a09 	.word	0x08007a09
 8007a50:	08007bdf 	.word	0x08007bdf
 8007a54:	08007bb7 	.word	0x08007bb7
 8007a58:	08007a09 	.word	0x08007a09
 8007a5c:	08007a09 	.word	0x08007a09
 8007a60:	08007b8d 	.word	0x08007b8d
 8007a64:	08007a09 	.word	0x08007a09
 8007a68:	08007a09 	.word	0x08007a09
 8007a6c:	08007a09 	.word	0x08007a09
 8007a70:	08007a09 	.word	0x08007a09
 8007a74:	08007b45 	.word	0x08007b45
 8007a78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007a7c:	e7db      	b.n	8007a36 <_scanf_float+0x8e>
 8007a7e:	290e      	cmp	r1, #14
 8007a80:	d8c2      	bhi.n	8007a08 <_scanf_float+0x60>
 8007a82:	a001      	add	r0, pc, #4	; (adr r0, 8007a88 <_scanf_float+0xe0>)
 8007a84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007a88:	08007b37 	.word	0x08007b37
 8007a8c:	08007a09 	.word	0x08007a09
 8007a90:	08007b37 	.word	0x08007b37
 8007a94:	08007bcb 	.word	0x08007bcb
 8007a98:	08007a09 	.word	0x08007a09
 8007a9c:	08007ae5 	.word	0x08007ae5
 8007aa0:	08007b21 	.word	0x08007b21
 8007aa4:	08007b21 	.word	0x08007b21
 8007aa8:	08007b21 	.word	0x08007b21
 8007aac:	08007b21 	.word	0x08007b21
 8007ab0:	08007b21 	.word	0x08007b21
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007b21 	.word	0x08007b21
 8007ac4:	2b6e      	cmp	r3, #110	; 0x6e
 8007ac6:	d809      	bhi.n	8007adc <_scanf_float+0x134>
 8007ac8:	2b60      	cmp	r3, #96	; 0x60
 8007aca:	d8b2      	bhi.n	8007a32 <_scanf_float+0x8a>
 8007acc:	2b54      	cmp	r3, #84	; 0x54
 8007ace:	d077      	beq.n	8007bc0 <_scanf_float+0x218>
 8007ad0:	2b59      	cmp	r3, #89	; 0x59
 8007ad2:	d199      	bne.n	8007a08 <_scanf_float+0x60>
 8007ad4:	2d07      	cmp	r5, #7
 8007ad6:	d197      	bne.n	8007a08 <_scanf_float+0x60>
 8007ad8:	2508      	movs	r5, #8
 8007ada:	e029      	b.n	8007b30 <_scanf_float+0x188>
 8007adc:	2b74      	cmp	r3, #116	; 0x74
 8007ade:	d06f      	beq.n	8007bc0 <_scanf_float+0x218>
 8007ae0:	2b79      	cmp	r3, #121	; 0x79
 8007ae2:	e7f6      	b.n	8007ad2 <_scanf_float+0x12a>
 8007ae4:	6821      	ldr	r1, [r4, #0]
 8007ae6:	05c8      	lsls	r0, r1, #23
 8007ae8:	d51a      	bpl.n	8007b20 <_scanf_float+0x178>
 8007aea:	9b02      	ldr	r3, [sp, #8]
 8007aec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007af0:	6021      	str	r1, [r4, #0]
 8007af2:	f109 0901 	add.w	r9, r9, #1
 8007af6:	b11b      	cbz	r3, 8007b00 <_scanf_float+0x158>
 8007af8:	3b01      	subs	r3, #1
 8007afa:	3201      	adds	r2, #1
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	60a2      	str	r2, [r4, #8]
 8007b00:	68a3      	ldr	r3, [r4, #8]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	60a3      	str	r3, [r4, #8]
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	6123      	str	r3, [r4, #16]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	607b      	str	r3, [r7, #4]
 8007b14:	f340 8084 	ble.w	8007c20 <_scanf_float+0x278>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	e766      	b.n	80079ee <_scanf_float+0x46>
 8007b20:	eb1a 0f05 	cmn.w	sl, r5
 8007b24:	f47f af70 	bne.w	8007a08 <_scanf_float+0x60>
 8007b28:	6822      	ldr	r2, [r4, #0]
 8007b2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b2e:	6022      	str	r2, [r4, #0]
 8007b30:	f806 3b01 	strb.w	r3, [r6], #1
 8007b34:	e7e4      	b.n	8007b00 <_scanf_float+0x158>
 8007b36:	6822      	ldr	r2, [r4, #0]
 8007b38:	0610      	lsls	r0, r2, #24
 8007b3a:	f57f af65 	bpl.w	8007a08 <_scanf_float+0x60>
 8007b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b42:	e7f4      	b.n	8007b2e <_scanf_float+0x186>
 8007b44:	f1ba 0f00 	cmp.w	sl, #0
 8007b48:	d10e      	bne.n	8007b68 <_scanf_float+0x1c0>
 8007b4a:	f1b9 0f00 	cmp.w	r9, #0
 8007b4e:	d10e      	bne.n	8007b6e <_scanf_float+0x1c6>
 8007b50:	6822      	ldr	r2, [r4, #0]
 8007b52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007b5a:	d108      	bne.n	8007b6e <_scanf_float+0x1c6>
 8007b5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007b60:	6022      	str	r2, [r4, #0]
 8007b62:	f04f 0a01 	mov.w	sl, #1
 8007b66:	e7e3      	b.n	8007b30 <_scanf_float+0x188>
 8007b68:	f1ba 0f02 	cmp.w	sl, #2
 8007b6c:	d055      	beq.n	8007c1a <_scanf_float+0x272>
 8007b6e:	2d01      	cmp	r5, #1
 8007b70:	d002      	beq.n	8007b78 <_scanf_float+0x1d0>
 8007b72:	2d04      	cmp	r5, #4
 8007b74:	f47f af48 	bne.w	8007a08 <_scanf_float+0x60>
 8007b78:	3501      	adds	r5, #1
 8007b7a:	b2ed      	uxtb	r5, r5
 8007b7c:	e7d8      	b.n	8007b30 <_scanf_float+0x188>
 8007b7e:	f1ba 0f01 	cmp.w	sl, #1
 8007b82:	f47f af41 	bne.w	8007a08 <_scanf_float+0x60>
 8007b86:	f04f 0a02 	mov.w	sl, #2
 8007b8a:	e7d1      	b.n	8007b30 <_scanf_float+0x188>
 8007b8c:	b97d      	cbnz	r5, 8007bae <_scanf_float+0x206>
 8007b8e:	f1b9 0f00 	cmp.w	r9, #0
 8007b92:	f47f af3c 	bne.w	8007a0e <_scanf_float+0x66>
 8007b96:	6822      	ldr	r2, [r4, #0]
 8007b98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007b9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ba0:	f47f af39 	bne.w	8007a16 <_scanf_float+0x6e>
 8007ba4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ba8:	6022      	str	r2, [r4, #0]
 8007baa:	2501      	movs	r5, #1
 8007bac:	e7c0      	b.n	8007b30 <_scanf_float+0x188>
 8007bae:	2d03      	cmp	r5, #3
 8007bb0:	d0e2      	beq.n	8007b78 <_scanf_float+0x1d0>
 8007bb2:	2d05      	cmp	r5, #5
 8007bb4:	e7de      	b.n	8007b74 <_scanf_float+0x1cc>
 8007bb6:	2d02      	cmp	r5, #2
 8007bb8:	f47f af26 	bne.w	8007a08 <_scanf_float+0x60>
 8007bbc:	2503      	movs	r5, #3
 8007bbe:	e7b7      	b.n	8007b30 <_scanf_float+0x188>
 8007bc0:	2d06      	cmp	r5, #6
 8007bc2:	f47f af21 	bne.w	8007a08 <_scanf_float+0x60>
 8007bc6:	2507      	movs	r5, #7
 8007bc8:	e7b2      	b.n	8007b30 <_scanf_float+0x188>
 8007bca:	6822      	ldr	r2, [r4, #0]
 8007bcc:	0591      	lsls	r1, r2, #22
 8007bce:	f57f af1b 	bpl.w	8007a08 <_scanf_float+0x60>
 8007bd2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007bd6:	6022      	str	r2, [r4, #0]
 8007bd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007bdc:	e7a8      	b.n	8007b30 <_scanf_float+0x188>
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007be4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007be8:	d006      	beq.n	8007bf8 <_scanf_float+0x250>
 8007bea:	0550      	lsls	r0, r2, #21
 8007bec:	f57f af0c 	bpl.w	8007a08 <_scanf_float+0x60>
 8007bf0:	f1b9 0f00 	cmp.w	r9, #0
 8007bf4:	f43f af0f 	beq.w	8007a16 <_scanf_float+0x6e>
 8007bf8:	0591      	lsls	r1, r2, #22
 8007bfa:	bf58      	it	pl
 8007bfc:	9901      	ldrpl	r1, [sp, #4]
 8007bfe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c02:	bf58      	it	pl
 8007c04:	eba9 0101 	subpl.w	r1, r9, r1
 8007c08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c0c:	bf58      	it	pl
 8007c0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c12:	6022      	str	r2, [r4, #0]
 8007c14:	f04f 0900 	mov.w	r9, #0
 8007c18:	e78a      	b.n	8007b30 <_scanf_float+0x188>
 8007c1a:	f04f 0a03 	mov.w	sl, #3
 8007c1e:	e787      	b.n	8007b30 <_scanf_float+0x188>
 8007c20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c24:	4639      	mov	r1, r7
 8007c26:	4640      	mov	r0, r8
 8007c28:	4798      	blx	r3
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f43f aedf 	beq.w	80079ee <_scanf_float+0x46>
 8007c30:	e6ea      	b.n	8007a08 <_scanf_float+0x60>
 8007c32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c3a:	463a      	mov	r2, r7
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4798      	blx	r3
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	3b01      	subs	r3, #1
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	e6ec      	b.n	8007a22 <_scanf_float+0x7a>
 8007c48:	1e6b      	subs	r3, r5, #1
 8007c4a:	2b06      	cmp	r3, #6
 8007c4c:	d825      	bhi.n	8007c9a <_scanf_float+0x2f2>
 8007c4e:	2d02      	cmp	r5, #2
 8007c50:	d836      	bhi.n	8007cc0 <_scanf_float+0x318>
 8007c52:	455e      	cmp	r6, fp
 8007c54:	f67f aee8 	bls.w	8007a28 <_scanf_float+0x80>
 8007c58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007c60:	463a      	mov	r2, r7
 8007c62:	4640      	mov	r0, r8
 8007c64:	4798      	blx	r3
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	e7f1      	b.n	8007c52 <_scanf_float+0x2aa>
 8007c6e:	9802      	ldr	r0, [sp, #8]
 8007c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007c78:	9002      	str	r0, [sp, #8]
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4798      	blx	r3
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	3b01      	subs	r3, #1
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007c8a:	fa5f fa8a 	uxtb.w	sl, sl
 8007c8e:	f1ba 0f02 	cmp.w	sl, #2
 8007c92:	d1ec      	bne.n	8007c6e <_scanf_float+0x2c6>
 8007c94:	3d03      	subs	r5, #3
 8007c96:	b2ed      	uxtb	r5, r5
 8007c98:	1b76      	subs	r6, r6, r5
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	05da      	lsls	r2, r3, #23
 8007c9e:	d52f      	bpl.n	8007d00 <_scanf_float+0x358>
 8007ca0:	055b      	lsls	r3, r3, #21
 8007ca2:	d510      	bpl.n	8007cc6 <_scanf_float+0x31e>
 8007ca4:	455e      	cmp	r6, fp
 8007ca6:	f67f aebf 	bls.w	8007a28 <_scanf_float+0x80>
 8007caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007cb2:	463a      	mov	r2, r7
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4798      	blx	r3
 8007cb8:	6923      	ldr	r3, [r4, #16]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	6123      	str	r3, [r4, #16]
 8007cbe:	e7f1      	b.n	8007ca4 <_scanf_float+0x2fc>
 8007cc0:	46aa      	mov	sl, r5
 8007cc2:	9602      	str	r6, [sp, #8]
 8007cc4:	e7df      	b.n	8007c86 <_scanf_float+0x2de>
 8007cc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007cca:	6923      	ldr	r3, [r4, #16]
 8007ccc:	2965      	cmp	r1, #101	; 0x65
 8007cce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007cd2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007cd6:	6123      	str	r3, [r4, #16]
 8007cd8:	d00c      	beq.n	8007cf4 <_scanf_float+0x34c>
 8007cda:	2945      	cmp	r1, #69	; 0x45
 8007cdc:	d00a      	beq.n	8007cf4 <_scanf_float+0x34c>
 8007cde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ce2:	463a      	mov	r2, r7
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4798      	blx	r3
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	1eb5      	subs	r5, r6, #2
 8007cf2:	6123      	str	r3, [r4, #16]
 8007cf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cf8:	463a      	mov	r2, r7
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4798      	blx	r3
 8007cfe:	462e      	mov	r6, r5
 8007d00:	6825      	ldr	r5, [r4, #0]
 8007d02:	f015 0510 	ands.w	r5, r5, #16
 8007d06:	d158      	bne.n	8007dba <_scanf_float+0x412>
 8007d08:	7035      	strb	r5, [r6, #0]
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d14:	d11c      	bne.n	8007d50 <_scanf_float+0x3a8>
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	454b      	cmp	r3, r9
 8007d1a:	eba3 0209 	sub.w	r2, r3, r9
 8007d1e:	d124      	bne.n	8007d6a <_scanf_float+0x3c2>
 8007d20:	2200      	movs	r2, #0
 8007d22:	4659      	mov	r1, fp
 8007d24:	4640      	mov	r0, r8
 8007d26:	f000 fe9d 	bl	8008a64 <_strtod_r>
 8007d2a:	9b03      	ldr	r3, [sp, #12]
 8007d2c:	6821      	ldr	r1, [r4, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f011 0f02 	tst.w	r1, #2
 8007d34:	ec57 6b10 	vmov	r6, r7, d0
 8007d38:	f103 0204 	add.w	r2, r3, #4
 8007d3c:	d020      	beq.n	8007d80 <_scanf_float+0x3d8>
 8007d3e:	9903      	ldr	r1, [sp, #12]
 8007d40:	600a      	str	r2, [r1, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	e9c3 6700 	strd	r6, r7, [r3]
 8007d48:	68e3      	ldr	r3, [r4, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60e3      	str	r3, [r4, #12]
 8007d4e:	e66c      	b.n	8007a2a <_scanf_float+0x82>
 8007d50:	9b04      	ldr	r3, [sp, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0e4      	beq.n	8007d20 <_scanf_float+0x378>
 8007d56:	9905      	ldr	r1, [sp, #20]
 8007d58:	230a      	movs	r3, #10
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	3101      	adds	r1, #1
 8007d5e:	4640      	mov	r0, r8
 8007d60:	f000 ff0a 	bl	8008b78 <_strtol_r>
 8007d64:	9b04      	ldr	r3, [sp, #16]
 8007d66:	9e05      	ldr	r6, [sp, #20]
 8007d68:	1ac2      	subs	r2, r0, r3
 8007d6a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007d6e:	429e      	cmp	r6, r3
 8007d70:	bf28      	it	cs
 8007d72:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007d76:	4912      	ldr	r1, [pc, #72]	; (8007dc0 <_scanf_float+0x418>)
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f000 f82b 	bl	8007dd4 <siprintf>
 8007d7e:	e7cf      	b.n	8007d20 <_scanf_float+0x378>
 8007d80:	f011 0f04 	tst.w	r1, #4
 8007d84:	9903      	ldr	r1, [sp, #12]
 8007d86:	600a      	str	r2, [r1, #0]
 8007d88:	d1db      	bne.n	8007d42 <_scanf_float+0x39a>
 8007d8a:	f8d3 8000 	ldr.w	r8, [r3]
 8007d8e:	ee10 2a10 	vmov	r2, s0
 8007d92:	ee10 0a10 	vmov	r0, s0
 8007d96:	463b      	mov	r3, r7
 8007d98:	4639      	mov	r1, r7
 8007d9a:	f7f8 fecf 	bl	8000b3c <__aeabi_dcmpun>
 8007d9e:	b128      	cbz	r0, 8007dac <_scanf_float+0x404>
 8007da0:	4808      	ldr	r0, [pc, #32]	; (8007dc4 <_scanf_float+0x41c>)
 8007da2:	f000 f811 	bl	8007dc8 <nanf>
 8007da6:	ed88 0a00 	vstr	s0, [r8]
 8007daa:	e7cd      	b.n	8007d48 <_scanf_float+0x3a0>
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 ff22 	bl	8000bf8 <__aeabi_d2f>
 8007db4:	f8c8 0000 	str.w	r0, [r8]
 8007db8:	e7c6      	b.n	8007d48 <_scanf_float+0x3a0>
 8007dba:	2500      	movs	r5, #0
 8007dbc:	e635      	b.n	8007a2a <_scanf_float+0x82>
 8007dbe:	bf00      	nop
 8007dc0:	0800c264 	.word	0x0800c264
 8007dc4:	0800c680 	.word	0x0800c680

08007dc8 <nanf>:
 8007dc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007dd0 <nanf+0x8>
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	7fc00000 	.word	0x7fc00000

08007dd4 <siprintf>:
 8007dd4:	b40e      	push	{r1, r2, r3}
 8007dd6:	b500      	push	{lr}
 8007dd8:	b09c      	sub	sp, #112	; 0x70
 8007dda:	ab1d      	add	r3, sp, #116	; 0x74
 8007ddc:	9002      	str	r0, [sp, #8]
 8007dde:	9006      	str	r0, [sp, #24]
 8007de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007de4:	4809      	ldr	r0, [pc, #36]	; (8007e0c <siprintf+0x38>)
 8007de6:	9107      	str	r1, [sp, #28]
 8007de8:	9104      	str	r1, [sp, #16]
 8007dea:	4909      	ldr	r1, [pc, #36]	; (8007e10 <siprintf+0x3c>)
 8007dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df0:	9105      	str	r1, [sp, #20]
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	a902      	add	r1, sp, #8
 8007df8:	f002 fe98 	bl	800ab2c <_svfiprintf_r>
 8007dfc:	9b02      	ldr	r3, [sp, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	b01c      	add	sp, #112	; 0x70
 8007e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e08:	b003      	add	sp, #12
 8007e0a:	4770      	bx	lr
 8007e0c:	20000014 	.word	0x20000014
 8007e10:	ffff0208 	.word	0xffff0208

08007e14 <sulp>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4604      	mov	r4, r0
 8007e18:	460d      	mov	r5, r1
 8007e1a:	ec45 4b10 	vmov	d0, r4, r5
 8007e1e:	4616      	mov	r6, r2
 8007e20:	f002 fc20 	bl	800a664 <__ulp>
 8007e24:	ec51 0b10 	vmov	r0, r1, d0
 8007e28:	b17e      	cbz	r6, 8007e4a <sulp+0x36>
 8007e2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007e2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd09      	ble.n	8007e4a <sulp+0x36>
 8007e36:	051b      	lsls	r3, r3, #20
 8007e38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007e3c:	2400      	movs	r4, #0
 8007e3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007e42:	4622      	mov	r2, r4
 8007e44:	462b      	mov	r3, r5
 8007e46:	f7f8 fbdf 	bl	8000608 <__aeabi_dmul>
 8007e4a:	bd70      	pop	{r4, r5, r6, pc}
 8007e4c:	0000      	movs	r0, r0
	...

08007e50 <_strtod_l>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	b0a3      	sub	sp, #140	; 0x8c
 8007e56:	461f      	mov	r7, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	931e      	str	r3, [sp, #120]	; 0x78
 8007e5c:	4ba4      	ldr	r3, [pc, #656]	; (80080f0 <_strtod_l+0x2a0>)
 8007e5e:	9219      	str	r2, [sp, #100]	; 0x64
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	9307      	str	r3, [sp, #28]
 8007e64:	4604      	mov	r4, r0
 8007e66:	4618      	mov	r0, r3
 8007e68:	4688      	mov	r8, r1
 8007e6a:	f7f8 f9b9 	bl	80001e0 <strlen>
 8007e6e:	f04f 0a00 	mov.w	sl, #0
 8007e72:	4605      	mov	r5, r0
 8007e74:	f04f 0b00 	mov.w	fp, #0
 8007e78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	2a2b      	cmp	r2, #43	; 0x2b
 8007e82:	d04c      	beq.n	8007f1e <_strtod_l+0xce>
 8007e84:	d839      	bhi.n	8007efa <_strtod_l+0xaa>
 8007e86:	2a0d      	cmp	r2, #13
 8007e88:	d832      	bhi.n	8007ef0 <_strtod_l+0xa0>
 8007e8a:	2a08      	cmp	r2, #8
 8007e8c:	d832      	bhi.n	8007ef4 <_strtod_l+0xa4>
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	d03c      	beq.n	8007f0c <_strtod_l+0xbc>
 8007e92:	2300      	movs	r3, #0
 8007e94:	930e      	str	r3, [sp, #56]	; 0x38
 8007e96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007e98:	7833      	ldrb	r3, [r6, #0]
 8007e9a:	2b30      	cmp	r3, #48	; 0x30
 8007e9c:	f040 80b4 	bne.w	8008008 <_strtod_l+0x1b8>
 8007ea0:	7873      	ldrb	r3, [r6, #1]
 8007ea2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ea6:	2b58      	cmp	r3, #88	; 0x58
 8007ea8:	d16c      	bne.n	8007f84 <_strtod_l+0x134>
 8007eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	ab1e      	add	r3, sp, #120	; 0x78
 8007eb0:	9702      	str	r7, [sp, #8]
 8007eb2:	9300      	str	r3, [sp, #0]
 8007eb4:	4a8f      	ldr	r2, [pc, #572]	; (80080f4 <_strtod_l+0x2a4>)
 8007eb6:	ab1f      	add	r3, sp, #124	; 0x7c
 8007eb8:	a91d      	add	r1, sp, #116	; 0x74
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f001 fd40 	bl	8009940 <__gethex>
 8007ec0:	f010 0707 	ands.w	r7, r0, #7
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	d005      	beq.n	8007ed4 <_strtod_l+0x84>
 8007ec8:	2f06      	cmp	r7, #6
 8007eca:	d12a      	bne.n	8007f22 <_strtod_l+0xd2>
 8007ecc:	3601      	adds	r6, #1
 8007ece:	2300      	movs	r3, #0
 8007ed0:	961d      	str	r6, [sp, #116]	; 0x74
 8007ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ed4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 8596 	bne.w	8008a08 <_strtod_l+0xbb8>
 8007edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ede:	b1db      	cbz	r3, 8007f18 <_strtod_l+0xc8>
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ee6:	ec43 2b10 	vmov	d0, r2, r3
 8007eea:	b023      	add	sp, #140	; 0x8c
 8007eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ef0:	2a20      	cmp	r2, #32
 8007ef2:	d1ce      	bne.n	8007e92 <_strtod_l+0x42>
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	931d      	str	r3, [sp, #116]	; 0x74
 8007ef8:	e7c0      	b.n	8007e7c <_strtod_l+0x2c>
 8007efa:	2a2d      	cmp	r2, #45	; 0x2d
 8007efc:	d1c9      	bne.n	8007e92 <_strtod_l+0x42>
 8007efe:	2201      	movs	r2, #1
 8007f00:	920e      	str	r2, [sp, #56]	; 0x38
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	921d      	str	r2, [sp, #116]	; 0x74
 8007f06:	785b      	ldrb	r3, [r3, #1]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1c4      	bne.n	8007e96 <_strtod_l+0x46>
 8007f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f0e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f040 8576 	bne.w	8008a04 <_strtod_l+0xbb4>
 8007f18:	4652      	mov	r2, sl
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	e7e3      	b.n	8007ee6 <_strtod_l+0x96>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	e7ee      	b.n	8007f00 <_strtod_l+0xb0>
 8007f22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f24:	b13a      	cbz	r2, 8007f36 <_strtod_l+0xe6>
 8007f26:	2135      	movs	r1, #53	; 0x35
 8007f28:	a820      	add	r0, sp, #128	; 0x80
 8007f2a:	f002 fca6 	bl	800a87a <__copybits>
 8007f2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f30:	4620      	mov	r0, r4
 8007f32:	f002 f86b 	bl	800a00c <_Bfree>
 8007f36:	3f01      	subs	r7, #1
 8007f38:	2f05      	cmp	r7, #5
 8007f3a:	d807      	bhi.n	8007f4c <_strtod_l+0xfc>
 8007f3c:	e8df f007 	tbb	[pc, r7]
 8007f40:	1d180b0e 	.word	0x1d180b0e
 8007f44:	030e      	.short	0x030e
 8007f46:	f04f 0b00 	mov.w	fp, #0
 8007f4a:	46da      	mov	sl, fp
 8007f4c:	0728      	lsls	r0, r5, #28
 8007f4e:	d5c1      	bpl.n	8007ed4 <_strtod_l+0x84>
 8007f50:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007f54:	e7be      	b.n	8007ed4 <_strtod_l+0x84>
 8007f56:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007f5a:	e7f7      	b.n	8007f4c <_strtod_l+0xfc>
 8007f5c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007f60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007f66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007f6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007f6e:	e7ed      	b.n	8007f4c <_strtod_l+0xfc>
 8007f70:	f8df b184 	ldr.w	fp, [pc, #388]	; 80080f8 <_strtod_l+0x2a8>
 8007f74:	f04f 0a00 	mov.w	sl, #0
 8007f78:	e7e8      	b.n	8007f4c <_strtod_l+0xfc>
 8007f7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007f7e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007f82:	e7e3      	b.n	8007f4c <_strtod_l+0xfc>
 8007f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	921d      	str	r2, [sp, #116]	; 0x74
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b30      	cmp	r3, #48	; 0x30
 8007f8e:	d0f9      	beq.n	8007f84 <_strtod_l+0x134>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d09f      	beq.n	8007ed4 <_strtod_l+0x84>
 8007f94:	2301      	movs	r3, #1
 8007f96:	f04f 0900 	mov.w	r9, #0
 8007f9a:	9304      	str	r3, [sp, #16]
 8007f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007fa4:	464f      	mov	r7, r9
 8007fa6:	220a      	movs	r2, #10
 8007fa8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007faa:	7806      	ldrb	r6, [r0, #0]
 8007fac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007fb0:	b2d9      	uxtb	r1, r3
 8007fb2:	2909      	cmp	r1, #9
 8007fb4:	d92a      	bls.n	800800c <_strtod_l+0x1bc>
 8007fb6:	9907      	ldr	r1, [sp, #28]
 8007fb8:	462a      	mov	r2, r5
 8007fba:	f002 fed1 	bl	800ad60 <strncmp>
 8007fbe:	b398      	cbz	r0, 8008028 <_strtod_l+0x1d8>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	4633      	mov	r3, r6
 8007fc4:	463d      	mov	r5, r7
 8007fc6:	9007      	str	r0, [sp, #28]
 8007fc8:	4602      	mov	r2, r0
 8007fca:	2b65      	cmp	r3, #101	; 0x65
 8007fcc:	d001      	beq.n	8007fd2 <_strtod_l+0x182>
 8007fce:	2b45      	cmp	r3, #69	; 0x45
 8007fd0:	d118      	bne.n	8008004 <_strtod_l+0x1b4>
 8007fd2:	b91d      	cbnz	r5, 8007fdc <_strtod_l+0x18c>
 8007fd4:	9b04      	ldr	r3, [sp, #16]
 8007fd6:	4303      	orrs	r3, r0
 8007fd8:	d098      	beq.n	8007f0c <_strtod_l+0xbc>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007fe0:	f108 0301 	add.w	r3, r8, #1
 8007fe4:	931d      	str	r3, [sp, #116]	; 0x74
 8007fe6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007fea:	2b2b      	cmp	r3, #43	; 0x2b
 8007fec:	d075      	beq.n	80080da <_strtod_l+0x28a>
 8007fee:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff0:	d07b      	beq.n	80080ea <_strtod_l+0x29a>
 8007ff2:	f04f 0c00 	mov.w	ip, #0
 8007ff6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007ffa:	2909      	cmp	r1, #9
 8007ffc:	f240 8082 	bls.w	8008104 <_strtod_l+0x2b4>
 8008000:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008004:	2600      	movs	r6, #0
 8008006:	e09d      	b.n	8008144 <_strtod_l+0x2f4>
 8008008:	2300      	movs	r3, #0
 800800a:	e7c4      	b.n	8007f96 <_strtod_l+0x146>
 800800c:	2f08      	cmp	r7, #8
 800800e:	bfd8      	it	le
 8008010:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008012:	f100 0001 	add.w	r0, r0, #1
 8008016:	bfda      	itte	le
 8008018:	fb02 3301 	mlale	r3, r2, r1, r3
 800801c:	9309      	strle	r3, [sp, #36]	; 0x24
 800801e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008022:	3701      	adds	r7, #1
 8008024:	901d      	str	r0, [sp, #116]	; 0x74
 8008026:	e7bf      	b.n	8007fa8 <_strtod_l+0x158>
 8008028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800802a:	195a      	adds	r2, r3, r5
 800802c:	921d      	str	r2, [sp, #116]	; 0x74
 800802e:	5d5b      	ldrb	r3, [r3, r5]
 8008030:	2f00      	cmp	r7, #0
 8008032:	d037      	beq.n	80080a4 <_strtod_l+0x254>
 8008034:	9007      	str	r0, [sp, #28]
 8008036:	463d      	mov	r5, r7
 8008038:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800803c:	2a09      	cmp	r2, #9
 800803e:	d912      	bls.n	8008066 <_strtod_l+0x216>
 8008040:	2201      	movs	r2, #1
 8008042:	e7c2      	b.n	8007fca <_strtod_l+0x17a>
 8008044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008046:	1c5a      	adds	r2, r3, #1
 8008048:	921d      	str	r2, [sp, #116]	; 0x74
 800804a:	785b      	ldrb	r3, [r3, #1]
 800804c:	3001      	adds	r0, #1
 800804e:	2b30      	cmp	r3, #48	; 0x30
 8008050:	d0f8      	beq.n	8008044 <_strtod_l+0x1f4>
 8008052:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008056:	2a08      	cmp	r2, #8
 8008058:	f200 84db 	bhi.w	8008a12 <_strtod_l+0xbc2>
 800805c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800805e:	9007      	str	r0, [sp, #28]
 8008060:	2000      	movs	r0, #0
 8008062:	920a      	str	r2, [sp, #40]	; 0x28
 8008064:	4605      	mov	r5, r0
 8008066:	3b30      	subs	r3, #48	; 0x30
 8008068:	f100 0201 	add.w	r2, r0, #1
 800806c:	d014      	beq.n	8008098 <_strtod_l+0x248>
 800806e:	9907      	ldr	r1, [sp, #28]
 8008070:	4411      	add	r1, r2
 8008072:	9107      	str	r1, [sp, #28]
 8008074:	462a      	mov	r2, r5
 8008076:	eb00 0e05 	add.w	lr, r0, r5
 800807a:	210a      	movs	r1, #10
 800807c:	4572      	cmp	r2, lr
 800807e:	d113      	bne.n	80080a8 <_strtod_l+0x258>
 8008080:	182a      	adds	r2, r5, r0
 8008082:	2a08      	cmp	r2, #8
 8008084:	f105 0501 	add.w	r5, r5, #1
 8008088:	4405      	add	r5, r0
 800808a:	dc1c      	bgt.n	80080c6 <_strtod_l+0x276>
 800808c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800808e:	220a      	movs	r2, #10
 8008090:	fb02 3301 	mla	r3, r2, r1, r3
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	2200      	movs	r2, #0
 8008098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800809a:	1c59      	adds	r1, r3, #1
 800809c:	911d      	str	r1, [sp, #116]	; 0x74
 800809e:	785b      	ldrb	r3, [r3, #1]
 80080a0:	4610      	mov	r0, r2
 80080a2:	e7c9      	b.n	8008038 <_strtod_l+0x1e8>
 80080a4:	4638      	mov	r0, r7
 80080a6:	e7d2      	b.n	800804e <_strtod_l+0x1fe>
 80080a8:	2a08      	cmp	r2, #8
 80080aa:	dc04      	bgt.n	80080b6 <_strtod_l+0x266>
 80080ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80080ae:	434e      	muls	r6, r1
 80080b0:	9609      	str	r6, [sp, #36]	; 0x24
 80080b2:	3201      	adds	r2, #1
 80080b4:	e7e2      	b.n	800807c <_strtod_l+0x22c>
 80080b6:	f102 0c01 	add.w	ip, r2, #1
 80080ba:	f1bc 0f10 	cmp.w	ip, #16
 80080be:	bfd8      	it	le
 80080c0:	fb01 f909 	mulle.w	r9, r1, r9
 80080c4:	e7f5      	b.n	80080b2 <_strtod_l+0x262>
 80080c6:	2d10      	cmp	r5, #16
 80080c8:	bfdc      	itt	le
 80080ca:	220a      	movle	r2, #10
 80080cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80080d0:	e7e1      	b.n	8008096 <_strtod_l+0x246>
 80080d2:	2300      	movs	r3, #0
 80080d4:	9307      	str	r3, [sp, #28]
 80080d6:	2201      	movs	r2, #1
 80080d8:	e77c      	b.n	8007fd4 <_strtod_l+0x184>
 80080da:	f04f 0c00 	mov.w	ip, #0
 80080de:	f108 0302 	add.w	r3, r8, #2
 80080e2:	931d      	str	r3, [sp, #116]	; 0x74
 80080e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80080e8:	e785      	b.n	8007ff6 <_strtod_l+0x1a6>
 80080ea:	f04f 0c01 	mov.w	ip, #1
 80080ee:	e7f6      	b.n	80080de <_strtod_l+0x28e>
 80080f0:	0800c4c0 	.word	0x0800c4c0
 80080f4:	0800c26c 	.word	0x0800c26c
 80080f8:	7ff00000 	.word	0x7ff00000
 80080fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080fe:	1c59      	adds	r1, r3, #1
 8008100:	911d      	str	r1, [sp, #116]	; 0x74
 8008102:	785b      	ldrb	r3, [r3, #1]
 8008104:	2b30      	cmp	r3, #48	; 0x30
 8008106:	d0f9      	beq.n	80080fc <_strtod_l+0x2ac>
 8008108:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800810c:	2908      	cmp	r1, #8
 800810e:	f63f af79 	bhi.w	8008004 <_strtod_l+0x1b4>
 8008112:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008118:	9308      	str	r3, [sp, #32]
 800811a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800811c:	1c59      	adds	r1, r3, #1
 800811e:	911d      	str	r1, [sp, #116]	; 0x74
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008126:	2e09      	cmp	r6, #9
 8008128:	d937      	bls.n	800819a <_strtod_l+0x34a>
 800812a:	9e08      	ldr	r6, [sp, #32]
 800812c:	1b89      	subs	r1, r1, r6
 800812e:	2908      	cmp	r1, #8
 8008130:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008134:	dc02      	bgt.n	800813c <_strtod_l+0x2ec>
 8008136:	4576      	cmp	r6, lr
 8008138:	bfa8      	it	ge
 800813a:	4676      	movge	r6, lr
 800813c:	f1bc 0f00 	cmp.w	ip, #0
 8008140:	d000      	beq.n	8008144 <_strtod_l+0x2f4>
 8008142:	4276      	negs	r6, r6
 8008144:	2d00      	cmp	r5, #0
 8008146:	d14f      	bne.n	80081e8 <_strtod_l+0x398>
 8008148:	9904      	ldr	r1, [sp, #16]
 800814a:	4301      	orrs	r1, r0
 800814c:	f47f aec2 	bne.w	8007ed4 <_strtod_l+0x84>
 8008150:	2a00      	cmp	r2, #0
 8008152:	f47f aedb 	bne.w	8007f0c <_strtod_l+0xbc>
 8008156:	2b69      	cmp	r3, #105	; 0x69
 8008158:	d027      	beq.n	80081aa <_strtod_l+0x35a>
 800815a:	dc24      	bgt.n	80081a6 <_strtod_l+0x356>
 800815c:	2b49      	cmp	r3, #73	; 0x49
 800815e:	d024      	beq.n	80081aa <_strtod_l+0x35a>
 8008160:	2b4e      	cmp	r3, #78	; 0x4e
 8008162:	f47f aed3 	bne.w	8007f0c <_strtod_l+0xbc>
 8008166:	499e      	ldr	r1, [pc, #632]	; (80083e0 <_strtod_l+0x590>)
 8008168:	a81d      	add	r0, sp, #116	; 0x74
 800816a:	f001 fe41 	bl	8009df0 <__match>
 800816e:	2800      	cmp	r0, #0
 8008170:	f43f aecc 	beq.w	8007f0c <_strtod_l+0xbc>
 8008174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	2b28      	cmp	r3, #40	; 0x28
 800817a:	d12d      	bne.n	80081d8 <_strtod_l+0x388>
 800817c:	4999      	ldr	r1, [pc, #612]	; (80083e4 <_strtod_l+0x594>)
 800817e:	aa20      	add	r2, sp, #128	; 0x80
 8008180:	a81d      	add	r0, sp, #116	; 0x74
 8008182:	f001 fe49 	bl	8009e18 <__hexnan>
 8008186:	2805      	cmp	r0, #5
 8008188:	d126      	bne.n	80081d8 <_strtod_l+0x388>
 800818a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800818c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008190:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008194:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008198:	e69c      	b.n	8007ed4 <_strtod_l+0x84>
 800819a:	210a      	movs	r1, #10
 800819c:	fb01 3e0e 	mla	lr, r1, lr, r3
 80081a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80081a4:	e7b9      	b.n	800811a <_strtod_l+0x2ca>
 80081a6:	2b6e      	cmp	r3, #110	; 0x6e
 80081a8:	e7db      	b.n	8008162 <_strtod_l+0x312>
 80081aa:	498f      	ldr	r1, [pc, #572]	; (80083e8 <_strtod_l+0x598>)
 80081ac:	a81d      	add	r0, sp, #116	; 0x74
 80081ae:	f001 fe1f 	bl	8009df0 <__match>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aeaa 	beq.w	8007f0c <_strtod_l+0xbc>
 80081b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081ba:	498c      	ldr	r1, [pc, #560]	; (80083ec <_strtod_l+0x59c>)
 80081bc:	3b01      	subs	r3, #1
 80081be:	a81d      	add	r0, sp, #116	; 0x74
 80081c0:	931d      	str	r3, [sp, #116]	; 0x74
 80081c2:	f001 fe15 	bl	8009df0 <__match>
 80081c6:	b910      	cbnz	r0, 80081ce <_strtod_l+0x37e>
 80081c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081ca:	3301      	adds	r3, #1
 80081cc:	931d      	str	r3, [sp, #116]	; 0x74
 80081ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80083fc <_strtod_l+0x5ac>
 80081d2:	f04f 0a00 	mov.w	sl, #0
 80081d6:	e67d      	b.n	8007ed4 <_strtod_l+0x84>
 80081d8:	4885      	ldr	r0, [pc, #532]	; (80083f0 <_strtod_l+0x5a0>)
 80081da:	f002 fda9 	bl	800ad30 <nan>
 80081de:	ed8d 0b04 	vstr	d0, [sp, #16]
 80081e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80081e6:	e675      	b.n	8007ed4 <_strtod_l+0x84>
 80081e8:	9b07      	ldr	r3, [sp, #28]
 80081ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ec:	1af3      	subs	r3, r6, r3
 80081ee:	2f00      	cmp	r7, #0
 80081f0:	bf08      	it	eq
 80081f2:	462f      	moveq	r7, r5
 80081f4:	2d10      	cmp	r5, #16
 80081f6:	9308      	str	r3, [sp, #32]
 80081f8:	46a8      	mov	r8, r5
 80081fa:	bfa8      	it	ge
 80081fc:	f04f 0810 	movge.w	r8, #16
 8008200:	f7f8 f988 	bl	8000514 <__aeabi_ui2d>
 8008204:	2d09      	cmp	r5, #9
 8008206:	4682      	mov	sl, r0
 8008208:	468b      	mov	fp, r1
 800820a:	dd13      	ble.n	8008234 <_strtod_l+0x3e4>
 800820c:	4b79      	ldr	r3, [pc, #484]	; (80083f4 <_strtod_l+0x5a4>)
 800820e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008212:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008216:	f7f8 f9f7 	bl	8000608 <__aeabi_dmul>
 800821a:	4682      	mov	sl, r0
 800821c:	4648      	mov	r0, r9
 800821e:	468b      	mov	fp, r1
 8008220:	f7f8 f978 	bl	8000514 <__aeabi_ui2d>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4650      	mov	r0, sl
 800822a:	4659      	mov	r1, fp
 800822c:	f7f8 f836 	bl	800029c <__adddf3>
 8008230:	4682      	mov	sl, r0
 8008232:	468b      	mov	fp, r1
 8008234:	2d0f      	cmp	r5, #15
 8008236:	dc38      	bgt.n	80082aa <_strtod_l+0x45a>
 8008238:	9b08      	ldr	r3, [sp, #32]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f43f ae4a 	beq.w	8007ed4 <_strtod_l+0x84>
 8008240:	dd24      	ble.n	800828c <_strtod_l+0x43c>
 8008242:	2b16      	cmp	r3, #22
 8008244:	dc0b      	bgt.n	800825e <_strtod_l+0x40e>
 8008246:	4d6b      	ldr	r5, [pc, #428]	; (80083f4 <_strtod_l+0x5a4>)
 8008248:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800824c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008250:	4652      	mov	r2, sl
 8008252:	465b      	mov	r3, fp
 8008254:	f7f8 f9d8 	bl	8000608 <__aeabi_dmul>
 8008258:	4682      	mov	sl, r0
 800825a:	468b      	mov	fp, r1
 800825c:	e63a      	b.n	8007ed4 <_strtod_l+0x84>
 800825e:	9a08      	ldr	r2, [sp, #32]
 8008260:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008264:	4293      	cmp	r3, r2
 8008266:	db20      	blt.n	80082aa <_strtod_l+0x45a>
 8008268:	4c62      	ldr	r4, [pc, #392]	; (80083f4 <_strtod_l+0x5a4>)
 800826a:	f1c5 050f 	rsb	r5, r5, #15
 800826e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008272:	4652      	mov	r2, sl
 8008274:	465b      	mov	r3, fp
 8008276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800827a:	f7f8 f9c5 	bl	8000608 <__aeabi_dmul>
 800827e:	9b08      	ldr	r3, [sp, #32]
 8008280:	1b5d      	subs	r5, r3, r5
 8008282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008286:	e9d4 2300 	ldrd	r2, r3, [r4]
 800828a:	e7e3      	b.n	8008254 <_strtod_l+0x404>
 800828c:	9b08      	ldr	r3, [sp, #32]
 800828e:	3316      	adds	r3, #22
 8008290:	db0b      	blt.n	80082aa <_strtod_l+0x45a>
 8008292:	9b07      	ldr	r3, [sp, #28]
 8008294:	4a57      	ldr	r2, [pc, #348]	; (80083f4 <_strtod_l+0x5a4>)
 8008296:	1b9e      	subs	r6, r3, r6
 8008298:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800829c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80082a0:	4650      	mov	r0, sl
 80082a2:	4659      	mov	r1, fp
 80082a4:	f7f8 fada 	bl	800085c <__aeabi_ddiv>
 80082a8:	e7d6      	b.n	8008258 <_strtod_l+0x408>
 80082aa:	9b08      	ldr	r3, [sp, #32]
 80082ac:	eba5 0808 	sub.w	r8, r5, r8
 80082b0:	4498      	add	r8, r3
 80082b2:	f1b8 0f00 	cmp.w	r8, #0
 80082b6:	dd71      	ble.n	800839c <_strtod_l+0x54c>
 80082b8:	f018 030f 	ands.w	r3, r8, #15
 80082bc:	d00a      	beq.n	80082d4 <_strtod_l+0x484>
 80082be:	494d      	ldr	r1, [pc, #308]	; (80083f4 <_strtod_l+0x5a4>)
 80082c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082c4:	4652      	mov	r2, sl
 80082c6:	465b      	mov	r3, fp
 80082c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082cc:	f7f8 f99c 	bl	8000608 <__aeabi_dmul>
 80082d0:	4682      	mov	sl, r0
 80082d2:	468b      	mov	fp, r1
 80082d4:	f038 080f 	bics.w	r8, r8, #15
 80082d8:	d04d      	beq.n	8008376 <_strtod_l+0x526>
 80082da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80082de:	dd22      	ble.n	8008326 <_strtod_l+0x4d6>
 80082e0:	2500      	movs	r5, #0
 80082e2:	462e      	mov	r6, r5
 80082e4:	9509      	str	r5, [sp, #36]	; 0x24
 80082e6:	9507      	str	r5, [sp, #28]
 80082e8:	2322      	movs	r3, #34	; 0x22
 80082ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 80083fc <_strtod_l+0x5ac>
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	f04f 0a00 	mov.w	sl, #0
 80082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f43f adec 	beq.w	8007ed4 <_strtod_l+0x84>
 80082fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80082fe:	4620      	mov	r0, r4
 8008300:	f001 fe84 	bl	800a00c <_Bfree>
 8008304:	9907      	ldr	r1, [sp, #28]
 8008306:	4620      	mov	r0, r4
 8008308:	f001 fe80 	bl	800a00c <_Bfree>
 800830c:	4631      	mov	r1, r6
 800830e:	4620      	mov	r0, r4
 8008310:	f001 fe7c 	bl	800a00c <_Bfree>
 8008314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008316:	4620      	mov	r0, r4
 8008318:	f001 fe78 	bl	800a00c <_Bfree>
 800831c:	4629      	mov	r1, r5
 800831e:	4620      	mov	r0, r4
 8008320:	f001 fe74 	bl	800a00c <_Bfree>
 8008324:	e5d6      	b.n	8007ed4 <_strtod_l+0x84>
 8008326:	2300      	movs	r3, #0
 8008328:	ea4f 1828 	mov.w	r8, r8, asr #4
 800832c:	4650      	mov	r0, sl
 800832e:	4659      	mov	r1, fp
 8008330:	4699      	mov	r9, r3
 8008332:	f1b8 0f01 	cmp.w	r8, #1
 8008336:	dc21      	bgt.n	800837c <_strtod_l+0x52c>
 8008338:	b10b      	cbz	r3, 800833e <_strtod_l+0x4ee>
 800833a:	4682      	mov	sl, r0
 800833c:	468b      	mov	fp, r1
 800833e:	4b2e      	ldr	r3, [pc, #184]	; (80083f8 <_strtod_l+0x5a8>)
 8008340:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008344:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008348:	4652      	mov	r2, sl
 800834a:	465b      	mov	r3, fp
 800834c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008350:	f7f8 f95a 	bl	8000608 <__aeabi_dmul>
 8008354:	4b29      	ldr	r3, [pc, #164]	; (80083fc <_strtod_l+0x5ac>)
 8008356:	460a      	mov	r2, r1
 8008358:	400b      	ands	r3, r1
 800835a:	4929      	ldr	r1, [pc, #164]	; (8008400 <_strtod_l+0x5b0>)
 800835c:	428b      	cmp	r3, r1
 800835e:	4682      	mov	sl, r0
 8008360:	d8be      	bhi.n	80082e0 <_strtod_l+0x490>
 8008362:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008366:	428b      	cmp	r3, r1
 8008368:	bf86      	itte	hi
 800836a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008404 <_strtod_l+0x5b4>
 800836e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008372:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008376:	2300      	movs	r3, #0
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	e081      	b.n	8008480 <_strtod_l+0x630>
 800837c:	f018 0f01 	tst.w	r8, #1
 8008380:	d007      	beq.n	8008392 <_strtod_l+0x542>
 8008382:	4b1d      	ldr	r3, [pc, #116]	; (80083f8 <_strtod_l+0x5a8>)
 8008384:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838c:	f7f8 f93c 	bl	8000608 <__aeabi_dmul>
 8008390:	2301      	movs	r3, #1
 8008392:	f109 0901 	add.w	r9, r9, #1
 8008396:	ea4f 0868 	mov.w	r8, r8, asr #1
 800839a:	e7ca      	b.n	8008332 <_strtod_l+0x4e2>
 800839c:	d0eb      	beq.n	8008376 <_strtod_l+0x526>
 800839e:	f1c8 0800 	rsb	r8, r8, #0
 80083a2:	f018 020f 	ands.w	r2, r8, #15
 80083a6:	d00a      	beq.n	80083be <_strtod_l+0x56e>
 80083a8:	4b12      	ldr	r3, [pc, #72]	; (80083f4 <_strtod_l+0x5a4>)
 80083aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ae:	4650      	mov	r0, sl
 80083b0:	4659      	mov	r1, fp
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	f7f8 fa51 	bl	800085c <__aeabi_ddiv>
 80083ba:	4682      	mov	sl, r0
 80083bc:	468b      	mov	fp, r1
 80083be:	ea5f 1828 	movs.w	r8, r8, asr #4
 80083c2:	d0d8      	beq.n	8008376 <_strtod_l+0x526>
 80083c4:	f1b8 0f1f 	cmp.w	r8, #31
 80083c8:	dd1e      	ble.n	8008408 <_strtod_l+0x5b8>
 80083ca:	2500      	movs	r5, #0
 80083cc:	462e      	mov	r6, r5
 80083ce:	9509      	str	r5, [sp, #36]	; 0x24
 80083d0:	9507      	str	r5, [sp, #28]
 80083d2:	2322      	movs	r3, #34	; 0x22
 80083d4:	f04f 0a00 	mov.w	sl, #0
 80083d8:	f04f 0b00 	mov.w	fp, #0
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	e789      	b.n	80082f4 <_strtod_l+0x4a4>
 80083e0:	0800c23d 	.word	0x0800c23d
 80083e4:	0800c280 	.word	0x0800c280
 80083e8:	0800c235 	.word	0x0800c235
 80083ec:	0800c3c4 	.word	0x0800c3c4
 80083f0:	0800c680 	.word	0x0800c680
 80083f4:	0800c560 	.word	0x0800c560
 80083f8:	0800c538 	.word	0x0800c538
 80083fc:	7ff00000 	.word	0x7ff00000
 8008400:	7ca00000 	.word	0x7ca00000
 8008404:	7fefffff 	.word	0x7fefffff
 8008408:	f018 0310 	ands.w	r3, r8, #16
 800840c:	bf18      	it	ne
 800840e:	236a      	movne	r3, #106	; 0x6a
 8008410:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80087c8 <_strtod_l+0x978>
 8008414:	9304      	str	r3, [sp, #16]
 8008416:	4650      	mov	r0, sl
 8008418:	4659      	mov	r1, fp
 800841a:	2300      	movs	r3, #0
 800841c:	f018 0f01 	tst.w	r8, #1
 8008420:	d004      	beq.n	800842c <_strtod_l+0x5dc>
 8008422:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008426:	f7f8 f8ef 	bl	8000608 <__aeabi_dmul>
 800842a:	2301      	movs	r3, #1
 800842c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008430:	f109 0908 	add.w	r9, r9, #8
 8008434:	d1f2      	bne.n	800841c <_strtod_l+0x5cc>
 8008436:	b10b      	cbz	r3, 800843c <_strtod_l+0x5ec>
 8008438:	4682      	mov	sl, r0
 800843a:	468b      	mov	fp, r1
 800843c:	9b04      	ldr	r3, [sp, #16]
 800843e:	b1bb      	cbz	r3, 8008470 <_strtod_l+0x620>
 8008440:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008444:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008448:	2b00      	cmp	r3, #0
 800844a:	4659      	mov	r1, fp
 800844c:	dd10      	ble.n	8008470 <_strtod_l+0x620>
 800844e:	2b1f      	cmp	r3, #31
 8008450:	f340 8128 	ble.w	80086a4 <_strtod_l+0x854>
 8008454:	2b34      	cmp	r3, #52	; 0x34
 8008456:	bfde      	ittt	le
 8008458:	3b20      	suble	r3, #32
 800845a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800845e:	fa02 f303 	lslle.w	r3, r2, r3
 8008462:	f04f 0a00 	mov.w	sl, #0
 8008466:	bfcc      	ite	gt
 8008468:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800846c:	ea03 0b01 	andle.w	fp, r3, r1
 8008470:	2200      	movs	r2, #0
 8008472:	2300      	movs	r3, #0
 8008474:	4650      	mov	r0, sl
 8008476:	4659      	mov	r1, fp
 8008478:	f7f8 fb2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800847c:	2800      	cmp	r0, #0
 800847e:	d1a4      	bne.n	80083ca <_strtod_l+0x57a>
 8008480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008486:	462b      	mov	r3, r5
 8008488:	463a      	mov	r2, r7
 800848a:	4620      	mov	r0, r4
 800848c:	f001 fe2a 	bl	800a0e4 <__s2b>
 8008490:	9009      	str	r0, [sp, #36]	; 0x24
 8008492:	2800      	cmp	r0, #0
 8008494:	f43f af24 	beq.w	80082e0 <_strtod_l+0x490>
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	1b9e      	subs	r6, r3, r6
 800849c:	9b08      	ldr	r3, [sp, #32]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	bfb4      	ite	lt
 80084a2:	4633      	movlt	r3, r6
 80084a4:	2300      	movge	r3, #0
 80084a6:	9310      	str	r3, [sp, #64]	; 0x40
 80084a8:	9b08      	ldr	r3, [sp, #32]
 80084aa:	2500      	movs	r5, #0
 80084ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80084b0:	9318      	str	r3, [sp, #96]	; 0x60
 80084b2:	462e      	mov	r6, r5
 80084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b6:	4620      	mov	r0, r4
 80084b8:	6859      	ldr	r1, [r3, #4]
 80084ba:	f001 fd67 	bl	8009f8c <_Balloc>
 80084be:	9007      	str	r0, [sp, #28]
 80084c0:	2800      	cmp	r0, #0
 80084c2:	f43f af11 	beq.w	80082e8 <_strtod_l+0x498>
 80084c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c8:	691a      	ldr	r2, [r3, #16]
 80084ca:	3202      	adds	r2, #2
 80084cc:	f103 010c 	add.w	r1, r3, #12
 80084d0:	0092      	lsls	r2, r2, #2
 80084d2:	300c      	adds	r0, #12
 80084d4:	f7fe fde8 	bl	80070a8 <memcpy>
 80084d8:	ec4b ab10 	vmov	d0, sl, fp
 80084dc:	aa20      	add	r2, sp, #128	; 0x80
 80084de:	a91f      	add	r1, sp, #124	; 0x7c
 80084e0:	4620      	mov	r0, r4
 80084e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80084e6:	f002 f939 	bl	800a75c <__d2b>
 80084ea:	901e      	str	r0, [sp, #120]	; 0x78
 80084ec:	2800      	cmp	r0, #0
 80084ee:	f43f aefb 	beq.w	80082e8 <_strtod_l+0x498>
 80084f2:	2101      	movs	r1, #1
 80084f4:	4620      	mov	r0, r4
 80084f6:	f001 fe8f 	bl	800a218 <__i2b>
 80084fa:	4606      	mov	r6, r0
 80084fc:	2800      	cmp	r0, #0
 80084fe:	f43f aef3 	beq.w	80082e8 <_strtod_l+0x498>
 8008502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008504:	9904      	ldr	r1, [sp, #16]
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfab      	itete	ge
 800850a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800850c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800850e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008510:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008514:	bfac      	ite	ge
 8008516:	eb03 0902 	addge.w	r9, r3, r2
 800851a:	1ad7      	sublt	r7, r2, r3
 800851c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800851e:	eba3 0801 	sub.w	r8, r3, r1
 8008522:	4490      	add	r8, r2
 8008524:	4ba3      	ldr	r3, [pc, #652]	; (80087b4 <_strtod_l+0x964>)
 8008526:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800852a:	4598      	cmp	r8, r3
 800852c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008530:	f280 80cc 	bge.w	80086cc <_strtod_l+0x87c>
 8008534:	eba3 0308 	sub.w	r3, r3, r8
 8008538:	2b1f      	cmp	r3, #31
 800853a:	eba2 0203 	sub.w	r2, r2, r3
 800853e:	f04f 0101 	mov.w	r1, #1
 8008542:	f300 80b6 	bgt.w	80086b2 <_strtod_l+0x862>
 8008546:	fa01 f303 	lsl.w	r3, r1, r3
 800854a:	9311      	str	r3, [sp, #68]	; 0x44
 800854c:	2300      	movs	r3, #0
 800854e:	930c      	str	r3, [sp, #48]	; 0x30
 8008550:	eb09 0802 	add.w	r8, r9, r2
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	45c1      	cmp	r9, r8
 8008558:	4417      	add	r7, r2
 800855a:	441f      	add	r7, r3
 800855c:	464b      	mov	r3, r9
 800855e:	bfa8      	it	ge
 8008560:	4643      	movge	r3, r8
 8008562:	42bb      	cmp	r3, r7
 8008564:	bfa8      	it	ge
 8008566:	463b      	movge	r3, r7
 8008568:	2b00      	cmp	r3, #0
 800856a:	bfc2      	ittt	gt
 800856c:	eba8 0803 	subgt.w	r8, r8, r3
 8008570:	1aff      	subgt	r7, r7, r3
 8008572:	eba9 0903 	subgt.w	r9, r9, r3
 8008576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	dd17      	ble.n	80085ac <_strtod_l+0x75c>
 800857c:	4631      	mov	r1, r6
 800857e:	461a      	mov	r2, r3
 8008580:	4620      	mov	r0, r4
 8008582:	f001 ff05 	bl	800a390 <__pow5mult>
 8008586:	4606      	mov	r6, r0
 8008588:	2800      	cmp	r0, #0
 800858a:	f43f aead 	beq.w	80082e8 <_strtod_l+0x498>
 800858e:	4601      	mov	r1, r0
 8008590:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008592:	4620      	mov	r0, r4
 8008594:	f001 fe56 	bl	800a244 <__multiply>
 8008598:	900f      	str	r0, [sp, #60]	; 0x3c
 800859a:	2800      	cmp	r0, #0
 800859c:	f43f aea4 	beq.w	80082e8 <_strtod_l+0x498>
 80085a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80085a2:	4620      	mov	r0, r4
 80085a4:	f001 fd32 	bl	800a00c <_Bfree>
 80085a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085aa:	931e      	str	r3, [sp, #120]	; 0x78
 80085ac:	f1b8 0f00 	cmp.w	r8, #0
 80085b0:	f300 8091 	bgt.w	80086d6 <_strtod_l+0x886>
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	dd08      	ble.n	80085cc <_strtod_l+0x77c>
 80085ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80085bc:	9907      	ldr	r1, [sp, #28]
 80085be:	4620      	mov	r0, r4
 80085c0:	f001 fee6 	bl	800a390 <__pow5mult>
 80085c4:	9007      	str	r0, [sp, #28]
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f43f ae8e 	beq.w	80082e8 <_strtod_l+0x498>
 80085cc:	2f00      	cmp	r7, #0
 80085ce:	dd08      	ble.n	80085e2 <_strtod_l+0x792>
 80085d0:	9907      	ldr	r1, [sp, #28]
 80085d2:	463a      	mov	r2, r7
 80085d4:	4620      	mov	r0, r4
 80085d6:	f001 ff35 	bl	800a444 <__lshift>
 80085da:	9007      	str	r0, [sp, #28]
 80085dc:	2800      	cmp	r0, #0
 80085de:	f43f ae83 	beq.w	80082e8 <_strtod_l+0x498>
 80085e2:	f1b9 0f00 	cmp.w	r9, #0
 80085e6:	dd08      	ble.n	80085fa <_strtod_l+0x7aa>
 80085e8:	4631      	mov	r1, r6
 80085ea:	464a      	mov	r2, r9
 80085ec:	4620      	mov	r0, r4
 80085ee:	f001 ff29 	bl	800a444 <__lshift>
 80085f2:	4606      	mov	r6, r0
 80085f4:	2800      	cmp	r0, #0
 80085f6:	f43f ae77 	beq.w	80082e8 <_strtod_l+0x498>
 80085fa:	9a07      	ldr	r2, [sp, #28]
 80085fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80085fe:	4620      	mov	r0, r4
 8008600:	f001 ffa8 	bl	800a554 <__mdiff>
 8008604:	4605      	mov	r5, r0
 8008606:	2800      	cmp	r0, #0
 8008608:	f43f ae6e 	beq.w	80082e8 <_strtod_l+0x498>
 800860c:	68c3      	ldr	r3, [r0, #12]
 800860e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008610:	2300      	movs	r3, #0
 8008612:	60c3      	str	r3, [r0, #12]
 8008614:	4631      	mov	r1, r6
 8008616:	f001 ff81 	bl	800a51c <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	da65      	bge.n	80086ea <_strtod_l+0x89a>
 800861e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008620:	ea53 030a 	orrs.w	r3, r3, sl
 8008624:	f040 8087 	bne.w	8008736 <_strtod_l+0x8e6>
 8008628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8082 	bne.w	8008736 <_strtod_l+0x8e6>
 8008632:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008636:	0d1b      	lsrs	r3, r3, #20
 8008638:	051b      	lsls	r3, r3, #20
 800863a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800863e:	d97a      	bls.n	8008736 <_strtod_l+0x8e6>
 8008640:	696b      	ldr	r3, [r5, #20]
 8008642:	b913      	cbnz	r3, 800864a <_strtod_l+0x7fa>
 8008644:	692b      	ldr	r3, [r5, #16]
 8008646:	2b01      	cmp	r3, #1
 8008648:	dd75      	ble.n	8008736 <_strtod_l+0x8e6>
 800864a:	4629      	mov	r1, r5
 800864c:	2201      	movs	r2, #1
 800864e:	4620      	mov	r0, r4
 8008650:	f001 fef8 	bl	800a444 <__lshift>
 8008654:	4631      	mov	r1, r6
 8008656:	4605      	mov	r5, r0
 8008658:	f001 ff60 	bl	800a51c <__mcmp>
 800865c:	2800      	cmp	r0, #0
 800865e:	dd6a      	ble.n	8008736 <_strtod_l+0x8e6>
 8008660:	9904      	ldr	r1, [sp, #16]
 8008662:	4a55      	ldr	r2, [pc, #340]	; (80087b8 <_strtod_l+0x968>)
 8008664:	465b      	mov	r3, fp
 8008666:	2900      	cmp	r1, #0
 8008668:	f000 8085 	beq.w	8008776 <_strtod_l+0x926>
 800866c:	ea02 010b 	and.w	r1, r2, fp
 8008670:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008674:	dc7f      	bgt.n	8008776 <_strtod_l+0x926>
 8008676:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800867a:	f77f aeaa 	ble.w	80083d2 <_strtod_l+0x582>
 800867e:	4a4f      	ldr	r2, [pc, #316]	; (80087bc <_strtod_l+0x96c>)
 8008680:	2300      	movs	r3, #0
 8008682:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008686:	4650      	mov	r0, sl
 8008688:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800868c:	4659      	mov	r1, fp
 800868e:	f7f7 ffbb 	bl	8000608 <__aeabi_dmul>
 8008692:	460b      	mov	r3, r1
 8008694:	4303      	orrs	r3, r0
 8008696:	bf08      	it	eq
 8008698:	2322      	moveq	r3, #34	; 0x22
 800869a:	4682      	mov	sl, r0
 800869c:	468b      	mov	fp, r1
 800869e:	bf08      	it	eq
 80086a0:	6023      	streq	r3, [r4, #0]
 80086a2:	e62b      	b.n	80082fc <_strtod_l+0x4ac>
 80086a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086a8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ac:	ea03 0a0a 	and.w	sl, r3, sl
 80086b0:	e6de      	b.n	8008470 <_strtod_l+0x620>
 80086b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80086b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80086ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80086be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80086c2:	fa01 f308 	lsl.w	r3, r1, r8
 80086c6:	930c      	str	r3, [sp, #48]	; 0x30
 80086c8:	9111      	str	r1, [sp, #68]	; 0x44
 80086ca:	e741      	b.n	8008550 <_strtod_l+0x700>
 80086cc:	2300      	movs	r3, #0
 80086ce:	930c      	str	r3, [sp, #48]	; 0x30
 80086d0:	2301      	movs	r3, #1
 80086d2:	9311      	str	r3, [sp, #68]	; 0x44
 80086d4:	e73c      	b.n	8008550 <_strtod_l+0x700>
 80086d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80086d8:	4642      	mov	r2, r8
 80086da:	4620      	mov	r0, r4
 80086dc:	f001 feb2 	bl	800a444 <__lshift>
 80086e0:	901e      	str	r0, [sp, #120]	; 0x78
 80086e2:	2800      	cmp	r0, #0
 80086e4:	f47f af66 	bne.w	80085b4 <_strtod_l+0x764>
 80086e8:	e5fe      	b.n	80082e8 <_strtod_l+0x498>
 80086ea:	465f      	mov	r7, fp
 80086ec:	d16e      	bne.n	80087cc <_strtod_l+0x97c>
 80086ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086f4:	b342      	cbz	r2, 8008748 <_strtod_l+0x8f8>
 80086f6:	4a32      	ldr	r2, [pc, #200]	; (80087c0 <_strtod_l+0x970>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d128      	bne.n	800874e <_strtod_l+0x8fe>
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	4650      	mov	r0, sl
 8008700:	b1eb      	cbz	r3, 800873e <_strtod_l+0x8ee>
 8008702:	4a2d      	ldr	r2, [pc, #180]	; (80087b8 <_strtod_l+0x968>)
 8008704:	403a      	ands	r2, r7
 8008706:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800870a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800870e:	d819      	bhi.n	8008744 <_strtod_l+0x8f4>
 8008710:	0d12      	lsrs	r2, r2, #20
 8008712:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008716:	fa01 f303 	lsl.w	r3, r1, r3
 800871a:	4298      	cmp	r0, r3
 800871c:	d117      	bne.n	800874e <_strtod_l+0x8fe>
 800871e:	4b29      	ldr	r3, [pc, #164]	; (80087c4 <_strtod_l+0x974>)
 8008720:	429f      	cmp	r7, r3
 8008722:	d102      	bne.n	800872a <_strtod_l+0x8da>
 8008724:	3001      	adds	r0, #1
 8008726:	f43f addf 	beq.w	80082e8 <_strtod_l+0x498>
 800872a:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <_strtod_l+0x968>)
 800872c:	403b      	ands	r3, r7
 800872e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008732:	f04f 0a00 	mov.w	sl, #0
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1a0      	bne.n	800867e <_strtod_l+0x82e>
 800873c:	e5de      	b.n	80082fc <_strtod_l+0x4ac>
 800873e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008742:	e7ea      	b.n	800871a <_strtod_l+0x8ca>
 8008744:	460b      	mov	r3, r1
 8008746:	e7e8      	b.n	800871a <_strtod_l+0x8ca>
 8008748:	ea53 030a 	orrs.w	r3, r3, sl
 800874c:	d088      	beq.n	8008660 <_strtod_l+0x810>
 800874e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008750:	b1db      	cbz	r3, 800878a <_strtod_l+0x93a>
 8008752:	423b      	tst	r3, r7
 8008754:	d0ef      	beq.n	8008736 <_strtod_l+0x8e6>
 8008756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008758:	9a04      	ldr	r2, [sp, #16]
 800875a:	4650      	mov	r0, sl
 800875c:	4659      	mov	r1, fp
 800875e:	b1c3      	cbz	r3, 8008792 <_strtod_l+0x942>
 8008760:	f7ff fb58 	bl	8007e14 <sulp>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800876c:	f7f7 fd96 	bl	800029c <__adddf3>
 8008770:	4682      	mov	sl, r0
 8008772:	468b      	mov	fp, r1
 8008774:	e7df      	b.n	8008736 <_strtod_l+0x8e6>
 8008776:	4013      	ands	r3, r2
 8008778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800877c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008780:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008784:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008788:	e7d5      	b.n	8008736 <_strtod_l+0x8e6>
 800878a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800878c:	ea13 0f0a 	tst.w	r3, sl
 8008790:	e7e0      	b.n	8008754 <_strtod_l+0x904>
 8008792:	f7ff fb3f 	bl	8007e14 <sulp>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800879e:	f7f7 fd7b 	bl	8000298 <__aeabi_dsub>
 80087a2:	2200      	movs	r2, #0
 80087a4:	2300      	movs	r3, #0
 80087a6:	4682      	mov	sl, r0
 80087a8:	468b      	mov	fp, r1
 80087aa:	f7f8 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d0c1      	beq.n	8008736 <_strtod_l+0x8e6>
 80087b2:	e60e      	b.n	80083d2 <_strtod_l+0x582>
 80087b4:	fffffc02 	.word	0xfffffc02
 80087b8:	7ff00000 	.word	0x7ff00000
 80087bc:	39500000 	.word	0x39500000
 80087c0:	000fffff 	.word	0x000fffff
 80087c4:	7fefffff 	.word	0x7fefffff
 80087c8:	0800c298 	.word	0x0800c298
 80087cc:	4631      	mov	r1, r6
 80087ce:	4628      	mov	r0, r5
 80087d0:	f002 f820 	bl	800a814 <__ratio>
 80087d4:	ec59 8b10 	vmov	r8, r9, d0
 80087d8:	ee10 0a10 	vmov	r0, s0
 80087dc:	2200      	movs	r2, #0
 80087de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087e2:	4649      	mov	r1, r9
 80087e4:	f7f8 f98c 	bl	8000b00 <__aeabi_dcmple>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d07c      	beq.n	80088e6 <_strtod_l+0xa96>
 80087ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d04c      	beq.n	800888c <_strtod_l+0xa3c>
 80087f2:	4b95      	ldr	r3, [pc, #596]	; (8008a48 <_strtod_l+0xbf8>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80087fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008a48 <_strtod_l+0xbf8>
 80087fe:	f04f 0800 	mov.w	r8, #0
 8008802:	4b92      	ldr	r3, [pc, #584]	; (8008a4c <_strtod_l+0xbfc>)
 8008804:	403b      	ands	r3, r7
 8008806:	9311      	str	r3, [sp, #68]	; 0x44
 8008808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800880a:	4b91      	ldr	r3, [pc, #580]	; (8008a50 <_strtod_l+0xc00>)
 800880c:	429a      	cmp	r2, r3
 800880e:	f040 80b2 	bne.w	8008976 <_strtod_l+0xb26>
 8008812:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800881a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800881e:	ec4b ab10 	vmov	d0, sl, fp
 8008822:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8008826:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800882a:	f001 ff1b 	bl	800a664 <__ulp>
 800882e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008832:	ec53 2b10 	vmov	r2, r3, d0
 8008836:	f7f7 fee7 	bl	8000608 <__aeabi_dmul>
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	f7f7 fd2d 	bl	800029c <__adddf3>
 8008842:	460b      	mov	r3, r1
 8008844:	4981      	ldr	r1, [pc, #516]	; (8008a4c <_strtod_l+0xbfc>)
 8008846:	4a83      	ldr	r2, [pc, #524]	; (8008a54 <_strtod_l+0xc04>)
 8008848:	4019      	ands	r1, r3
 800884a:	4291      	cmp	r1, r2
 800884c:	4682      	mov	sl, r0
 800884e:	d95e      	bls.n	800890e <_strtod_l+0xabe>
 8008850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008852:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008856:	4293      	cmp	r3, r2
 8008858:	d103      	bne.n	8008862 <_strtod_l+0xa12>
 800885a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885c:	3301      	adds	r3, #1
 800885e:	f43f ad43 	beq.w	80082e8 <_strtod_l+0x498>
 8008862:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008a60 <_strtod_l+0xc10>
 8008866:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800886a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800886c:	4620      	mov	r0, r4
 800886e:	f001 fbcd 	bl	800a00c <_Bfree>
 8008872:	9907      	ldr	r1, [sp, #28]
 8008874:	4620      	mov	r0, r4
 8008876:	f001 fbc9 	bl	800a00c <_Bfree>
 800887a:	4631      	mov	r1, r6
 800887c:	4620      	mov	r0, r4
 800887e:	f001 fbc5 	bl	800a00c <_Bfree>
 8008882:	4629      	mov	r1, r5
 8008884:	4620      	mov	r0, r4
 8008886:	f001 fbc1 	bl	800a00c <_Bfree>
 800888a:	e613      	b.n	80084b4 <_strtod_l+0x664>
 800888c:	f1ba 0f00 	cmp.w	sl, #0
 8008890:	d11b      	bne.n	80088ca <_strtod_l+0xa7a>
 8008892:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008896:	b9f3      	cbnz	r3, 80088d6 <_strtod_l+0xa86>
 8008898:	4b6b      	ldr	r3, [pc, #428]	; (8008a48 <_strtod_l+0xbf8>)
 800889a:	2200      	movs	r2, #0
 800889c:	4640      	mov	r0, r8
 800889e:	4649      	mov	r1, r9
 80088a0:	f7f8 f924 	bl	8000aec <__aeabi_dcmplt>
 80088a4:	b9d0      	cbnz	r0, 80088dc <_strtod_l+0xa8c>
 80088a6:	4640      	mov	r0, r8
 80088a8:	4649      	mov	r1, r9
 80088aa:	4b6b      	ldr	r3, [pc, #428]	; (8008a58 <_strtod_l+0xc08>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	f7f7 feab 	bl	8000608 <__aeabi_dmul>
 80088b2:	4680      	mov	r8, r0
 80088b4:	4689      	mov	r9, r1
 80088b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80088ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80088be:	931b      	str	r3, [sp, #108]	; 0x6c
 80088c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80088c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80088c8:	e79b      	b.n	8008802 <_strtod_l+0x9b2>
 80088ca:	f1ba 0f01 	cmp.w	sl, #1
 80088ce:	d102      	bne.n	80088d6 <_strtod_l+0xa86>
 80088d0:	2f00      	cmp	r7, #0
 80088d2:	f43f ad7e 	beq.w	80083d2 <_strtod_l+0x582>
 80088d6:	4b61      	ldr	r3, [pc, #388]	; (8008a5c <_strtod_l+0xc0c>)
 80088d8:	2200      	movs	r2, #0
 80088da:	e78c      	b.n	80087f6 <_strtod_l+0x9a6>
 80088dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008a58 <_strtod_l+0xc08>
 80088e0:	f04f 0800 	mov.w	r8, #0
 80088e4:	e7e7      	b.n	80088b6 <_strtod_l+0xa66>
 80088e6:	4b5c      	ldr	r3, [pc, #368]	; (8008a58 <_strtod_l+0xc08>)
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	2200      	movs	r2, #0
 80088ee:	f7f7 fe8b 	bl	8000608 <__aeabi_dmul>
 80088f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f4:	4680      	mov	r8, r0
 80088f6:	4689      	mov	r9, r1
 80088f8:	b933      	cbnz	r3, 8008908 <_strtod_l+0xab8>
 80088fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088fe:	9012      	str	r0, [sp, #72]	; 0x48
 8008900:	9313      	str	r3, [sp, #76]	; 0x4c
 8008902:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008906:	e7dd      	b.n	80088c4 <_strtod_l+0xa74>
 8008908:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800890c:	e7f9      	b.n	8008902 <_strtod_l+0xab2>
 800890e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008912:	9b04      	ldr	r3, [sp, #16]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1a8      	bne.n	800886a <_strtod_l+0xa1a>
 8008918:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800891c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800891e:	0d1b      	lsrs	r3, r3, #20
 8008920:	051b      	lsls	r3, r3, #20
 8008922:	429a      	cmp	r2, r3
 8008924:	d1a1      	bne.n	800886a <_strtod_l+0xa1a>
 8008926:	4640      	mov	r0, r8
 8008928:	4649      	mov	r1, r9
 800892a:	f7f8 f9cd 	bl	8000cc8 <__aeabi_d2lz>
 800892e:	f7f7 fe3d 	bl	80005ac <__aeabi_l2d>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4640      	mov	r0, r8
 8008938:	4649      	mov	r1, r9
 800893a:	f7f7 fcad 	bl	8000298 <__aeabi_dsub>
 800893e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008944:	ea43 030a 	orr.w	r3, r3, sl
 8008948:	4313      	orrs	r3, r2
 800894a:	4680      	mov	r8, r0
 800894c:	4689      	mov	r9, r1
 800894e:	d053      	beq.n	80089f8 <_strtod_l+0xba8>
 8008950:	a335      	add	r3, pc, #212	; (adr r3, 8008a28 <_strtod_l+0xbd8>)
 8008952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008956:	f7f8 f8c9 	bl	8000aec <__aeabi_dcmplt>
 800895a:	2800      	cmp	r0, #0
 800895c:	f47f acce 	bne.w	80082fc <_strtod_l+0x4ac>
 8008960:	a333      	add	r3, pc, #204	; (adr r3, 8008a30 <_strtod_l+0xbe0>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	4640      	mov	r0, r8
 8008968:	4649      	mov	r1, r9
 800896a:	f7f8 f8dd 	bl	8000b28 <__aeabi_dcmpgt>
 800896e:	2800      	cmp	r0, #0
 8008970:	f43f af7b 	beq.w	800886a <_strtod_l+0xa1a>
 8008974:	e4c2      	b.n	80082fc <_strtod_l+0x4ac>
 8008976:	9b04      	ldr	r3, [sp, #16]
 8008978:	b333      	cbz	r3, 80089c8 <_strtod_l+0xb78>
 800897a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800897c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008980:	d822      	bhi.n	80089c8 <_strtod_l+0xb78>
 8008982:	a32d      	add	r3, pc, #180	; (adr r3, 8008a38 <_strtod_l+0xbe8>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	4640      	mov	r0, r8
 800898a:	4649      	mov	r1, r9
 800898c:	f7f8 f8b8 	bl	8000b00 <__aeabi_dcmple>
 8008990:	b1a0      	cbz	r0, 80089bc <_strtod_l+0xb6c>
 8008992:	4649      	mov	r1, r9
 8008994:	4640      	mov	r0, r8
 8008996:	f7f8 f90f 	bl	8000bb8 <__aeabi_d2uiz>
 800899a:	2801      	cmp	r0, #1
 800899c:	bf38      	it	cc
 800899e:	2001      	movcc	r0, #1
 80089a0:	f7f7 fdb8 	bl	8000514 <__aeabi_ui2d>
 80089a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089a6:	4680      	mov	r8, r0
 80089a8:	4689      	mov	r9, r1
 80089aa:	bb13      	cbnz	r3, 80089f2 <_strtod_l+0xba2>
 80089ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089b0:	9014      	str	r0, [sp, #80]	; 0x50
 80089b2:	9315      	str	r3, [sp, #84]	; 0x54
 80089b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80089b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80089bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	930d      	str	r3, [sp, #52]	; 0x34
 80089c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80089d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089d4:	f001 fe46 	bl	800a664 <__ulp>
 80089d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089dc:	ec53 2b10 	vmov	r2, r3, d0
 80089e0:	f7f7 fe12 	bl	8000608 <__aeabi_dmul>
 80089e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089e8:	f7f7 fc58 	bl	800029c <__adddf3>
 80089ec:	4682      	mov	sl, r0
 80089ee:	468b      	mov	fp, r1
 80089f0:	e78f      	b.n	8008912 <_strtod_l+0xac2>
 80089f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80089f6:	e7dd      	b.n	80089b4 <_strtod_l+0xb64>
 80089f8:	a311      	add	r3, pc, #68	; (adr r3, 8008a40 <_strtod_l+0xbf0>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f8 f875 	bl	8000aec <__aeabi_dcmplt>
 8008a02:	e7b4      	b.n	800896e <_strtod_l+0xb1e>
 8008a04:	2300      	movs	r3, #0
 8008a06:	930e      	str	r3, [sp, #56]	; 0x38
 8008a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008a0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a0c:	6013      	str	r3, [r2, #0]
 8008a0e:	f7ff ba65 	b.w	8007edc <_strtod_l+0x8c>
 8008a12:	2b65      	cmp	r3, #101	; 0x65
 8008a14:	f43f ab5d 	beq.w	80080d2 <_strtod_l+0x282>
 8008a18:	2b45      	cmp	r3, #69	; 0x45
 8008a1a:	f43f ab5a 	beq.w	80080d2 <_strtod_l+0x282>
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f7ff bb92 	b.w	8008148 <_strtod_l+0x2f8>
 8008a24:	f3af 8000 	nop.w
 8008a28:	94a03595 	.word	0x94a03595
 8008a2c:	3fdfffff 	.word	0x3fdfffff
 8008a30:	35afe535 	.word	0x35afe535
 8008a34:	3fe00000 	.word	0x3fe00000
 8008a38:	ffc00000 	.word	0xffc00000
 8008a3c:	41dfffff 	.word	0x41dfffff
 8008a40:	94a03595 	.word	0x94a03595
 8008a44:	3fcfffff 	.word	0x3fcfffff
 8008a48:	3ff00000 	.word	0x3ff00000
 8008a4c:	7ff00000 	.word	0x7ff00000
 8008a50:	7fe00000 	.word	0x7fe00000
 8008a54:	7c9fffff 	.word	0x7c9fffff
 8008a58:	3fe00000 	.word	0x3fe00000
 8008a5c:	bff00000 	.word	0xbff00000
 8008a60:	7fefffff 	.word	0x7fefffff

08008a64 <_strtod_r>:
 8008a64:	4b01      	ldr	r3, [pc, #4]	; (8008a6c <_strtod_r+0x8>)
 8008a66:	f7ff b9f3 	b.w	8007e50 <_strtod_l>
 8008a6a:	bf00      	nop
 8008a6c:	2000007c 	.word	0x2000007c

08008a70 <_strtol_l.isra.0>:
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a76:	d001      	beq.n	8008a7c <_strtol_l.isra.0+0xc>
 8008a78:	2b24      	cmp	r3, #36	; 0x24
 8008a7a:	d906      	bls.n	8008a8a <_strtol_l.isra.0+0x1a>
 8008a7c:	f7fe faea 	bl	8007054 <__errno>
 8008a80:	2316      	movs	r3, #22
 8008a82:	6003      	str	r3, [r0, #0]
 8008a84:	2000      	movs	r0, #0
 8008a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8a:	4f3a      	ldr	r7, [pc, #232]	; (8008b74 <_strtol_l.isra.0+0x104>)
 8008a8c:	468e      	mov	lr, r1
 8008a8e:	4676      	mov	r6, lr
 8008a90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008a94:	5de5      	ldrb	r5, [r4, r7]
 8008a96:	f015 0508 	ands.w	r5, r5, #8
 8008a9a:	d1f8      	bne.n	8008a8e <_strtol_l.isra.0+0x1e>
 8008a9c:	2c2d      	cmp	r4, #45	; 0x2d
 8008a9e:	d134      	bne.n	8008b0a <_strtol_l.isra.0+0x9a>
 8008aa0:	f89e 4000 	ldrb.w	r4, [lr]
 8008aa4:	f04f 0801 	mov.w	r8, #1
 8008aa8:	f106 0e02 	add.w	lr, r6, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d05c      	beq.n	8008b6a <_strtol_l.isra.0+0xfa>
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	d10c      	bne.n	8008ace <_strtol_l.isra.0+0x5e>
 8008ab4:	2c30      	cmp	r4, #48	; 0x30
 8008ab6:	d10a      	bne.n	8008ace <_strtol_l.isra.0+0x5e>
 8008ab8:	f89e 4000 	ldrb.w	r4, [lr]
 8008abc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ac0:	2c58      	cmp	r4, #88	; 0x58
 8008ac2:	d14d      	bne.n	8008b60 <_strtol_l.isra.0+0xf0>
 8008ac4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008ac8:	2310      	movs	r3, #16
 8008aca:	f10e 0e02 	add.w	lr, lr, #2
 8008ace:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008ad2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8008ad6:	2600      	movs	r6, #0
 8008ad8:	fbbc f9f3 	udiv	r9, ip, r3
 8008adc:	4635      	mov	r5, r6
 8008ade:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ae2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008ae6:	2f09      	cmp	r7, #9
 8008ae8:	d818      	bhi.n	8008b1c <_strtol_l.isra.0+0xac>
 8008aea:	463c      	mov	r4, r7
 8008aec:	42a3      	cmp	r3, r4
 8008aee:	dd24      	ble.n	8008b3a <_strtol_l.isra.0+0xca>
 8008af0:	2e00      	cmp	r6, #0
 8008af2:	db1f      	blt.n	8008b34 <_strtol_l.isra.0+0xc4>
 8008af4:	45a9      	cmp	r9, r5
 8008af6:	d31d      	bcc.n	8008b34 <_strtol_l.isra.0+0xc4>
 8008af8:	d101      	bne.n	8008afe <_strtol_l.isra.0+0x8e>
 8008afa:	45a2      	cmp	sl, r4
 8008afc:	db1a      	blt.n	8008b34 <_strtol_l.isra.0+0xc4>
 8008afe:	fb05 4503 	mla	r5, r5, r3, r4
 8008b02:	2601      	movs	r6, #1
 8008b04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008b08:	e7eb      	b.n	8008ae2 <_strtol_l.isra.0+0x72>
 8008b0a:	2c2b      	cmp	r4, #43	; 0x2b
 8008b0c:	bf08      	it	eq
 8008b0e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008b12:	46a8      	mov	r8, r5
 8008b14:	bf08      	it	eq
 8008b16:	f106 0e02 	addeq.w	lr, r6, #2
 8008b1a:	e7c7      	b.n	8008aac <_strtol_l.isra.0+0x3c>
 8008b1c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008b20:	2f19      	cmp	r7, #25
 8008b22:	d801      	bhi.n	8008b28 <_strtol_l.isra.0+0xb8>
 8008b24:	3c37      	subs	r4, #55	; 0x37
 8008b26:	e7e1      	b.n	8008aec <_strtol_l.isra.0+0x7c>
 8008b28:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008b2c:	2f19      	cmp	r7, #25
 8008b2e:	d804      	bhi.n	8008b3a <_strtol_l.isra.0+0xca>
 8008b30:	3c57      	subs	r4, #87	; 0x57
 8008b32:	e7db      	b.n	8008aec <_strtol_l.isra.0+0x7c>
 8008b34:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008b38:	e7e4      	b.n	8008b04 <_strtol_l.isra.0+0x94>
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	da05      	bge.n	8008b4a <_strtol_l.isra.0+0xda>
 8008b3e:	2322      	movs	r3, #34	; 0x22
 8008b40:	6003      	str	r3, [r0, #0]
 8008b42:	4665      	mov	r5, ip
 8008b44:	b942      	cbnz	r2, 8008b58 <_strtol_l.isra.0+0xe8>
 8008b46:	4628      	mov	r0, r5
 8008b48:	e79d      	b.n	8008a86 <_strtol_l.isra.0+0x16>
 8008b4a:	f1b8 0f00 	cmp.w	r8, #0
 8008b4e:	d000      	beq.n	8008b52 <_strtol_l.isra.0+0xe2>
 8008b50:	426d      	negs	r5, r5
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	d0f7      	beq.n	8008b46 <_strtol_l.isra.0+0xd6>
 8008b56:	b10e      	cbz	r6, 8008b5c <_strtol_l.isra.0+0xec>
 8008b58:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8008b5c:	6011      	str	r1, [r2, #0]
 8008b5e:	e7f2      	b.n	8008b46 <_strtol_l.isra.0+0xd6>
 8008b60:	2430      	movs	r4, #48	; 0x30
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1b3      	bne.n	8008ace <_strtol_l.isra.0+0x5e>
 8008b66:	2308      	movs	r3, #8
 8008b68:	e7b1      	b.n	8008ace <_strtol_l.isra.0+0x5e>
 8008b6a:	2c30      	cmp	r4, #48	; 0x30
 8008b6c:	d0a4      	beq.n	8008ab8 <_strtol_l.isra.0+0x48>
 8008b6e:	230a      	movs	r3, #10
 8008b70:	e7ad      	b.n	8008ace <_strtol_l.isra.0+0x5e>
 8008b72:	bf00      	nop
 8008b74:	0800c2c1 	.word	0x0800c2c1

08008b78 <_strtol_r>:
 8008b78:	f7ff bf7a 	b.w	8008a70 <_strtol_l.isra.0>

08008b7c <quorem>:
 8008b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b80:	6903      	ldr	r3, [r0, #16]
 8008b82:	690c      	ldr	r4, [r1, #16]
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	4607      	mov	r7, r0
 8008b88:	f2c0 8081 	blt.w	8008c8e <quorem+0x112>
 8008b8c:	3c01      	subs	r4, #1
 8008b8e:	f101 0814 	add.w	r8, r1, #20
 8008b92:	f100 0514 	add.w	r5, r0, #20
 8008b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bb4:	d331      	bcc.n	8008c1a <quorem+0x9e>
 8008bb6:	f04f 0e00 	mov.w	lr, #0
 8008bba:	4640      	mov	r0, r8
 8008bbc:	46ac      	mov	ip, r5
 8008bbe:	46f2      	mov	sl, lr
 8008bc0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bc4:	b293      	uxth	r3, r2
 8008bc6:	fb06 e303 	mla	r3, r6, r3, lr
 8008bca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	ebaa 0303 	sub.w	r3, sl, r3
 8008bd4:	0c12      	lsrs	r2, r2, #16
 8008bd6:	f8dc a000 	ldr.w	sl, [ip]
 8008bda:	fb06 e202 	mla	r2, r6, r2, lr
 8008bde:	fa13 f38a 	uxtah	r3, r3, sl
 8008be2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008be6:	fa1f fa82 	uxth.w	sl, r2
 8008bea:	f8dc 2000 	ldr.w	r2, [ip]
 8008bee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008bf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bfc:	4581      	cmp	r9, r0
 8008bfe:	f84c 3b04 	str.w	r3, [ip], #4
 8008c02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c06:	d2db      	bcs.n	8008bc0 <quorem+0x44>
 8008c08:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c0c:	b92b      	cbnz	r3, 8008c1a <quorem+0x9e>
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	3b04      	subs	r3, #4
 8008c12:	429d      	cmp	r5, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	d32e      	bcc.n	8008c76 <quorem+0xfa>
 8008c18:	613c      	str	r4, [r7, #16]
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f001 fc7e 	bl	800a51c <__mcmp>
 8008c20:	2800      	cmp	r0, #0
 8008c22:	db24      	blt.n	8008c6e <quorem+0xf2>
 8008c24:	3601      	adds	r6, #1
 8008c26:	4628      	mov	r0, r5
 8008c28:	f04f 0c00 	mov.w	ip, #0
 8008c2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c30:	f8d0 e000 	ldr.w	lr, [r0]
 8008c34:	b293      	uxth	r3, r2
 8008c36:	ebac 0303 	sub.w	r3, ip, r3
 8008c3a:	0c12      	lsrs	r2, r2, #16
 8008c3c:	fa13 f38e 	uxtah	r3, r3, lr
 8008c40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c4e:	45c1      	cmp	r9, r8
 8008c50:	f840 3b04 	str.w	r3, [r0], #4
 8008c54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c58:	d2e8      	bcs.n	8008c2c <quorem+0xb0>
 8008c5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c62:	b922      	cbnz	r2, 8008c6e <quorem+0xf2>
 8008c64:	3b04      	subs	r3, #4
 8008c66:	429d      	cmp	r5, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	d30a      	bcc.n	8008c82 <quorem+0x106>
 8008c6c:	613c      	str	r4, [r7, #16]
 8008c6e:	4630      	mov	r0, r6
 8008c70:	b003      	add	sp, #12
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	3b04      	subs	r3, #4
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	d1cc      	bne.n	8008c18 <quorem+0x9c>
 8008c7e:	3c01      	subs	r4, #1
 8008c80:	e7c7      	b.n	8008c12 <quorem+0x96>
 8008c82:	6812      	ldr	r2, [r2, #0]
 8008c84:	3b04      	subs	r3, #4
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	d1f0      	bne.n	8008c6c <quorem+0xf0>
 8008c8a:	3c01      	subs	r4, #1
 8008c8c:	e7eb      	b.n	8008c66 <quorem+0xea>
 8008c8e:	2000      	movs	r0, #0
 8008c90:	e7ee      	b.n	8008c70 <quorem+0xf4>
 8008c92:	0000      	movs	r0, r0
 8008c94:	0000      	movs	r0, r0
	...

08008c98 <_dtoa_r>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	ed2d 8b02 	vpush	{d8}
 8008ca0:	ec57 6b10 	vmov	r6, r7, d0
 8008ca4:	b095      	sub	sp, #84	; 0x54
 8008ca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ca8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cac:	9105      	str	r1, [sp, #20]
 8008cae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cb8:	b975      	cbnz	r5, 8008cd8 <_dtoa_r+0x40>
 8008cba:	2010      	movs	r0, #16
 8008cbc:	f001 f94c 	bl	8009f58 <malloc>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6260      	str	r0, [r4, #36]	; 0x24
 8008cc4:	b920      	cbnz	r0, 8008cd0 <_dtoa_r+0x38>
 8008cc6:	4bb2      	ldr	r3, [pc, #712]	; (8008f90 <_dtoa_r+0x2f8>)
 8008cc8:	21ea      	movs	r1, #234	; 0xea
 8008cca:	48b2      	ldr	r0, [pc, #712]	; (8008f94 <_dtoa_r+0x2fc>)
 8008ccc:	f002 f868 	bl	800ada0 <__assert_func>
 8008cd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cd4:	6005      	str	r5, [r0, #0]
 8008cd6:	60c5      	str	r5, [r0, #12]
 8008cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cda:	6819      	ldr	r1, [r3, #0]
 8008cdc:	b151      	cbz	r1, 8008cf4 <_dtoa_r+0x5c>
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	604a      	str	r2, [r1, #4]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	4093      	lsls	r3, r2
 8008ce6:	608b      	str	r3, [r1, #8]
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f001 f98f 	bl	800a00c <_Bfree>
 8008cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	1e3b      	subs	r3, r7, #0
 8008cf6:	bfb9      	ittee	lt
 8008cf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cfc:	9303      	strlt	r3, [sp, #12]
 8008cfe:	2300      	movge	r3, #0
 8008d00:	f8c8 3000 	strge.w	r3, [r8]
 8008d04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008d08:	4ba3      	ldr	r3, [pc, #652]	; (8008f98 <_dtoa_r+0x300>)
 8008d0a:	bfbc      	itt	lt
 8008d0c:	2201      	movlt	r2, #1
 8008d0e:	f8c8 2000 	strlt.w	r2, [r8]
 8008d12:	ea33 0309 	bics.w	r3, r3, r9
 8008d16:	d11b      	bne.n	8008d50 <_dtoa_r+0xb8>
 8008d18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d24:	4333      	orrs	r3, r6
 8008d26:	f000 857a 	beq.w	800981e <_dtoa_r+0xb86>
 8008d2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d2c:	b963      	cbnz	r3, 8008d48 <_dtoa_r+0xb0>
 8008d2e:	4b9b      	ldr	r3, [pc, #620]	; (8008f9c <_dtoa_r+0x304>)
 8008d30:	e024      	b.n	8008d7c <_dtoa_r+0xe4>
 8008d32:	4b9b      	ldr	r3, [pc, #620]	; (8008fa0 <_dtoa_r+0x308>)
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	3308      	adds	r3, #8
 8008d38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	9800      	ldr	r0, [sp, #0]
 8008d3e:	b015      	add	sp, #84	; 0x54
 8008d40:	ecbd 8b02 	vpop	{d8}
 8008d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d48:	4b94      	ldr	r3, [pc, #592]	; (8008f9c <_dtoa_r+0x304>)
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	3303      	adds	r3, #3
 8008d4e:	e7f3      	b.n	8008d38 <_dtoa_r+0xa0>
 8008d50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d54:	2200      	movs	r2, #0
 8008d56:	ec51 0b17 	vmov	r0, r1, d7
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008d60:	f7f7 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d64:	4680      	mov	r8, r0
 8008d66:	b158      	cbz	r0, 8008d80 <_dtoa_r+0xe8>
 8008d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 8551 	beq.w	8009818 <_dtoa_r+0xb80>
 8008d76:	488b      	ldr	r0, [pc, #556]	; (8008fa4 <_dtoa_r+0x30c>)
 8008d78:	6018      	str	r0, [r3, #0]
 8008d7a:	1e43      	subs	r3, r0, #1
 8008d7c:	9300      	str	r3, [sp, #0]
 8008d7e:	e7dd      	b.n	8008d3c <_dtoa_r+0xa4>
 8008d80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008d84:	aa12      	add	r2, sp, #72	; 0x48
 8008d86:	a913      	add	r1, sp, #76	; 0x4c
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f001 fce7 	bl	800a75c <__d2b>
 8008d8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d92:	4683      	mov	fp, r0
 8008d94:	2d00      	cmp	r5, #0
 8008d96:	d07c      	beq.n	8008e92 <_dtoa_r+0x1fa>
 8008d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008d9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008da6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008daa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008dae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008db2:	4b7d      	ldr	r3, [pc, #500]	; (8008fa8 <_dtoa_r+0x310>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fa6d 	bl	8000298 <__aeabi_dsub>
 8008dbe:	a36e      	add	r3, pc, #440	; (adr r3, 8008f78 <_dtoa_r+0x2e0>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f7f7 fc20 	bl	8000608 <__aeabi_dmul>
 8008dc8:	a36d      	add	r3, pc, #436	; (adr r3, 8008f80 <_dtoa_r+0x2e8>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fa65 	bl	800029c <__adddf3>
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	460f      	mov	r7, r1
 8008dd8:	f7f7 fbac 	bl	8000534 <__aeabi_i2d>
 8008ddc:	a36a      	add	r3, pc, #424	; (adr r3, 8008f88 <_dtoa_r+0x2f0>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 fc11 	bl	8000608 <__aeabi_dmul>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4630      	mov	r0, r6
 8008dec:	4639      	mov	r1, r7
 8008dee:	f7f7 fa55 	bl	800029c <__adddf3>
 8008df2:	4606      	mov	r6, r0
 8008df4:	460f      	mov	r7, r1
 8008df6:	f7f7 feb7 	bl	8000b68 <__aeabi_d2iz>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4630      	mov	r0, r6
 8008e02:	4639      	mov	r1, r7
 8008e04:	f7f7 fe72 	bl	8000aec <__aeabi_dcmplt>
 8008e08:	b148      	cbz	r0, 8008e1e <_dtoa_r+0x186>
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	f7f7 fb92 	bl	8000534 <__aeabi_i2d>
 8008e10:	4632      	mov	r2, r6
 8008e12:	463b      	mov	r3, r7
 8008e14:	f7f7 fe60 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e18:	b908      	cbnz	r0, 8008e1e <_dtoa_r+0x186>
 8008e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e1e:	f1ba 0f16 	cmp.w	sl, #22
 8008e22:	d854      	bhi.n	8008ece <_dtoa_r+0x236>
 8008e24:	4b61      	ldr	r3, [pc, #388]	; (8008fac <_dtoa_r+0x314>)
 8008e26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e32:	f7f7 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d04b      	beq.n	8008ed2 <_dtoa_r+0x23a>
 8008e3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e3e:	2300      	movs	r3, #0
 8008e40:	930e      	str	r3, [sp, #56]	; 0x38
 8008e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e44:	1b5d      	subs	r5, r3, r5
 8008e46:	1e6b      	subs	r3, r5, #1
 8008e48:	9304      	str	r3, [sp, #16]
 8008e4a:	bf43      	ittte	mi
 8008e4c:	2300      	movmi	r3, #0
 8008e4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008e52:	9304      	strmi	r3, [sp, #16]
 8008e54:	f04f 0800 	movpl.w	r8, #0
 8008e58:	f1ba 0f00 	cmp.w	sl, #0
 8008e5c:	db3b      	blt.n	8008ed6 <_dtoa_r+0x23e>
 8008e5e:	9b04      	ldr	r3, [sp, #16]
 8008e60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008e64:	4453      	add	r3, sl
 8008e66:	9304      	str	r3, [sp, #16]
 8008e68:	2300      	movs	r3, #0
 8008e6a:	9306      	str	r3, [sp, #24]
 8008e6c:	9b05      	ldr	r3, [sp, #20]
 8008e6e:	2b09      	cmp	r3, #9
 8008e70:	d869      	bhi.n	8008f46 <_dtoa_r+0x2ae>
 8008e72:	2b05      	cmp	r3, #5
 8008e74:	bfc4      	itt	gt
 8008e76:	3b04      	subgt	r3, #4
 8008e78:	9305      	strgt	r3, [sp, #20]
 8008e7a:	9b05      	ldr	r3, [sp, #20]
 8008e7c:	f1a3 0302 	sub.w	r3, r3, #2
 8008e80:	bfcc      	ite	gt
 8008e82:	2500      	movgt	r5, #0
 8008e84:	2501      	movle	r5, #1
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d869      	bhi.n	8008f5e <_dtoa_r+0x2c6>
 8008e8a:	e8df f003 	tbb	[pc, r3]
 8008e8e:	4e2c      	.short	0x4e2c
 8008e90:	5a4c      	.short	0x5a4c
 8008e92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008e96:	441d      	add	r5, r3
 8008e98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	bfc1      	itttt	gt
 8008ea0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ea4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ea8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008eac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008eb0:	bfda      	itte	le
 8008eb2:	f1c3 0320 	rsble	r3, r3, #32
 8008eb6:	fa06 f003 	lslle.w	r0, r6, r3
 8008eba:	4318      	orrgt	r0, r3
 8008ebc:	f7f7 fb2a 	bl	8000514 <__aeabi_ui2d>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	4606      	mov	r6, r0
 8008ec4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ec8:	3d01      	subs	r5, #1
 8008eca:	9310      	str	r3, [sp, #64]	; 0x40
 8008ecc:	e771      	b.n	8008db2 <_dtoa_r+0x11a>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e7b6      	b.n	8008e40 <_dtoa_r+0x1a8>
 8008ed2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ed4:	e7b5      	b.n	8008e42 <_dtoa_r+0x1aa>
 8008ed6:	f1ca 0300 	rsb	r3, sl, #0
 8008eda:	9306      	str	r3, [sp, #24]
 8008edc:	2300      	movs	r3, #0
 8008ede:	eba8 080a 	sub.w	r8, r8, sl
 8008ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ee4:	e7c2      	b.n	8008e6c <_dtoa_r+0x1d4>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9308      	str	r3, [sp, #32]
 8008eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	dc39      	bgt.n	8008f64 <_dtoa_r+0x2cc>
 8008ef0:	f04f 0901 	mov.w	r9, #1
 8008ef4:	f8cd 9004 	str.w	r9, [sp, #4]
 8008ef8:	464b      	mov	r3, r9
 8008efa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008efe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f00:	2200      	movs	r2, #0
 8008f02:	6042      	str	r2, [r0, #4]
 8008f04:	2204      	movs	r2, #4
 8008f06:	f102 0614 	add.w	r6, r2, #20
 8008f0a:	429e      	cmp	r6, r3
 8008f0c:	6841      	ldr	r1, [r0, #4]
 8008f0e:	d92f      	bls.n	8008f70 <_dtoa_r+0x2d8>
 8008f10:	4620      	mov	r0, r4
 8008f12:	f001 f83b 	bl	8009f8c <_Balloc>
 8008f16:	9000      	str	r0, [sp, #0]
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d14b      	bne.n	8008fb4 <_dtoa_r+0x31c>
 8008f1c:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <_dtoa_r+0x318>)
 8008f1e:	4602      	mov	r2, r0
 8008f20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008f24:	e6d1      	b.n	8008cca <_dtoa_r+0x32>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e7de      	b.n	8008ee8 <_dtoa_r+0x250>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	9308      	str	r3, [sp, #32]
 8008f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f30:	eb0a 0903 	add.w	r9, sl, r3
 8008f34:	f109 0301 	add.w	r3, r9, #1
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	9301      	str	r3, [sp, #4]
 8008f3c:	bfb8      	it	lt
 8008f3e:	2301      	movlt	r3, #1
 8008f40:	e7dd      	b.n	8008efe <_dtoa_r+0x266>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e7f2      	b.n	8008f2c <_dtoa_r+0x294>
 8008f46:	2501      	movs	r5, #1
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9305      	str	r3, [sp, #20]
 8008f4c:	9508      	str	r5, [sp, #32]
 8008f4e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f58:	2312      	movs	r3, #18
 8008f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f5c:	e7cf      	b.n	8008efe <_dtoa_r+0x266>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	9308      	str	r3, [sp, #32]
 8008f62:	e7f4      	b.n	8008f4e <_dtoa_r+0x2b6>
 8008f64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008f68:	f8cd 9004 	str.w	r9, [sp, #4]
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	e7c6      	b.n	8008efe <_dtoa_r+0x266>
 8008f70:	3101      	adds	r1, #1
 8008f72:	6041      	str	r1, [r0, #4]
 8008f74:	0052      	lsls	r2, r2, #1
 8008f76:	e7c6      	b.n	8008f06 <_dtoa_r+0x26e>
 8008f78:	636f4361 	.word	0x636f4361
 8008f7c:	3fd287a7 	.word	0x3fd287a7
 8008f80:	8b60c8b3 	.word	0x8b60c8b3
 8008f84:	3fc68a28 	.word	0x3fc68a28
 8008f88:	509f79fb 	.word	0x509f79fb
 8008f8c:	3fd34413 	.word	0x3fd34413
 8008f90:	0800c3ce 	.word	0x0800c3ce
 8008f94:	0800c3e5 	.word	0x0800c3e5
 8008f98:	7ff00000 	.word	0x7ff00000
 8008f9c:	0800c3ca 	.word	0x0800c3ca
 8008fa0:	0800c3c1 	.word	0x0800c3c1
 8008fa4:	0800c241 	.word	0x0800c241
 8008fa8:	3ff80000 	.word	0x3ff80000
 8008fac:	0800c560 	.word	0x0800c560
 8008fb0:	0800c444 	.word	0x0800c444
 8008fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb6:	9a00      	ldr	r2, [sp, #0]
 8008fb8:	601a      	str	r2, [r3, #0]
 8008fba:	9b01      	ldr	r3, [sp, #4]
 8008fbc:	2b0e      	cmp	r3, #14
 8008fbe:	f200 80ad 	bhi.w	800911c <_dtoa_r+0x484>
 8008fc2:	2d00      	cmp	r5, #0
 8008fc4:	f000 80aa 	beq.w	800911c <_dtoa_r+0x484>
 8008fc8:	f1ba 0f00 	cmp.w	sl, #0
 8008fcc:	dd36      	ble.n	800903c <_dtoa_r+0x3a4>
 8008fce:	4ac3      	ldr	r2, [pc, #780]	; (80092dc <_dtoa_r+0x644>)
 8008fd0:	f00a 030f 	and.w	r3, sl, #15
 8008fd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fd8:	ed93 7b00 	vldr	d7, [r3]
 8008fdc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008fe0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008fe4:	eeb0 8a47 	vmov.f32	s16, s14
 8008fe8:	eef0 8a67 	vmov.f32	s17, s15
 8008fec:	d016      	beq.n	800901c <_dtoa_r+0x384>
 8008fee:	4bbc      	ldr	r3, [pc, #752]	; (80092e0 <_dtoa_r+0x648>)
 8008ff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ff8:	f7f7 fc30 	bl	800085c <__aeabi_ddiv>
 8008ffc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009000:	f007 070f 	and.w	r7, r7, #15
 8009004:	2503      	movs	r5, #3
 8009006:	4eb6      	ldr	r6, [pc, #728]	; (80092e0 <_dtoa_r+0x648>)
 8009008:	b957      	cbnz	r7, 8009020 <_dtoa_r+0x388>
 800900a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800900e:	ec53 2b18 	vmov	r2, r3, d8
 8009012:	f7f7 fc23 	bl	800085c <__aeabi_ddiv>
 8009016:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800901a:	e029      	b.n	8009070 <_dtoa_r+0x3d8>
 800901c:	2502      	movs	r5, #2
 800901e:	e7f2      	b.n	8009006 <_dtoa_r+0x36e>
 8009020:	07f9      	lsls	r1, r7, #31
 8009022:	d508      	bpl.n	8009036 <_dtoa_r+0x39e>
 8009024:	ec51 0b18 	vmov	r0, r1, d8
 8009028:	e9d6 2300 	ldrd	r2, r3, [r6]
 800902c:	f7f7 faec 	bl	8000608 <__aeabi_dmul>
 8009030:	ec41 0b18 	vmov	d8, r0, r1
 8009034:	3501      	adds	r5, #1
 8009036:	107f      	asrs	r7, r7, #1
 8009038:	3608      	adds	r6, #8
 800903a:	e7e5      	b.n	8009008 <_dtoa_r+0x370>
 800903c:	f000 80a6 	beq.w	800918c <_dtoa_r+0x4f4>
 8009040:	f1ca 0600 	rsb	r6, sl, #0
 8009044:	4ba5      	ldr	r3, [pc, #660]	; (80092dc <_dtoa_r+0x644>)
 8009046:	4fa6      	ldr	r7, [pc, #664]	; (80092e0 <_dtoa_r+0x648>)
 8009048:	f006 020f 	and.w	r2, r6, #15
 800904c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009054:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009058:	f7f7 fad6 	bl	8000608 <__aeabi_dmul>
 800905c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009060:	1136      	asrs	r6, r6, #4
 8009062:	2300      	movs	r3, #0
 8009064:	2502      	movs	r5, #2
 8009066:	2e00      	cmp	r6, #0
 8009068:	f040 8085 	bne.w	8009176 <_dtoa_r+0x4de>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1d2      	bne.n	8009016 <_dtoa_r+0x37e>
 8009070:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 808c 	beq.w	8009190 <_dtoa_r+0x4f8>
 8009078:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800907c:	4b99      	ldr	r3, [pc, #612]	; (80092e4 <_dtoa_r+0x64c>)
 800907e:	2200      	movs	r2, #0
 8009080:	4630      	mov	r0, r6
 8009082:	4639      	mov	r1, r7
 8009084:	f7f7 fd32 	bl	8000aec <__aeabi_dcmplt>
 8009088:	2800      	cmp	r0, #0
 800908a:	f000 8081 	beq.w	8009190 <_dtoa_r+0x4f8>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d07d      	beq.n	8009190 <_dtoa_r+0x4f8>
 8009094:	f1b9 0f00 	cmp.w	r9, #0
 8009098:	dd3c      	ble.n	8009114 <_dtoa_r+0x47c>
 800909a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800909e:	9307      	str	r3, [sp, #28]
 80090a0:	2200      	movs	r2, #0
 80090a2:	4b91      	ldr	r3, [pc, #580]	; (80092e8 <_dtoa_r+0x650>)
 80090a4:	4630      	mov	r0, r6
 80090a6:	4639      	mov	r1, r7
 80090a8:	f7f7 faae 	bl	8000608 <__aeabi_dmul>
 80090ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090b0:	3501      	adds	r5, #1
 80090b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80090b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090ba:	4628      	mov	r0, r5
 80090bc:	f7f7 fa3a 	bl	8000534 <__aeabi_i2d>
 80090c0:	4632      	mov	r2, r6
 80090c2:	463b      	mov	r3, r7
 80090c4:	f7f7 faa0 	bl	8000608 <__aeabi_dmul>
 80090c8:	4b88      	ldr	r3, [pc, #544]	; (80092ec <_dtoa_r+0x654>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	f7f7 f8e6 	bl	800029c <__adddf3>
 80090d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d8:	9303      	str	r3, [sp, #12]
 80090da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d15c      	bne.n	800919a <_dtoa_r+0x502>
 80090e0:	4b83      	ldr	r3, [pc, #524]	; (80092f0 <_dtoa_r+0x658>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 f8d6 	bl	8000298 <__aeabi_dsub>
 80090ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090f0:	4606      	mov	r6, r0
 80090f2:	460f      	mov	r7, r1
 80090f4:	f7f7 fd18 	bl	8000b28 <__aeabi_dcmpgt>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	f040 8296 	bne.w	800962a <_dtoa_r+0x992>
 80090fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009102:	4630      	mov	r0, r6
 8009104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009108:	4639      	mov	r1, r7
 800910a:	f7f7 fcef 	bl	8000aec <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	f040 8288 	bne.w	8009624 <_dtoa_r+0x98c>
 8009114:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009118:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800911c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800911e:	2b00      	cmp	r3, #0
 8009120:	f2c0 8158 	blt.w	80093d4 <_dtoa_r+0x73c>
 8009124:	f1ba 0f0e 	cmp.w	sl, #14
 8009128:	f300 8154 	bgt.w	80093d4 <_dtoa_r+0x73c>
 800912c:	4b6b      	ldr	r3, [pc, #428]	; (80092dc <_dtoa_r+0x644>)
 800912e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009132:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009138:	2b00      	cmp	r3, #0
 800913a:	f280 80e3 	bge.w	8009304 <_dtoa_r+0x66c>
 800913e:	9b01      	ldr	r3, [sp, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f300 80df 	bgt.w	8009304 <_dtoa_r+0x66c>
 8009146:	f040 826d 	bne.w	8009624 <_dtoa_r+0x98c>
 800914a:	4b69      	ldr	r3, [pc, #420]	; (80092f0 <_dtoa_r+0x658>)
 800914c:	2200      	movs	r2, #0
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 fa59 	bl	8000608 <__aeabi_dmul>
 8009156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800915a:	f7f7 fcdb 	bl	8000b14 <__aeabi_dcmpge>
 800915e:	9e01      	ldr	r6, [sp, #4]
 8009160:	4637      	mov	r7, r6
 8009162:	2800      	cmp	r0, #0
 8009164:	f040 8243 	bne.w	80095ee <_dtoa_r+0x956>
 8009168:	9d00      	ldr	r5, [sp, #0]
 800916a:	2331      	movs	r3, #49	; 0x31
 800916c:	f805 3b01 	strb.w	r3, [r5], #1
 8009170:	f10a 0a01 	add.w	sl, sl, #1
 8009174:	e23f      	b.n	80095f6 <_dtoa_r+0x95e>
 8009176:	07f2      	lsls	r2, r6, #31
 8009178:	d505      	bpl.n	8009186 <_dtoa_r+0x4ee>
 800917a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800917e:	f7f7 fa43 	bl	8000608 <__aeabi_dmul>
 8009182:	3501      	adds	r5, #1
 8009184:	2301      	movs	r3, #1
 8009186:	1076      	asrs	r6, r6, #1
 8009188:	3708      	adds	r7, #8
 800918a:	e76c      	b.n	8009066 <_dtoa_r+0x3ce>
 800918c:	2502      	movs	r5, #2
 800918e:	e76f      	b.n	8009070 <_dtoa_r+0x3d8>
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	f8cd a01c 	str.w	sl, [sp, #28]
 8009196:	930c      	str	r3, [sp, #48]	; 0x30
 8009198:	e78d      	b.n	80090b6 <_dtoa_r+0x41e>
 800919a:	9900      	ldr	r1, [sp, #0]
 800919c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800919e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091a0:	4b4e      	ldr	r3, [pc, #312]	; (80092dc <_dtoa_r+0x644>)
 80091a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091a6:	4401      	add	r1, r0
 80091a8:	9102      	str	r1, [sp, #8]
 80091aa:	9908      	ldr	r1, [sp, #32]
 80091ac:	eeb0 8a47 	vmov.f32	s16, s14
 80091b0:	eef0 8a67 	vmov.f32	s17, s15
 80091b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091bc:	2900      	cmp	r1, #0
 80091be:	d045      	beq.n	800924c <_dtoa_r+0x5b4>
 80091c0:	494c      	ldr	r1, [pc, #304]	; (80092f4 <_dtoa_r+0x65c>)
 80091c2:	2000      	movs	r0, #0
 80091c4:	f7f7 fb4a 	bl	800085c <__aeabi_ddiv>
 80091c8:	ec53 2b18 	vmov	r2, r3, d8
 80091cc:	f7f7 f864 	bl	8000298 <__aeabi_dsub>
 80091d0:	9d00      	ldr	r5, [sp, #0]
 80091d2:	ec41 0b18 	vmov	d8, r0, r1
 80091d6:	4639      	mov	r1, r7
 80091d8:	4630      	mov	r0, r6
 80091da:	f7f7 fcc5 	bl	8000b68 <__aeabi_d2iz>
 80091de:	900c      	str	r0, [sp, #48]	; 0x30
 80091e0:	f7f7 f9a8 	bl	8000534 <__aeabi_i2d>
 80091e4:	4602      	mov	r2, r0
 80091e6:	460b      	mov	r3, r1
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 f854 	bl	8000298 <__aeabi_dsub>
 80091f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091f2:	3330      	adds	r3, #48	; 0x30
 80091f4:	f805 3b01 	strb.w	r3, [r5], #1
 80091f8:	ec53 2b18 	vmov	r2, r3, d8
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	f7f7 fc74 	bl	8000aec <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	d165      	bne.n	80092d4 <_dtoa_r+0x63c>
 8009208:	4632      	mov	r2, r6
 800920a:	463b      	mov	r3, r7
 800920c:	4935      	ldr	r1, [pc, #212]	; (80092e4 <_dtoa_r+0x64c>)
 800920e:	2000      	movs	r0, #0
 8009210:	f7f7 f842 	bl	8000298 <__aeabi_dsub>
 8009214:	ec53 2b18 	vmov	r2, r3, d8
 8009218:	f7f7 fc68 	bl	8000aec <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	f040 80b9 	bne.w	8009394 <_dtoa_r+0x6fc>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	429d      	cmp	r5, r3
 8009226:	f43f af75 	beq.w	8009114 <_dtoa_r+0x47c>
 800922a:	4b2f      	ldr	r3, [pc, #188]	; (80092e8 <_dtoa_r+0x650>)
 800922c:	ec51 0b18 	vmov	r0, r1, d8
 8009230:	2200      	movs	r2, #0
 8009232:	f7f7 f9e9 	bl	8000608 <__aeabi_dmul>
 8009236:	4b2c      	ldr	r3, [pc, #176]	; (80092e8 <_dtoa_r+0x650>)
 8009238:	ec41 0b18 	vmov	d8, r0, r1
 800923c:	2200      	movs	r2, #0
 800923e:	4630      	mov	r0, r6
 8009240:	4639      	mov	r1, r7
 8009242:	f7f7 f9e1 	bl	8000608 <__aeabi_dmul>
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	e7c4      	b.n	80091d6 <_dtoa_r+0x53e>
 800924c:	ec51 0b17 	vmov	r0, r1, d7
 8009250:	f7f7 f9da 	bl	8000608 <__aeabi_dmul>
 8009254:	9b02      	ldr	r3, [sp, #8]
 8009256:	9d00      	ldr	r5, [sp, #0]
 8009258:	930c      	str	r3, [sp, #48]	; 0x30
 800925a:	ec41 0b18 	vmov	d8, r0, r1
 800925e:	4639      	mov	r1, r7
 8009260:	4630      	mov	r0, r6
 8009262:	f7f7 fc81 	bl	8000b68 <__aeabi_d2iz>
 8009266:	9011      	str	r0, [sp, #68]	; 0x44
 8009268:	f7f7 f964 	bl	8000534 <__aeabi_i2d>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 f810 	bl	8000298 <__aeabi_dsub>
 8009278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800927a:	3330      	adds	r3, #48	; 0x30
 800927c:	f805 3b01 	strb.w	r3, [r5], #1
 8009280:	9b02      	ldr	r3, [sp, #8]
 8009282:	429d      	cmp	r5, r3
 8009284:	4606      	mov	r6, r0
 8009286:	460f      	mov	r7, r1
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	d134      	bne.n	80092f8 <_dtoa_r+0x660>
 800928e:	4b19      	ldr	r3, [pc, #100]	; (80092f4 <_dtoa_r+0x65c>)
 8009290:	ec51 0b18 	vmov	r0, r1, d8
 8009294:	f7f7 f802 	bl	800029c <__adddf3>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4630      	mov	r0, r6
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f7 fc42 	bl	8000b28 <__aeabi_dcmpgt>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d175      	bne.n	8009394 <_dtoa_r+0x6fc>
 80092a8:	ec53 2b18 	vmov	r2, r3, d8
 80092ac:	4911      	ldr	r1, [pc, #68]	; (80092f4 <_dtoa_r+0x65c>)
 80092ae:	2000      	movs	r0, #0
 80092b0:	f7f6 fff2 	bl	8000298 <__aeabi_dsub>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4630      	mov	r0, r6
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 fc16 	bl	8000aec <__aeabi_dcmplt>
 80092c0:	2800      	cmp	r0, #0
 80092c2:	f43f af27 	beq.w	8009114 <_dtoa_r+0x47c>
 80092c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092c8:	1e6b      	subs	r3, r5, #1
 80092ca:	930c      	str	r3, [sp, #48]	; 0x30
 80092cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092d0:	2b30      	cmp	r3, #48	; 0x30
 80092d2:	d0f8      	beq.n	80092c6 <_dtoa_r+0x62e>
 80092d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80092d8:	e04a      	b.n	8009370 <_dtoa_r+0x6d8>
 80092da:	bf00      	nop
 80092dc:	0800c560 	.word	0x0800c560
 80092e0:	0800c538 	.word	0x0800c538
 80092e4:	3ff00000 	.word	0x3ff00000
 80092e8:	40240000 	.word	0x40240000
 80092ec:	401c0000 	.word	0x401c0000
 80092f0:	40140000 	.word	0x40140000
 80092f4:	3fe00000 	.word	0x3fe00000
 80092f8:	4baf      	ldr	r3, [pc, #700]	; (80095b8 <_dtoa_r+0x920>)
 80092fa:	f7f7 f985 	bl	8000608 <__aeabi_dmul>
 80092fe:	4606      	mov	r6, r0
 8009300:	460f      	mov	r7, r1
 8009302:	e7ac      	b.n	800925e <_dtoa_r+0x5c6>
 8009304:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009308:	9d00      	ldr	r5, [sp, #0]
 800930a:	4642      	mov	r2, r8
 800930c:	464b      	mov	r3, r9
 800930e:	4630      	mov	r0, r6
 8009310:	4639      	mov	r1, r7
 8009312:	f7f7 faa3 	bl	800085c <__aeabi_ddiv>
 8009316:	f7f7 fc27 	bl	8000b68 <__aeabi_d2iz>
 800931a:	9002      	str	r0, [sp, #8]
 800931c:	f7f7 f90a 	bl	8000534 <__aeabi_i2d>
 8009320:	4642      	mov	r2, r8
 8009322:	464b      	mov	r3, r9
 8009324:	f7f7 f970 	bl	8000608 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f6 ffb2 	bl	8000298 <__aeabi_dsub>
 8009334:	9e02      	ldr	r6, [sp, #8]
 8009336:	9f01      	ldr	r7, [sp, #4]
 8009338:	3630      	adds	r6, #48	; 0x30
 800933a:	f805 6b01 	strb.w	r6, [r5], #1
 800933e:	9e00      	ldr	r6, [sp, #0]
 8009340:	1bae      	subs	r6, r5, r6
 8009342:	42b7      	cmp	r7, r6
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	d137      	bne.n	80093ba <_dtoa_r+0x722>
 800934a:	f7f6 ffa7 	bl	800029c <__adddf3>
 800934e:	4642      	mov	r2, r8
 8009350:	464b      	mov	r3, r9
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	f7f7 fbe7 	bl	8000b28 <__aeabi_dcmpgt>
 800935a:	b9c8      	cbnz	r0, 8009390 <_dtoa_r+0x6f8>
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	4630      	mov	r0, r6
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 fbb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009368:	b110      	cbz	r0, 8009370 <_dtoa_r+0x6d8>
 800936a:	9b02      	ldr	r3, [sp, #8]
 800936c:	07d9      	lsls	r1, r3, #31
 800936e:	d40f      	bmi.n	8009390 <_dtoa_r+0x6f8>
 8009370:	4620      	mov	r0, r4
 8009372:	4659      	mov	r1, fp
 8009374:	f000 fe4a 	bl	800a00c <_Bfree>
 8009378:	2300      	movs	r3, #0
 800937a:	702b      	strb	r3, [r5, #0]
 800937c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800937e:	f10a 0001 	add.w	r0, sl, #1
 8009382:	6018      	str	r0, [r3, #0]
 8009384:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009386:	2b00      	cmp	r3, #0
 8009388:	f43f acd8 	beq.w	8008d3c <_dtoa_r+0xa4>
 800938c:	601d      	str	r5, [r3, #0]
 800938e:	e4d5      	b.n	8008d3c <_dtoa_r+0xa4>
 8009390:	f8cd a01c 	str.w	sl, [sp, #28]
 8009394:	462b      	mov	r3, r5
 8009396:	461d      	mov	r5, r3
 8009398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800939c:	2a39      	cmp	r2, #57	; 0x39
 800939e:	d108      	bne.n	80093b2 <_dtoa_r+0x71a>
 80093a0:	9a00      	ldr	r2, [sp, #0]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d1f7      	bne.n	8009396 <_dtoa_r+0x6fe>
 80093a6:	9a07      	ldr	r2, [sp, #28]
 80093a8:	9900      	ldr	r1, [sp, #0]
 80093aa:	3201      	adds	r2, #1
 80093ac:	9207      	str	r2, [sp, #28]
 80093ae:	2230      	movs	r2, #48	; 0x30
 80093b0:	700a      	strb	r2, [r1, #0]
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	3201      	adds	r2, #1
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e78c      	b.n	80092d4 <_dtoa_r+0x63c>
 80093ba:	4b7f      	ldr	r3, [pc, #508]	; (80095b8 <_dtoa_r+0x920>)
 80093bc:	2200      	movs	r2, #0
 80093be:	f7f7 f923 	bl	8000608 <__aeabi_dmul>
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	4606      	mov	r6, r0
 80093c8:	460f      	mov	r7, r1
 80093ca:	f7f7 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d09b      	beq.n	800930a <_dtoa_r+0x672>
 80093d2:	e7cd      	b.n	8009370 <_dtoa_r+0x6d8>
 80093d4:	9a08      	ldr	r2, [sp, #32]
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	f000 80c4 	beq.w	8009564 <_dtoa_r+0x8cc>
 80093dc:	9a05      	ldr	r2, [sp, #20]
 80093de:	2a01      	cmp	r2, #1
 80093e0:	f300 80a8 	bgt.w	8009534 <_dtoa_r+0x89c>
 80093e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	f000 80a0 	beq.w	800952c <_dtoa_r+0x894>
 80093ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093f0:	9e06      	ldr	r6, [sp, #24]
 80093f2:	4645      	mov	r5, r8
 80093f4:	9a04      	ldr	r2, [sp, #16]
 80093f6:	2101      	movs	r1, #1
 80093f8:	441a      	add	r2, r3
 80093fa:	4620      	mov	r0, r4
 80093fc:	4498      	add	r8, r3
 80093fe:	9204      	str	r2, [sp, #16]
 8009400:	f000 ff0a 	bl	800a218 <__i2b>
 8009404:	4607      	mov	r7, r0
 8009406:	2d00      	cmp	r5, #0
 8009408:	dd0b      	ble.n	8009422 <_dtoa_r+0x78a>
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd08      	ble.n	8009422 <_dtoa_r+0x78a>
 8009410:	42ab      	cmp	r3, r5
 8009412:	9a04      	ldr	r2, [sp, #16]
 8009414:	bfa8      	it	ge
 8009416:	462b      	movge	r3, r5
 8009418:	eba8 0803 	sub.w	r8, r8, r3
 800941c:	1aed      	subs	r5, r5, r3
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	9b06      	ldr	r3, [sp, #24]
 8009424:	b1fb      	cbz	r3, 8009466 <_dtoa_r+0x7ce>
 8009426:	9b08      	ldr	r3, [sp, #32]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 809f 	beq.w	800956c <_dtoa_r+0x8d4>
 800942e:	2e00      	cmp	r6, #0
 8009430:	dd11      	ble.n	8009456 <_dtoa_r+0x7be>
 8009432:	4639      	mov	r1, r7
 8009434:	4632      	mov	r2, r6
 8009436:	4620      	mov	r0, r4
 8009438:	f000 ffaa 	bl	800a390 <__pow5mult>
 800943c:	465a      	mov	r2, fp
 800943e:	4601      	mov	r1, r0
 8009440:	4607      	mov	r7, r0
 8009442:	4620      	mov	r0, r4
 8009444:	f000 fefe 	bl	800a244 <__multiply>
 8009448:	4659      	mov	r1, fp
 800944a:	9007      	str	r0, [sp, #28]
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fddd 	bl	800a00c <_Bfree>
 8009452:	9b07      	ldr	r3, [sp, #28]
 8009454:	469b      	mov	fp, r3
 8009456:	9b06      	ldr	r3, [sp, #24]
 8009458:	1b9a      	subs	r2, r3, r6
 800945a:	d004      	beq.n	8009466 <_dtoa_r+0x7ce>
 800945c:	4659      	mov	r1, fp
 800945e:	4620      	mov	r0, r4
 8009460:	f000 ff96 	bl	800a390 <__pow5mult>
 8009464:	4683      	mov	fp, r0
 8009466:	2101      	movs	r1, #1
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fed5 	bl	800a218 <__i2b>
 800946e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009470:	2b00      	cmp	r3, #0
 8009472:	4606      	mov	r6, r0
 8009474:	dd7c      	ble.n	8009570 <_dtoa_r+0x8d8>
 8009476:	461a      	mov	r2, r3
 8009478:	4601      	mov	r1, r0
 800947a:	4620      	mov	r0, r4
 800947c:	f000 ff88 	bl	800a390 <__pow5mult>
 8009480:	9b05      	ldr	r3, [sp, #20]
 8009482:	2b01      	cmp	r3, #1
 8009484:	4606      	mov	r6, r0
 8009486:	dd76      	ble.n	8009576 <_dtoa_r+0x8de>
 8009488:	2300      	movs	r3, #0
 800948a:	9306      	str	r3, [sp, #24]
 800948c:	6933      	ldr	r3, [r6, #16]
 800948e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009492:	6918      	ldr	r0, [r3, #16]
 8009494:	f000 fe70 	bl	800a178 <__hi0bits>
 8009498:	f1c0 0020 	rsb	r0, r0, #32
 800949c:	9b04      	ldr	r3, [sp, #16]
 800949e:	4418      	add	r0, r3
 80094a0:	f010 001f 	ands.w	r0, r0, #31
 80094a4:	f000 8086 	beq.w	80095b4 <_dtoa_r+0x91c>
 80094a8:	f1c0 0320 	rsb	r3, r0, #32
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	dd7f      	ble.n	80095b0 <_dtoa_r+0x918>
 80094b0:	f1c0 001c 	rsb	r0, r0, #28
 80094b4:	9b04      	ldr	r3, [sp, #16]
 80094b6:	4403      	add	r3, r0
 80094b8:	4480      	add	r8, r0
 80094ba:	4405      	add	r5, r0
 80094bc:	9304      	str	r3, [sp, #16]
 80094be:	f1b8 0f00 	cmp.w	r8, #0
 80094c2:	dd05      	ble.n	80094d0 <_dtoa_r+0x838>
 80094c4:	4659      	mov	r1, fp
 80094c6:	4642      	mov	r2, r8
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 ffbb 	bl	800a444 <__lshift>
 80094ce:	4683      	mov	fp, r0
 80094d0:	9b04      	ldr	r3, [sp, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dd05      	ble.n	80094e2 <_dtoa_r+0x84a>
 80094d6:	4631      	mov	r1, r6
 80094d8:	461a      	mov	r2, r3
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 ffb2 	bl	800a444 <__lshift>
 80094e0:	4606      	mov	r6, r0
 80094e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d069      	beq.n	80095bc <_dtoa_r+0x924>
 80094e8:	4631      	mov	r1, r6
 80094ea:	4658      	mov	r0, fp
 80094ec:	f001 f816 	bl	800a51c <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	da63      	bge.n	80095bc <_dtoa_r+0x924>
 80094f4:	2300      	movs	r3, #0
 80094f6:	4659      	mov	r1, fp
 80094f8:	220a      	movs	r2, #10
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fda8 	bl	800a050 <__multadd>
 8009500:	9b08      	ldr	r3, [sp, #32]
 8009502:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009506:	4683      	mov	fp, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 818f 	beq.w	800982c <_dtoa_r+0xb94>
 800950e:	4639      	mov	r1, r7
 8009510:	2300      	movs	r3, #0
 8009512:	220a      	movs	r2, #10
 8009514:	4620      	mov	r0, r4
 8009516:	f000 fd9b 	bl	800a050 <__multadd>
 800951a:	f1b9 0f00 	cmp.w	r9, #0
 800951e:	4607      	mov	r7, r0
 8009520:	f300 808e 	bgt.w	8009640 <_dtoa_r+0x9a8>
 8009524:	9b05      	ldr	r3, [sp, #20]
 8009526:	2b02      	cmp	r3, #2
 8009528:	dc50      	bgt.n	80095cc <_dtoa_r+0x934>
 800952a:	e089      	b.n	8009640 <_dtoa_r+0x9a8>
 800952c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800952e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009532:	e75d      	b.n	80093f0 <_dtoa_r+0x758>
 8009534:	9b01      	ldr	r3, [sp, #4]
 8009536:	1e5e      	subs	r6, r3, #1
 8009538:	9b06      	ldr	r3, [sp, #24]
 800953a:	42b3      	cmp	r3, r6
 800953c:	bfbf      	itttt	lt
 800953e:	9b06      	ldrlt	r3, [sp, #24]
 8009540:	9606      	strlt	r6, [sp, #24]
 8009542:	1af2      	sublt	r2, r6, r3
 8009544:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009546:	bfb6      	itet	lt
 8009548:	189b      	addlt	r3, r3, r2
 800954a:	1b9e      	subge	r6, r3, r6
 800954c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	bfb8      	it	lt
 8009552:	2600      	movlt	r6, #0
 8009554:	2b00      	cmp	r3, #0
 8009556:	bfb5      	itete	lt
 8009558:	eba8 0503 	sublt.w	r5, r8, r3
 800955c:	9b01      	ldrge	r3, [sp, #4]
 800955e:	2300      	movlt	r3, #0
 8009560:	4645      	movge	r5, r8
 8009562:	e747      	b.n	80093f4 <_dtoa_r+0x75c>
 8009564:	9e06      	ldr	r6, [sp, #24]
 8009566:	9f08      	ldr	r7, [sp, #32]
 8009568:	4645      	mov	r5, r8
 800956a:	e74c      	b.n	8009406 <_dtoa_r+0x76e>
 800956c:	9a06      	ldr	r2, [sp, #24]
 800956e:	e775      	b.n	800945c <_dtoa_r+0x7c4>
 8009570:	9b05      	ldr	r3, [sp, #20]
 8009572:	2b01      	cmp	r3, #1
 8009574:	dc18      	bgt.n	80095a8 <_dtoa_r+0x910>
 8009576:	9b02      	ldr	r3, [sp, #8]
 8009578:	b9b3      	cbnz	r3, 80095a8 <_dtoa_r+0x910>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009580:	b9a3      	cbnz	r3, 80095ac <_dtoa_r+0x914>
 8009582:	9b03      	ldr	r3, [sp, #12]
 8009584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009588:	0d1b      	lsrs	r3, r3, #20
 800958a:	051b      	lsls	r3, r3, #20
 800958c:	b12b      	cbz	r3, 800959a <_dtoa_r+0x902>
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	3301      	adds	r3, #1
 8009592:	9304      	str	r3, [sp, #16]
 8009594:	f108 0801 	add.w	r8, r8, #1
 8009598:	2301      	movs	r3, #1
 800959a:	9306      	str	r3, [sp, #24]
 800959c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f47f af74 	bne.w	800948c <_dtoa_r+0x7f4>
 80095a4:	2001      	movs	r0, #1
 80095a6:	e779      	b.n	800949c <_dtoa_r+0x804>
 80095a8:	2300      	movs	r3, #0
 80095aa:	e7f6      	b.n	800959a <_dtoa_r+0x902>
 80095ac:	9b02      	ldr	r3, [sp, #8]
 80095ae:	e7f4      	b.n	800959a <_dtoa_r+0x902>
 80095b0:	d085      	beq.n	80094be <_dtoa_r+0x826>
 80095b2:	4618      	mov	r0, r3
 80095b4:	301c      	adds	r0, #28
 80095b6:	e77d      	b.n	80094b4 <_dtoa_r+0x81c>
 80095b8:	40240000 	.word	0x40240000
 80095bc:	9b01      	ldr	r3, [sp, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	dc38      	bgt.n	8009634 <_dtoa_r+0x99c>
 80095c2:	9b05      	ldr	r3, [sp, #20]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	dd35      	ble.n	8009634 <_dtoa_r+0x99c>
 80095c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80095cc:	f1b9 0f00 	cmp.w	r9, #0
 80095d0:	d10d      	bne.n	80095ee <_dtoa_r+0x956>
 80095d2:	4631      	mov	r1, r6
 80095d4:	464b      	mov	r3, r9
 80095d6:	2205      	movs	r2, #5
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 fd39 	bl	800a050 <__multadd>
 80095de:	4601      	mov	r1, r0
 80095e0:	4606      	mov	r6, r0
 80095e2:	4658      	mov	r0, fp
 80095e4:	f000 ff9a 	bl	800a51c <__mcmp>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	f73f adbd 	bgt.w	8009168 <_dtoa_r+0x4d0>
 80095ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f0:	9d00      	ldr	r5, [sp, #0]
 80095f2:	ea6f 0a03 	mvn.w	sl, r3
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	4631      	mov	r1, r6
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 fd05 	bl	800a00c <_Bfree>
 8009602:	2f00      	cmp	r7, #0
 8009604:	f43f aeb4 	beq.w	8009370 <_dtoa_r+0x6d8>
 8009608:	f1b8 0f00 	cmp.w	r8, #0
 800960c:	d005      	beq.n	800961a <_dtoa_r+0x982>
 800960e:	45b8      	cmp	r8, r7
 8009610:	d003      	beq.n	800961a <_dtoa_r+0x982>
 8009612:	4641      	mov	r1, r8
 8009614:	4620      	mov	r0, r4
 8009616:	f000 fcf9 	bl	800a00c <_Bfree>
 800961a:	4639      	mov	r1, r7
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fcf5 	bl	800a00c <_Bfree>
 8009622:	e6a5      	b.n	8009370 <_dtoa_r+0x6d8>
 8009624:	2600      	movs	r6, #0
 8009626:	4637      	mov	r7, r6
 8009628:	e7e1      	b.n	80095ee <_dtoa_r+0x956>
 800962a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800962c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009630:	4637      	mov	r7, r6
 8009632:	e599      	b.n	8009168 <_dtoa_r+0x4d0>
 8009634:	9b08      	ldr	r3, [sp, #32]
 8009636:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 80fd 	beq.w	800983a <_dtoa_r+0xba2>
 8009640:	2d00      	cmp	r5, #0
 8009642:	dd05      	ble.n	8009650 <_dtoa_r+0x9b8>
 8009644:	4639      	mov	r1, r7
 8009646:	462a      	mov	r2, r5
 8009648:	4620      	mov	r0, r4
 800964a:	f000 fefb 	bl	800a444 <__lshift>
 800964e:	4607      	mov	r7, r0
 8009650:	9b06      	ldr	r3, [sp, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d05c      	beq.n	8009710 <_dtoa_r+0xa78>
 8009656:	6879      	ldr	r1, [r7, #4]
 8009658:	4620      	mov	r0, r4
 800965a:	f000 fc97 	bl	8009f8c <_Balloc>
 800965e:	4605      	mov	r5, r0
 8009660:	b928      	cbnz	r0, 800966e <_dtoa_r+0x9d6>
 8009662:	4b80      	ldr	r3, [pc, #512]	; (8009864 <_dtoa_r+0xbcc>)
 8009664:	4602      	mov	r2, r0
 8009666:	f240 21ea 	movw	r1, #746	; 0x2ea
 800966a:	f7ff bb2e 	b.w	8008cca <_dtoa_r+0x32>
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	3202      	adds	r2, #2
 8009672:	0092      	lsls	r2, r2, #2
 8009674:	f107 010c 	add.w	r1, r7, #12
 8009678:	300c      	adds	r0, #12
 800967a:	f7fd fd15 	bl	80070a8 <memcpy>
 800967e:	2201      	movs	r2, #1
 8009680:	4629      	mov	r1, r5
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fede 	bl	800a444 <__lshift>
 8009688:	9b00      	ldr	r3, [sp, #0]
 800968a:	3301      	adds	r3, #1
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	444b      	add	r3, r9
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	9b02      	ldr	r3, [sp, #8]
 8009696:	f003 0301 	and.w	r3, r3, #1
 800969a:	46b8      	mov	r8, r7
 800969c:	9306      	str	r3, [sp, #24]
 800969e:	4607      	mov	r7, r0
 80096a0:	9b01      	ldr	r3, [sp, #4]
 80096a2:	4631      	mov	r1, r6
 80096a4:	3b01      	subs	r3, #1
 80096a6:	4658      	mov	r0, fp
 80096a8:	9302      	str	r3, [sp, #8]
 80096aa:	f7ff fa67 	bl	8008b7c <quorem>
 80096ae:	4603      	mov	r3, r0
 80096b0:	3330      	adds	r3, #48	; 0x30
 80096b2:	9004      	str	r0, [sp, #16]
 80096b4:	4641      	mov	r1, r8
 80096b6:	4658      	mov	r0, fp
 80096b8:	9308      	str	r3, [sp, #32]
 80096ba:	f000 ff2f 	bl	800a51c <__mcmp>
 80096be:	463a      	mov	r2, r7
 80096c0:	4681      	mov	r9, r0
 80096c2:	4631      	mov	r1, r6
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 ff45 	bl	800a554 <__mdiff>
 80096ca:	68c2      	ldr	r2, [r0, #12]
 80096cc:	9b08      	ldr	r3, [sp, #32]
 80096ce:	4605      	mov	r5, r0
 80096d0:	bb02      	cbnz	r2, 8009714 <_dtoa_r+0xa7c>
 80096d2:	4601      	mov	r1, r0
 80096d4:	4658      	mov	r0, fp
 80096d6:	f000 ff21 	bl	800a51c <__mcmp>
 80096da:	9b08      	ldr	r3, [sp, #32]
 80096dc:	4602      	mov	r2, r0
 80096de:	4629      	mov	r1, r5
 80096e0:	4620      	mov	r0, r4
 80096e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80096e6:	f000 fc91 	bl	800a00c <_Bfree>
 80096ea:	9b05      	ldr	r3, [sp, #20]
 80096ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ee:	9d01      	ldr	r5, [sp, #4]
 80096f0:	ea43 0102 	orr.w	r1, r3, r2
 80096f4:	9b06      	ldr	r3, [sp, #24]
 80096f6:	430b      	orrs	r3, r1
 80096f8:	9b08      	ldr	r3, [sp, #32]
 80096fa:	d10d      	bne.n	8009718 <_dtoa_r+0xa80>
 80096fc:	2b39      	cmp	r3, #57	; 0x39
 80096fe:	d029      	beq.n	8009754 <_dtoa_r+0xabc>
 8009700:	f1b9 0f00 	cmp.w	r9, #0
 8009704:	dd01      	ble.n	800970a <_dtoa_r+0xa72>
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	3331      	adds	r3, #49	; 0x31
 800970a:	9a02      	ldr	r2, [sp, #8]
 800970c:	7013      	strb	r3, [r2, #0]
 800970e:	e774      	b.n	80095fa <_dtoa_r+0x962>
 8009710:	4638      	mov	r0, r7
 8009712:	e7b9      	b.n	8009688 <_dtoa_r+0x9f0>
 8009714:	2201      	movs	r2, #1
 8009716:	e7e2      	b.n	80096de <_dtoa_r+0xa46>
 8009718:	f1b9 0f00 	cmp.w	r9, #0
 800971c:	db06      	blt.n	800972c <_dtoa_r+0xa94>
 800971e:	9905      	ldr	r1, [sp, #20]
 8009720:	ea41 0909 	orr.w	r9, r1, r9
 8009724:	9906      	ldr	r1, [sp, #24]
 8009726:	ea59 0101 	orrs.w	r1, r9, r1
 800972a:	d120      	bne.n	800976e <_dtoa_r+0xad6>
 800972c:	2a00      	cmp	r2, #0
 800972e:	ddec      	ble.n	800970a <_dtoa_r+0xa72>
 8009730:	4659      	mov	r1, fp
 8009732:	2201      	movs	r2, #1
 8009734:	4620      	mov	r0, r4
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	f000 fe84 	bl	800a444 <__lshift>
 800973c:	4631      	mov	r1, r6
 800973e:	4683      	mov	fp, r0
 8009740:	f000 feec 	bl	800a51c <__mcmp>
 8009744:	2800      	cmp	r0, #0
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	dc02      	bgt.n	8009750 <_dtoa_r+0xab8>
 800974a:	d1de      	bne.n	800970a <_dtoa_r+0xa72>
 800974c:	07da      	lsls	r2, r3, #31
 800974e:	d5dc      	bpl.n	800970a <_dtoa_r+0xa72>
 8009750:	2b39      	cmp	r3, #57	; 0x39
 8009752:	d1d8      	bne.n	8009706 <_dtoa_r+0xa6e>
 8009754:	9a02      	ldr	r2, [sp, #8]
 8009756:	2339      	movs	r3, #57	; 0x39
 8009758:	7013      	strb	r3, [r2, #0]
 800975a:	462b      	mov	r3, r5
 800975c:	461d      	mov	r5, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009764:	2a39      	cmp	r2, #57	; 0x39
 8009766:	d050      	beq.n	800980a <_dtoa_r+0xb72>
 8009768:	3201      	adds	r2, #1
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e745      	b.n	80095fa <_dtoa_r+0x962>
 800976e:	2a00      	cmp	r2, #0
 8009770:	dd03      	ble.n	800977a <_dtoa_r+0xae2>
 8009772:	2b39      	cmp	r3, #57	; 0x39
 8009774:	d0ee      	beq.n	8009754 <_dtoa_r+0xabc>
 8009776:	3301      	adds	r3, #1
 8009778:	e7c7      	b.n	800970a <_dtoa_r+0xa72>
 800977a:	9a01      	ldr	r2, [sp, #4]
 800977c:	9907      	ldr	r1, [sp, #28]
 800977e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009782:	428a      	cmp	r2, r1
 8009784:	d02a      	beq.n	80097dc <_dtoa_r+0xb44>
 8009786:	4659      	mov	r1, fp
 8009788:	2300      	movs	r3, #0
 800978a:	220a      	movs	r2, #10
 800978c:	4620      	mov	r0, r4
 800978e:	f000 fc5f 	bl	800a050 <__multadd>
 8009792:	45b8      	cmp	r8, r7
 8009794:	4683      	mov	fp, r0
 8009796:	f04f 0300 	mov.w	r3, #0
 800979a:	f04f 020a 	mov.w	r2, #10
 800979e:	4641      	mov	r1, r8
 80097a0:	4620      	mov	r0, r4
 80097a2:	d107      	bne.n	80097b4 <_dtoa_r+0xb1c>
 80097a4:	f000 fc54 	bl	800a050 <__multadd>
 80097a8:	4680      	mov	r8, r0
 80097aa:	4607      	mov	r7, r0
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	9301      	str	r3, [sp, #4]
 80097b2:	e775      	b.n	80096a0 <_dtoa_r+0xa08>
 80097b4:	f000 fc4c 	bl	800a050 <__multadd>
 80097b8:	4639      	mov	r1, r7
 80097ba:	4680      	mov	r8, r0
 80097bc:	2300      	movs	r3, #0
 80097be:	220a      	movs	r2, #10
 80097c0:	4620      	mov	r0, r4
 80097c2:	f000 fc45 	bl	800a050 <__multadd>
 80097c6:	4607      	mov	r7, r0
 80097c8:	e7f0      	b.n	80097ac <_dtoa_r+0xb14>
 80097ca:	f1b9 0f00 	cmp.w	r9, #0
 80097ce:	9a00      	ldr	r2, [sp, #0]
 80097d0:	bfcc      	ite	gt
 80097d2:	464d      	movgt	r5, r9
 80097d4:	2501      	movle	r5, #1
 80097d6:	4415      	add	r5, r2
 80097d8:	f04f 0800 	mov.w	r8, #0
 80097dc:	4659      	mov	r1, fp
 80097de:	2201      	movs	r2, #1
 80097e0:	4620      	mov	r0, r4
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	f000 fe2e 	bl	800a444 <__lshift>
 80097e8:	4631      	mov	r1, r6
 80097ea:	4683      	mov	fp, r0
 80097ec:	f000 fe96 	bl	800a51c <__mcmp>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	dcb2      	bgt.n	800975a <_dtoa_r+0xac2>
 80097f4:	d102      	bne.n	80097fc <_dtoa_r+0xb64>
 80097f6:	9b01      	ldr	r3, [sp, #4]
 80097f8:	07db      	lsls	r3, r3, #31
 80097fa:	d4ae      	bmi.n	800975a <_dtoa_r+0xac2>
 80097fc:	462b      	mov	r3, r5
 80097fe:	461d      	mov	r5, r3
 8009800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009804:	2a30      	cmp	r2, #48	; 0x30
 8009806:	d0fa      	beq.n	80097fe <_dtoa_r+0xb66>
 8009808:	e6f7      	b.n	80095fa <_dtoa_r+0x962>
 800980a:	9a00      	ldr	r2, [sp, #0]
 800980c:	429a      	cmp	r2, r3
 800980e:	d1a5      	bne.n	800975c <_dtoa_r+0xac4>
 8009810:	f10a 0a01 	add.w	sl, sl, #1
 8009814:	2331      	movs	r3, #49	; 0x31
 8009816:	e779      	b.n	800970c <_dtoa_r+0xa74>
 8009818:	4b13      	ldr	r3, [pc, #76]	; (8009868 <_dtoa_r+0xbd0>)
 800981a:	f7ff baaf 	b.w	8008d7c <_dtoa_r+0xe4>
 800981e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009820:	2b00      	cmp	r3, #0
 8009822:	f47f aa86 	bne.w	8008d32 <_dtoa_r+0x9a>
 8009826:	4b11      	ldr	r3, [pc, #68]	; (800986c <_dtoa_r+0xbd4>)
 8009828:	f7ff baa8 	b.w	8008d7c <_dtoa_r+0xe4>
 800982c:	f1b9 0f00 	cmp.w	r9, #0
 8009830:	dc03      	bgt.n	800983a <_dtoa_r+0xba2>
 8009832:	9b05      	ldr	r3, [sp, #20]
 8009834:	2b02      	cmp	r3, #2
 8009836:	f73f aec9 	bgt.w	80095cc <_dtoa_r+0x934>
 800983a:	9d00      	ldr	r5, [sp, #0]
 800983c:	4631      	mov	r1, r6
 800983e:	4658      	mov	r0, fp
 8009840:	f7ff f99c 	bl	8008b7c <quorem>
 8009844:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009848:	f805 3b01 	strb.w	r3, [r5], #1
 800984c:	9a00      	ldr	r2, [sp, #0]
 800984e:	1aaa      	subs	r2, r5, r2
 8009850:	4591      	cmp	r9, r2
 8009852:	ddba      	ble.n	80097ca <_dtoa_r+0xb32>
 8009854:	4659      	mov	r1, fp
 8009856:	2300      	movs	r3, #0
 8009858:	220a      	movs	r2, #10
 800985a:	4620      	mov	r0, r4
 800985c:	f000 fbf8 	bl	800a050 <__multadd>
 8009860:	4683      	mov	fp, r0
 8009862:	e7eb      	b.n	800983c <_dtoa_r+0xba4>
 8009864:	0800c444 	.word	0x0800c444
 8009868:	0800c240 	.word	0x0800c240
 800986c:	0800c3c1 	.word	0x0800c3c1

08009870 <rshift>:
 8009870:	6903      	ldr	r3, [r0, #16]
 8009872:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009876:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800987a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800987e:	f100 0414 	add.w	r4, r0, #20
 8009882:	dd45      	ble.n	8009910 <rshift+0xa0>
 8009884:	f011 011f 	ands.w	r1, r1, #31
 8009888:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800988c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009890:	d10c      	bne.n	80098ac <rshift+0x3c>
 8009892:	f100 0710 	add.w	r7, r0, #16
 8009896:	4629      	mov	r1, r5
 8009898:	42b1      	cmp	r1, r6
 800989a:	d334      	bcc.n	8009906 <rshift+0x96>
 800989c:	1a9b      	subs	r3, r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	1eea      	subs	r2, r5, #3
 80098a2:	4296      	cmp	r6, r2
 80098a4:	bf38      	it	cc
 80098a6:	2300      	movcc	r3, #0
 80098a8:	4423      	add	r3, r4
 80098aa:	e015      	b.n	80098d8 <rshift+0x68>
 80098ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80098b0:	f1c1 0820 	rsb	r8, r1, #32
 80098b4:	40cf      	lsrs	r7, r1
 80098b6:	f105 0e04 	add.w	lr, r5, #4
 80098ba:	46a1      	mov	r9, r4
 80098bc:	4576      	cmp	r6, lr
 80098be:	46f4      	mov	ip, lr
 80098c0:	d815      	bhi.n	80098ee <rshift+0x7e>
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	009a      	lsls	r2, r3, #2
 80098c6:	3a04      	subs	r2, #4
 80098c8:	3501      	adds	r5, #1
 80098ca:	42ae      	cmp	r6, r5
 80098cc:	bf38      	it	cc
 80098ce:	2200      	movcc	r2, #0
 80098d0:	18a3      	adds	r3, r4, r2
 80098d2:	50a7      	str	r7, [r4, r2]
 80098d4:	b107      	cbz	r7, 80098d8 <rshift+0x68>
 80098d6:	3304      	adds	r3, #4
 80098d8:	1b1a      	subs	r2, r3, r4
 80098da:	42a3      	cmp	r3, r4
 80098dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80098e0:	bf08      	it	eq
 80098e2:	2300      	moveq	r3, #0
 80098e4:	6102      	str	r2, [r0, #16]
 80098e6:	bf08      	it	eq
 80098e8:	6143      	streq	r3, [r0, #20]
 80098ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098ee:	f8dc c000 	ldr.w	ip, [ip]
 80098f2:	fa0c fc08 	lsl.w	ip, ip, r8
 80098f6:	ea4c 0707 	orr.w	r7, ip, r7
 80098fa:	f849 7b04 	str.w	r7, [r9], #4
 80098fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009902:	40cf      	lsrs	r7, r1
 8009904:	e7da      	b.n	80098bc <rshift+0x4c>
 8009906:	f851 cb04 	ldr.w	ip, [r1], #4
 800990a:	f847 cf04 	str.w	ip, [r7, #4]!
 800990e:	e7c3      	b.n	8009898 <rshift+0x28>
 8009910:	4623      	mov	r3, r4
 8009912:	e7e1      	b.n	80098d8 <rshift+0x68>

08009914 <__hexdig_fun>:
 8009914:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009918:	2b09      	cmp	r3, #9
 800991a:	d802      	bhi.n	8009922 <__hexdig_fun+0xe>
 800991c:	3820      	subs	r0, #32
 800991e:	b2c0      	uxtb	r0, r0
 8009920:	4770      	bx	lr
 8009922:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009926:	2b05      	cmp	r3, #5
 8009928:	d801      	bhi.n	800992e <__hexdig_fun+0x1a>
 800992a:	3847      	subs	r0, #71	; 0x47
 800992c:	e7f7      	b.n	800991e <__hexdig_fun+0xa>
 800992e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009932:	2b05      	cmp	r3, #5
 8009934:	d801      	bhi.n	800993a <__hexdig_fun+0x26>
 8009936:	3827      	subs	r0, #39	; 0x27
 8009938:	e7f1      	b.n	800991e <__hexdig_fun+0xa>
 800993a:	2000      	movs	r0, #0
 800993c:	4770      	bx	lr
	...

08009940 <__gethex>:
 8009940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009944:	ed2d 8b02 	vpush	{d8}
 8009948:	b089      	sub	sp, #36	; 0x24
 800994a:	ee08 0a10 	vmov	s16, r0
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	4bbc      	ldr	r3, [pc, #752]	; (8009c44 <__gethex+0x304>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	9301      	str	r3, [sp, #4]
 8009956:	4618      	mov	r0, r3
 8009958:	468b      	mov	fp, r1
 800995a:	4690      	mov	r8, r2
 800995c:	f7f6 fc40 	bl	80001e0 <strlen>
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	f8db 2000 	ldr.w	r2, [fp]
 8009966:	4403      	add	r3, r0
 8009968:	4682      	mov	sl, r0
 800996a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800996e:	9305      	str	r3, [sp, #20]
 8009970:	1c93      	adds	r3, r2, #2
 8009972:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009976:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800997a:	32fe      	adds	r2, #254	; 0xfe
 800997c:	18d1      	adds	r1, r2, r3
 800997e:	461f      	mov	r7, r3
 8009980:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009984:	9100      	str	r1, [sp, #0]
 8009986:	2830      	cmp	r0, #48	; 0x30
 8009988:	d0f8      	beq.n	800997c <__gethex+0x3c>
 800998a:	f7ff ffc3 	bl	8009914 <__hexdig_fun>
 800998e:	4604      	mov	r4, r0
 8009990:	2800      	cmp	r0, #0
 8009992:	d13a      	bne.n	8009a0a <__gethex+0xca>
 8009994:	9901      	ldr	r1, [sp, #4]
 8009996:	4652      	mov	r2, sl
 8009998:	4638      	mov	r0, r7
 800999a:	f001 f9e1 	bl	800ad60 <strncmp>
 800999e:	4605      	mov	r5, r0
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d168      	bne.n	8009a76 <__gethex+0x136>
 80099a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80099a8:	eb07 060a 	add.w	r6, r7, sl
 80099ac:	f7ff ffb2 	bl	8009914 <__hexdig_fun>
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d062      	beq.n	8009a7a <__gethex+0x13a>
 80099b4:	4633      	mov	r3, r6
 80099b6:	7818      	ldrb	r0, [r3, #0]
 80099b8:	2830      	cmp	r0, #48	; 0x30
 80099ba:	461f      	mov	r7, r3
 80099bc:	f103 0301 	add.w	r3, r3, #1
 80099c0:	d0f9      	beq.n	80099b6 <__gethex+0x76>
 80099c2:	f7ff ffa7 	bl	8009914 <__hexdig_fun>
 80099c6:	2301      	movs	r3, #1
 80099c8:	fab0 f480 	clz	r4, r0
 80099cc:	0964      	lsrs	r4, r4, #5
 80099ce:	4635      	mov	r5, r6
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	463a      	mov	r2, r7
 80099d4:	4616      	mov	r6, r2
 80099d6:	3201      	adds	r2, #1
 80099d8:	7830      	ldrb	r0, [r6, #0]
 80099da:	f7ff ff9b 	bl	8009914 <__hexdig_fun>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d1f8      	bne.n	80099d4 <__gethex+0x94>
 80099e2:	9901      	ldr	r1, [sp, #4]
 80099e4:	4652      	mov	r2, sl
 80099e6:	4630      	mov	r0, r6
 80099e8:	f001 f9ba 	bl	800ad60 <strncmp>
 80099ec:	b980      	cbnz	r0, 8009a10 <__gethex+0xd0>
 80099ee:	b94d      	cbnz	r5, 8009a04 <__gethex+0xc4>
 80099f0:	eb06 050a 	add.w	r5, r6, sl
 80099f4:	462a      	mov	r2, r5
 80099f6:	4616      	mov	r6, r2
 80099f8:	3201      	adds	r2, #1
 80099fa:	7830      	ldrb	r0, [r6, #0]
 80099fc:	f7ff ff8a 	bl	8009914 <__hexdig_fun>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d1f8      	bne.n	80099f6 <__gethex+0xb6>
 8009a04:	1bad      	subs	r5, r5, r6
 8009a06:	00ad      	lsls	r5, r5, #2
 8009a08:	e004      	b.n	8009a14 <__gethex+0xd4>
 8009a0a:	2400      	movs	r4, #0
 8009a0c:	4625      	mov	r5, r4
 8009a0e:	e7e0      	b.n	80099d2 <__gethex+0x92>
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	d1f7      	bne.n	8009a04 <__gethex+0xc4>
 8009a14:	7833      	ldrb	r3, [r6, #0]
 8009a16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a1a:	2b50      	cmp	r3, #80	; 0x50
 8009a1c:	d13b      	bne.n	8009a96 <__gethex+0x156>
 8009a1e:	7873      	ldrb	r3, [r6, #1]
 8009a20:	2b2b      	cmp	r3, #43	; 0x2b
 8009a22:	d02c      	beq.n	8009a7e <__gethex+0x13e>
 8009a24:	2b2d      	cmp	r3, #45	; 0x2d
 8009a26:	d02e      	beq.n	8009a86 <__gethex+0x146>
 8009a28:	1c71      	adds	r1, r6, #1
 8009a2a:	f04f 0900 	mov.w	r9, #0
 8009a2e:	7808      	ldrb	r0, [r1, #0]
 8009a30:	f7ff ff70 	bl	8009914 <__hexdig_fun>
 8009a34:	1e43      	subs	r3, r0, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b18      	cmp	r3, #24
 8009a3a:	d82c      	bhi.n	8009a96 <__gethex+0x156>
 8009a3c:	f1a0 0210 	sub.w	r2, r0, #16
 8009a40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009a44:	f7ff ff66 	bl	8009914 <__hexdig_fun>
 8009a48:	1e43      	subs	r3, r0, #1
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b18      	cmp	r3, #24
 8009a4e:	d91d      	bls.n	8009a8c <__gethex+0x14c>
 8009a50:	f1b9 0f00 	cmp.w	r9, #0
 8009a54:	d000      	beq.n	8009a58 <__gethex+0x118>
 8009a56:	4252      	negs	r2, r2
 8009a58:	4415      	add	r5, r2
 8009a5a:	f8cb 1000 	str.w	r1, [fp]
 8009a5e:	b1e4      	cbz	r4, 8009a9a <__gethex+0x15a>
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf14      	ite	ne
 8009a66:	2700      	movne	r7, #0
 8009a68:	2706      	moveq	r7, #6
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	b009      	add	sp, #36	; 0x24
 8009a6e:	ecbd 8b02 	vpop	{d8}
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	463e      	mov	r6, r7
 8009a78:	4625      	mov	r5, r4
 8009a7a:	2401      	movs	r4, #1
 8009a7c:	e7ca      	b.n	8009a14 <__gethex+0xd4>
 8009a7e:	f04f 0900 	mov.w	r9, #0
 8009a82:	1cb1      	adds	r1, r6, #2
 8009a84:	e7d3      	b.n	8009a2e <__gethex+0xee>
 8009a86:	f04f 0901 	mov.w	r9, #1
 8009a8a:	e7fa      	b.n	8009a82 <__gethex+0x142>
 8009a8c:	230a      	movs	r3, #10
 8009a8e:	fb03 0202 	mla	r2, r3, r2, r0
 8009a92:	3a10      	subs	r2, #16
 8009a94:	e7d4      	b.n	8009a40 <__gethex+0x100>
 8009a96:	4631      	mov	r1, r6
 8009a98:	e7df      	b.n	8009a5a <__gethex+0x11a>
 8009a9a:	1bf3      	subs	r3, r6, r7
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	2b07      	cmp	r3, #7
 8009aa2:	dc0b      	bgt.n	8009abc <__gethex+0x17c>
 8009aa4:	ee18 0a10 	vmov	r0, s16
 8009aa8:	f000 fa70 	bl	8009f8c <_Balloc>
 8009aac:	4604      	mov	r4, r0
 8009aae:	b940      	cbnz	r0, 8009ac2 <__gethex+0x182>
 8009ab0:	4b65      	ldr	r3, [pc, #404]	; (8009c48 <__gethex+0x308>)
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	21de      	movs	r1, #222	; 0xde
 8009ab6:	4865      	ldr	r0, [pc, #404]	; (8009c4c <__gethex+0x30c>)
 8009ab8:	f001 f972 	bl	800ada0 <__assert_func>
 8009abc:	3101      	adds	r1, #1
 8009abe:	105b      	asrs	r3, r3, #1
 8009ac0:	e7ee      	b.n	8009aa0 <__gethex+0x160>
 8009ac2:	f100 0914 	add.w	r9, r0, #20
 8009ac6:	f04f 0b00 	mov.w	fp, #0
 8009aca:	f1ca 0301 	rsb	r3, sl, #1
 8009ace:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ad2:	f8cd b000 	str.w	fp, [sp]
 8009ad6:	9306      	str	r3, [sp, #24]
 8009ad8:	42b7      	cmp	r7, r6
 8009ada:	d340      	bcc.n	8009b5e <__gethex+0x21e>
 8009adc:	9802      	ldr	r0, [sp, #8]
 8009ade:	9b00      	ldr	r3, [sp, #0]
 8009ae0:	f840 3b04 	str.w	r3, [r0], #4
 8009ae4:	eba0 0009 	sub.w	r0, r0, r9
 8009ae8:	1080      	asrs	r0, r0, #2
 8009aea:	0146      	lsls	r6, r0, #5
 8009aec:	6120      	str	r0, [r4, #16]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fb42 	bl	800a178 <__hi0bits>
 8009af4:	1a30      	subs	r0, r6, r0
 8009af6:	f8d8 6000 	ldr.w	r6, [r8]
 8009afa:	42b0      	cmp	r0, r6
 8009afc:	dd63      	ble.n	8009bc6 <__gethex+0x286>
 8009afe:	1b87      	subs	r7, r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 fedc 	bl	800a8c0 <__any_on>
 8009b08:	4682      	mov	sl, r0
 8009b0a:	b1a8      	cbz	r0, 8009b38 <__gethex+0x1f8>
 8009b0c:	1e7b      	subs	r3, r7, #1
 8009b0e:	1159      	asrs	r1, r3, #5
 8009b10:	f003 021f 	and.w	r2, r3, #31
 8009b14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b18:	f04f 0a01 	mov.w	sl, #1
 8009b1c:	fa0a f202 	lsl.w	r2, sl, r2
 8009b20:	420a      	tst	r2, r1
 8009b22:	d009      	beq.n	8009b38 <__gethex+0x1f8>
 8009b24:	4553      	cmp	r3, sl
 8009b26:	dd05      	ble.n	8009b34 <__gethex+0x1f4>
 8009b28:	1eb9      	subs	r1, r7, #2
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 fec8 	bl	800a8c0 <__any_on>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d145      	bne.n	8009bc0 <__gethex+0x280>
 8009b34:	f04f 0a02 	mov.w	sl, #2
 8009b38:	4639      	mov	r1, r7
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f7ff fe98 	bl	8009870 <rshift>
 8009b40:	443d      	add	r5, r7
 8009b42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b46:	42ab      	cmp	r3, r5
 8009b48:	da4c      	bge.n	8009be4 <__gethex+0x2a4>
 8009b4a:	ee18 0a10 	vmov	r0, s16
 8009b4e:	4621      	mov	r1, r4
 8009b50:	f000 fa5c 	bl	800a00c <_Bfree>
 8009b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b56:	2300      	movs	r3, #0
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	27a3      	movs	r7, #163	; 0xa3
 8009b5c:	e785      	b.n	8009a6a <__gethex+0x12a>
 8009b5e:	1e73      	subs	r3, r6, #1
 8009b60:	9a05      	ldr	r2, [sp, #20]
 8009b62:	9303      	str	r3, [sp, #12]
 8009b64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d019      	beq.n	8009ba0 <__gethex+0x260>
 8009b6c:	f1bb 0f20 	cmp.w	fp, #32
 8009b70:	d107      	bne.n	8009b82 <__gethex+0x242>
 8009b72:	9b02      	ldr	r3, [sp, #8]
 8009b74:	9a00      	ldr	r2, [sp, #0]
 8009b76:	f843 2b04 	str.w	r2, [r3], #4
 8009b7a:	9302      	str	r3, [sp, #8]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9300      	str	r3, [sp, #0]
 8009b80:	469b      	mov	fp, r3
 8009b82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b86:	f7ff fec5 	bl	8009914 <__hexdig_fun>
 8009b8a:	9b00      	ldr	r3, [sp, #0]
 8009b8c:	f000 000f 	and.w	r0, r0, #15
 8009b90:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b94:	4303      	orrs	r3, r0
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	f10b 0b04 	add.w	fp, fp, #4
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	e00d      	b.n	8009bbc <__gethex+0x27c>
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	9a06      	ldr	r2, [sp, #24]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	42bb      	cmp	r3, r7
 8009ba8:	d3e0      	bcc.n	8009b6c <__gethex+0x22c>
 8009baa:	4618      	mov	r0, r3
 8009bac:	9901      	ldr	r1, [sp, #4]
 8009bae:	9307      	str	r3, [sp, #28]
 8009bb0:	4652      	mov	r2, sl
 8009bb2:	f001 f8d5 	bl	800ad60 <strncmp>
 8009bb6:	9b07      	ldr	r3, [sp, #28]
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d1d7      	bne.n	8009b6c <__gethex+0x22c>
 8009bbc:	461e      	mov	r6, r3
 8009bbe:	e78b      	b.n	8009ad8 <__gethex+0x198>
 8009bc0:	f04f 0a03 	mov.w	sl, #3
 8009bc4:	e7b8      	b.n	8009b38 <__gethex+0x1f8>
 8009bc6:	da0a      	bge.n	8009bde <__gethex+0x29e>
 8009bc8:	1a37      	subs	r7, r6, r0
 8009bca:	4621      	mov	r1, r4
 8009bcc:	ee18 0a10 	vmov	r0, s16
 8009bd0:	463a      	mov	r2, r7
 8009bd2:	f000 fc37 	bl	800a444 <__lshift>
 8009bd6:	1bed      	subs	r5, r5, r7
 8009bd8:	4604      	mov	r4, r0
 8009bda:	f100 0914 	add.w	r9, r0, #20
 8009bde:	f04f 0a00 	mov.w	sl, #0
 8009be2:	e7ae      	b.n	8009b42 <__gethex+0x202>
 8009be4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009be8:	42a8      	cmp	r0, r5
 8009bea:	dd72      	ble.n	8009cd2 <__gethex+0x392>
 8009bec:	1b45      	subs	r5, r0, r5
 8009bee:	42ae      	cmp	r6, r5
 8009bf0:	dc36      	bgt.n	8009c60 <__gethex+0x320>
 8009bf2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d02a      	beq.n	8009c50 <__gethex+0x310>
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	d02c      	beq.n	8009c58 <__gethex+0x318>
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d115      	bne.n	8009c2e <__gethex+0x2ee>
 8009c02:	42ae      	cmp	r6, r5
 8009c04:	d113      	bne.n	8009c2e <__gethex+0x2ee>
 8009c06:	2e01      	cmp	r6, #1
 8009c08:	d10b      	bne.n	8009c22 <__gethex+0x2e2>
 8009c0a:	9a04      	ldr	r2, [sp, #16]
 8009c0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	2301      	movs	r3, #1
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	f8c9 3000 	str.w	r3, [r9]
 8009c1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c1c:	2762      	movs	r7, #98	; 0x62
 8009c1e:	601c      	str	r4, [r3, #0]
 8009c20:	e723      	b.n	8009a6a <__gethex+0x12a>
 8009c22:	1e71      	subs	r1, r6, #1
 8009c24:	4620      	mov	r0, r4
 8009c26:	f000 fe4b 	bl	800a8c0 <__any_on>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1ed      	bne.n	8009c0a <__gethex+0x2ca>
 8009c2e:	ee18 0a10 	vmov	r0, s16
 8009c32:	4621      	mov	r1, r4
 8009c34:	f000 f9ea 	bl	800a00c <_Bfree>
 8009c38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	2750      	movs	r7, #80	; 0x50
 8009c40:	e713      	b.n	8009a6a <__gethex+0x12a>
 8009c42:	bf00      	nop
 8009c44:	0800c4c0 	.word	0x0800c4c0
 8009c48:	0800c444 	.word	0x0800c444
 8009c4c:	0800c455 	.word	0x0800c455
 8009c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1eb      	bne.n	8009c2e <__gethex+0x2ee>
 8009c56:	e7d8      	b.n	8009c0a <__gethex+0x2ca>
 8009c58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1d5      	bne.n	8009c0a <__gethex+0x2ca>
 8009c5e:	e7e6      	b.n	8009c2e <__gethex+0x2ee>
 8009c60:	1e6f      	subs	r7, r5, #1
 8009c62:	f1ba 0f00 	cmp.w	sl, #0
 8009c66:	d131      	bne.n	8009ccc <__gethex+0x38c>
 8009c68:	b127      	cbz	r7, 8009c74 <__gethex+0x334>
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f000 fe27 	bl	800a8c0 <__any_on>
 8009c72:	4682      	mov	sl, r0
 8009c74:	117b      	asrs	r3, r7, #5
 8009c76:	2101      	movs	r1, #1
 8009c78:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c7c:	f007 071f 	and.w	r7, r7, #31
 8009c80:	fa01 f707 	lsl.w	r7, r1, r7
 8009c84:	421f      	tst	r7, r3
 8009c86:	4629      	mov	r1, r5
 8009c88:	4620      	mov	r0, r4
 8009c8a:	bf18      	it	ne
 8009c8c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c90:	1b76      	subs	r6, r6, r5
 8009c92:	f7ff fded 	bl	8009870 <rshift>
 8009c96:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c9a:	2702      	movs	r7, #2
 8009c9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ca0:	d048      	beq.n	8009d34 <__gethex+0x3f4>
 8009ca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d015      	beq.n	8009cd6 <__gethex+0x396>
 8009caa:	2b03      	cmp	r3, #3
 8009cac:	d017      	beq.n	8009cde <__gethex+0x39e>
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d109      	bne.n	8009cc6 <__gethex+0x386>
 8009cb2:	f01a 0f02 	tst.w	sl, #2
 8009cb6:	d006      	beq.n	8009cc6 <__gethex+0x386>
 8009cb8:	f8d9 0000 	ldr.w	r0, [r9]
 8009cbc:	ea4a 0a00 	orr.w	sl, sl, r0
 8009cc0:	f01a 0f01 	tst.w	sl, #1
 8009cc4:	d10e      	bne.n	8009ce4 <__gethex+0x3a4>
 8009cc6:	f047 0710 	orr.w	r7, r7, #16
 8009cca:	e033      	b.n	8009d34 <__gethex+0x3f4>
 8009ccc:	f04f 0a01 	mov.w	sl, #1
 8009cd0:	e7d0      	b.n	8009c74 <__gethex+0x334>
 8009cd2:	2701      	movs	r7, #1
 8009cd4:	e7e2      	b.n	8009c9c <__gethex+0x35c>
 8009cd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cd8:	f1c3 0301 	rsb	r3, r3, #1
 8009cdc:	9315      	str	r3, [sp, #84]	; 0x54
 8009cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d0f0      	beq.n	8009cc6 <__gethex+0x386>
 8009ce4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ce8:	f104 0314 	add.w	r3, r4, #20
 8009cec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009cf0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009cf4:	f04f 0c00 	mov.w	ip, #0
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cfe:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009d02:	d01c      	beq.n	8009d3e <__gethex+0x3fe>
 8009d04:	3201      	adds	r2, #1
 8009d06:	6002      	str	r2, [r0, #0]
 8009d08:	2f02      	cmp	r7, #2
 8009d0a:	f104 0314 	add.w	r3, r4, #20
 8009d0e:	d13f      	bne.n	8009d90 <__gethex+0x450>
 8009d10:	f8d8 2000 	ldr.w	r2, [r8]
 8009d14:	3a01      	subs	r2, #1
 8009d16:	42b2      	cmp	r2, r6
 8009d18:	d10a      	bne.n	8009d30 <__gethex+0x3f0>
 8009d1a:	1171      	asrs	r1, r6, #5
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d22:	f006 061f 	and.w	r6, r6, #31
 8009d26:	fa02 f606 	lsl.w	r6, r2, r6
 8009d2a:	421e      	tst	r6, r3
 8009d2c:	bf18      	it	ne
 8009d2e:	4617      	movne	r7, r2
 8009d30:	f047 0720 	orr.w	r7, r7, #32
 8009d34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d36:	601c      	str	r4, [r3, #0]
 8009d38:	9b04      	ldr	r3, [sp, #16]
 8009d3a:	601d      	str	r5, [r3, #0]
 8009d3c:	e695      	b.n	8009a6a <__gethex+0x12a>
 8009d3e:	4299      	cmp	r1, r3
 8009d40:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d44:	d8d8      	bhi.n	8009cf8 <__gethex+0x3b8>
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	459b      	cmp	fp, r3
 8009d4a:	db19      	blt.n	8009d80 <__gethex+0x440>
 8009d4c:	6861      	ldr	r1, [r4, #4]
 8009d4e:	ee18 0a10 	vmov	r0, s16
 8009d52:	3101      	adds	r1, #1
 8009d54:	f000 f91a 	bl	8009f8c <_Balloc>
 8009d58:	4681      	mov	r9, r0
 8009d5a:	b918      	cbnz	r0, 8009d64 <__gethex+0x424>
 8009d5c:	4b1a      	ldr	r3, [pc, #104]	; (8009dc8 <__gethex+0x488>)
 8009d5e:	4602      	mov	r2, r0
 8009d60:	2184      	movs	r1, #132	; 0x84
 8009d62:	e6a8      	b.n	8009ab6 <__gethex+0x176>
 8009d64:	6922      	ldr	r2, [r4, #16]
 8009d66:	3202      	adds	r2, #2
 8009d68:	f104 010c 	add.w	r1, r4, #12
 8009d6c:	0092      	lsls	r2, r2, #2
 8009d6e:	300c      	adds	r0, #12
 8009d70:	f7fd f99a 	bl	80070a8 <memcpy>
 8009d74:	4621      	mov	r1, r4
 8009d76:	ee18 0a10 	vmov	r0, s16
 8009d7a:	f000 f947 	bl	800a00c <_Bfree>
 8009d7e:	464c      	mov	r4, r9
 8009d80:	6923      	ldr	r3, [r4, #16]
 8009d82:	1c5a      	adds	r2, r3, #1
 8009d84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d88:	6122      	str	r2, [r4, #16]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	615a      	str	r2, [r3, #20]
 8009d8e:	e7bb      	b.n	8009d08 <__gethex+0x3c8>
 8009d90:	6922      	ldr	r2, [r4, #16]
 8009d92:	455a      	cmp	r2, fp
 8009d94:	dd0b      	ble.n	8009dae <__gethex+0x46e>
 8009d96:	2101      	movs	r1, #1
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f7ff fd69 	bl	8009870 <rshift>
 8009d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009da2:	3501      	adds	r5, #1
 8009da4:	42ab      	cmp	r3, r5
 8009da6:	f6ff aed0 	blt.w	8009b4a <__gethex+0x20a>
 8009daa:	2701      	movs	r7, #1
 8009dac:	e7c0      	b.n	8009d30 <__gethex+0x3f0>
 8009dae:	f016 061f 	ands.w	r6, r6, #31
 8009db2:	d0fa      	beq.n	8009daa <__gethex+0x46a>
 8009db4:	449a      	add	sl, r3
 8009db6:	f1c6 0620 	rsb	r6, r6, #32
 8009dba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009dbe:	f000 f9db 	bl	800a178 <__hi0bits>
 8009dc2:	42b0      	cmp	r0, r6
 8009dc4:	dbe7      	blt.n	8009d96 <__gethex+0x456>
 8009dc6:	e7f0      	b.n	8009daa <__gethex+0x46a>
 8009dc8:	0800c444 	.word	0x0800c444

08009dcc <L_shift>:
 8009dcc:	f1c2 0208 	rsb	r2, r2, #8
 8009dd0:	0092      	lsls	r2, r2, #2
 8009dd2:	b570      	push	{r4, r5, r6, lr}
 8009dd4:	f1c2 0620 	rsb	r6, r2, #32
 8009dd8:	6843      	ldr	r3, [r0, #4]
 8009dda:	6804      	ldr	r4, [r0, #0]
 8009ddc:	fa03 f506 	lsl.w	r5, r3, r6
 8009de0:	432c      	orrs	r4, r5
 8009de2:	40d3      	lsrs	r3, r2
 8009de4:	6004      	str	r4, [r0, #0]
 8009de6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009dea:	4288      	cmp	r0, r1
 8009dec:	d3f4      	bcc.n	8009dd8 <L_shift+0xc>
 8009dee:	bd70      	pop	{r4, r5, r6, pc}

08009df0 <__match>:
 8009df0:	b530      	push	{r4, r5, lr}
 8009df2:	6803      	ldr	r3, [r0, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dfa:	b914      	cbnz	r4, 8009e02 <__match+0x12>
 8009dfc:	6003      	str	r3, [r0, #0]
 8009dfe:	2001      	movs	r0, #1
 8009e00:	bd30      	pop	{r4, r5, pc}
 8009e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e06:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e0a:	2d19      	cmp	r5, #25
 8009e0c:	bf98      	it	ls
 8009e0e:	3220      	addls	r2, #32
 8009e10:	42a2      	cmp	r2, r4
 8009e12:	d0f0      	beq.n	8009df6 <__match+0x6>
 8009e14:	2000      	movs	r0, #0
 8009e16:	e7f3      	b.n	8009e00 <__match+0x10>

08009e18 <__hexnan>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	680b      	ldr	r3, [r1, #0]
 8009e1e:	6801      	ldr	r1, [r0, #0]
 8009e20:	115e      	asrs	r6, r3, #5
 8009e22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e26:	f013 031f 	ands.w	r3, r3, #31
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	bf18      	it	ne
 8009e2e:	3604      	addne	r6, #4
 8009e30:	2500      	movs	r5, #0
 8009e32:	1f37      	subs	r7, r6, #4
 8009e34:	4682      	mov	sl, r0
 8009e36:	4690      	mov	r8, r2
 8009e38:	9301      	str	r3, [sp, #4]
 8009e3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e3e:	46b9      	mov	r9, r7
 8009e40:	463c      	mov	r4, r7
 8009e42:	9502      	str	r5, [sp, #8]
 8009e44:	46ab      	mov	fp, r5
 8009e46:	784a      	ldrb	r2, [r1, #1]
 8009e48:	1c4b      	adds	r3, r1, #1
 8009e4a:	9303      	str	r3, [sp, #12]
 8009e4c:	b342      	cbz	r2, 8009ea0 <__hexnan+0x88>
 8009e4e:	4610      	mov	r0, r2
 8009e50:	9105      	str	r1, [sp, #20]
 8009e52:	9204      	str	r2, [sp, #16]
 8009e54:	f7ff fd5e 	bl	8009914 <__hexdig_fun>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d14f      	bne.n	8009efc <__hexnan+0xe4>
 8009e5c:	9a04      	ldr	r2, [sp, #16]
 8009e5e:	9905      	ldr	r1, [sp, #20]
 8009e60:	2a20      	cmp	r2, #32
 8009e62:	d818      	bhi.n	8009e96 <__hexnan+0x7e>
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	459b      	cmp	fp, r3
 8009e68:	dd13      	ble.n	8009e92 <__hexnan+0x7a>
 8009e6a:	454c      	cmp	r4, r9
 8009e6c:	d206      	bcs.n	8009e7c <__hexnan+0x64>
 8009e6e:	2d07      	cmp	r5, #7
 8009e70:	dc04      	bgt.n	8009e7c <__hexnan+0x64>
 8009e72:	462a      	mov	r2, r5
 8009e74:	4649      	mov	r1, r9
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7ff ffa8 	bl	8009dcc <L_shift>
 8009e7c:	4544      	cmp	r4, r8
 8009e7e:	d950      	bls.n	8009f22 <__hexnan+0x10a>
 8009e80:	2300      	movs	r3, #0
 8009e82:	f1a4 0904 	sub.w	r9, r4, #4
 8009e86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009e8e:	464c      	mov	r4, r9
 8009e90:	461d      	mov	r5, r3
 8009e92:	9903      	ldr	r1, [sp, #12]
 8009e94:	e7d7      	b.n	8009e46 <__hexnan+0x2e>
 8009e96:	2a29      	cmp	r2, #41	; 0x29
 8009e98:	d156      	bne.n	8009f48 <__hexnan+0x130>
 8009e9a:	3102      	adds	r1, #2
 8009e9c:	f8ca 1000 	str.w	r1, [sl]
 8009ea0:	f1bb 0f00 	cmp.w	fp, #0
 8009ea4:	d050      	beq.n	8009f48 <__hexnan+0x130>
 8009ea6:	454c      	cmp	r4, r9
 8009ea8:	d206      	bcs.n	8009eb8 <__hexnan+0xa0>
 8009eaa:	2d07      	cmp	r5, #7
 8009eac:	dc04      	bgt.n	8009eb8 <__hexnan+0xa0>
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f7ff ff8a 	bl	8009dcc <L_shift>
 8009eb8:	4544      	cmp	r4, r8
 8009eba:	d934      	bls.n	8009f26 <__hexnan+0x10e>
 8009ebc:	f1a8 0204 	sub.w	r2, r8, #4
 8009ec0:	4623      	mov	r3, r4
 8009ec2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009ec6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009eca:	429f      	cmp	r7, r3
 8009ecc:	d2f9      	bcs.n	8009ec2 <__hexnan+0xaa>
 8009ece:	1b3b      	subs	r3, r7, r4
 8009ed0:	f023 0303 	bic.w	r3, r3, #3
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	3401      	adds	r4, #1
 8009ed8:	3e03      	subs	r6, #3
 8009eda:	42b4      	cmp	r4, r6
 8009edc:	bf88      	it	hi
 8009ede:	2304      	movhi	r3, #4
 8009ee0:	4443      	add	r3, r8
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f843 2b04 	str.w	r2, [r3], #4
 8009ee8:	429f      	cmp	r7, r3
 8009eea:	d2fb      	bcs.n	8009ee4 <__hexnan+0xcc>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	b91b      	cbnz	r3, 8009ef8 <__hexnan+0xe0>
 8009ef0:	4547      	cmp	r7, r8
 8009ef2:	d127      	bne.n	8009f44 <__hexnan+0x12c>
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	603b      	str	r3, [r7, #0]
 8009ef8:	2005      	movs	r0, #5
 8009efa:	e026      	b.n	8009f4a <__hexnan+0x132>
 8009efc:	3501      	adds	r5, #1
 8009efe:	2d08      	cmp	r5, #8
 8009f00:	f10b 0b01 	add.w	fp, fp, #1
 8009f04:	dd06      	ble.n	8009f14 <__hexnan+0xfc>
 8009f06:	4544      	cmp	r4, r8
 8009f08:	d9c3      	bls.n	8009e92 <__hexnan+0x7a>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f10:	2501      	movs	r5, #1
 8009f12:	3c04      	subs	r4, #4
 8009f14:	6822      	ldr	r2, [r4, #0]
 8009f16:	f000 000f 	and.w	r0, r0, #15
 8009f1a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	e7b7      	b.n	8009e92 <__hexnan+0x7a>
 8009f22:	2508      	movs	r5, #8
 8009f24:	e7b5      	b.n	8009e92 <__hexnan+0x7a>
 8009f26:	9b01      	ldr	r3, [sp, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d0df      	beq.n	8009eec <__hexnan+0xd4>
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f30:	f1c3 0320 	rsb	r3, r3, #32
 8009f34:	fa22 f303 	lsr.w	r3, r2, r3
 8009f38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009f3c:	401a      	ands	r2, r3
 8009f3e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009f42:	e7d3      	b.n	8009eec <__hexnan+0xd4>
 8009f44:	3f04      	subs	r7, #4
 8009f46:	e7d1      	b.n	8009eec <__hexnan+0xd4>
 8009f48:	2004      	movs	r0, #4
 8009f4a:	b007      	add	sp, #28
 8009f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f50 <_localeconv_r>:
 8009f50:	4800      	ldr	r0, [pc, #0]	; (8009f54 <_localeconv_r+0x4>)
 8009f52:	4770      	bx	lr
 8009f54:	2000016c 	.word	0x2000016c

08009f58 <malloc>:
 8009f58:	4b02      	ldr	r3, [pc, #8]	; (8009f64 <malloc+0xc>)
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	f000 bd2f 	b.w	800a9c0 <_malloc_r>
 8009f62:	bf00      	nop
 8009f64:	20000014 	.word	0x20000014

08009f68 <__ascii_mbtowc>:
 8009f68:	b082      	sub	sp, #8
 8009f6a:	b901      	cbnz	r1, 8009f6e <__ascii_mbtowc+0x6>
 8009f6c:	a901      	add	r1, sp, #4
 8009f6e:	b142      	cbz	r2, 8009f82 <__ascii_mbtowc+0x1a>
 8009f70:	b14b      	cbz	r3, 8009f86 <__ascii_mbtowc+0x1e>
 8009f72:	7813      	ldrb	r3, [r2, #0]
 8009f74:	600b      	str	r3, [r1, #0]
 8009f76:	7812      	ldrb	r2, [r2, #0]
 8009f78:	1e10      	subs	r0, r2, #0
 8009f7a:	bf18      	it	ne
 8009f7c:	2001      	movne	r0, #1
 8009f7e:	b002      	add	sp, #8
 8009f80:	4770      	bx	lr
 8009f82:	4610      	mov	r0, r2
 8009f84:	e7fb      	b.n	8009f7e <__ascii_mbtowc+0x16>
 8009f86:	f06f 0001 	mvn.w	r0, #1
 8009f8a:	e7f8      	b.n	8009f7e <__ascii_mbtowc+0x16>

08009f8c <_Balloc>:
 8009f8c:	b570      	push	{r4, r5, r6, lr}
 8009f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f90:	4604      	mov	r4, r0
 8009f92:	460d      	mov	r5, r1
 8009f94:	b976      	cbnz	r6, 8009fb4 <_Balloc+0x28>
 8009f96:	2010      	movs	r0, #16
 8009f98:	f7ff ffde 	bl	8009f58 <malloc>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6260      	str	r0, [r4, #36]	; 0x24
 8009fa0:	b920      	cbnz	r0, 8009fac <_Balloc+0x20>
 8009fa2:	4b18      	ldr	r3, [pc, #96]	; (800a004 <_Balloc+0x78>)
 8009fa4:	4818      	ldr	r0, [pc, #96]	; (800a008 <_Balloc+0x7c>)
 8009fa6:	2166      	movs	r1, #102	; 0x66
 8009fa8:	f000 fefa 	bl	800ada0 <__assert_func>
 8009fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fb0:	6006      	str	r6, [r0, #0]
 8009fb2:	60c6      	str	r6, [r0, #12]
 8009fb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fb6:	68f3      	ldr	r3, [r6, #12]
 8009fb8:	b183      	cbz	r3, 8009fdc <_Balloc+0x50>
 8009fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fc2:	b9b8      	cbnz	r0, 8009ff4 <_Balloc+0x68>
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8009fca:	1d72      	adds	r2, r6, #5
 8009fcc:	0092      	lsls	r2, r2, #2
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f000 fc97 	bl	800a902 <_calloc_r>
 8009fd4:	b160      	cbz	r0, 8009ff0 <_Balloc+0x64>
 8009fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fda:	e00e      	b.n	8009ffa <_Balloc+0x6e>
 8009fdc:	2221      	movs	r2, #33	; 0x21
 8009fde:	2104      	movs	r1, #4
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fc8e 	bl	800a902 <_calloc_r>
 8009fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fe8:	60f0      	str	r0, [r6, #12]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e4      	bne.n	8009fba <_Balloc+0x2e>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	bd70      	pop	{r4, r5, r6, pc}
 8009ff4:	6802      	ldr	r2, [r0, #0]
 8009ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a000:	e7f7      	b.n	8009ff2 <_Balloc+0x66>
 800a002:	bf00      	nop
 800a004:	0800c3ce 	.word	0x0800c3ce
 800a008:	0800c4d4 	.word	0x0800c4d4

0800a00c <_Bfree>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a010:	4605      	mov	r5, r0
 800a012:	460c      	mov	r4, r1
 800a014:	b976      	cbnz	r6, 800a034 <_Bfree+0x28>
 800a016:	2010      	movs	r0, #16
 800a018:	f7ff ff9e 	bl	8009f58 <malloc>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6268      	str	r0, [r5, #36]	; 0x24
 800a020:	b920      	cbnz	r0, 800a02c <_Bfree+0x20>
 800a022:	4b09      	ldr	r3, [pc, #36]	; (800a048 <_Bfree+0x3c>)
 800a024:	4809      	ldr	r0, [pc, #36]	; (800a04c <_Bfree+0x40>)
 800a026:	218a      	movs	r1, #138	; 0x8a
 800a028:	f000 feba 	bl	800ada0 <__assert_func>
 800a02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a030:	6006      	str	r6, [r0, #0]
 800a032:	60c6      	str	r6, [r0, #12]
 800a034:	b13c      	cbz	r4, 800a046 <_Bfree+0x3a>
 800a036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a038:	6862      	ldr	r2, [r4, #4]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a040:	6021      	str	r1, [r4, #0]
 800a042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a046:	bd70      	pop	{r4, r5, r6, pc}
 800a048:	0800c3ce 	.word	0x0800c3ce
 800a04c:	0800c4d4 	.word	0x0800c4d4

0800a050 <__multadd>:
 800a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a054:	690e      	ldr	r6, [r1, #16]
 800a056:	4607      	mov	r7, r0
 800a058:	4698      	mov	r8, r3
 800a05a:	460c      	mov	r4, r1
 800a05c:	f101 0014 	add.w	r0, r1, #20
 800a060:	2300      	movs	r3, #0
 800a062:	6805      	ldr	r5, [r0, #0]
 800a064:	b2a9      	uxth	r1, r5
 800a066:	fb02 8101 	mla	r1, r2, r1, r8
 800a06a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a06e:	0c2d      	lsrs	r5, r5, #16
 800a070:	fb02 c505 	mla	r5, r2, r5, ip
 800a074:	b289      	uxth	r1, r1
 800a076:	3301      	adds	r3, #1
 800a078:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a07c:	429e      	cmp	r6, r3
 800a07e:	f840 1b04 	str.w	r1, [r0], #4
 800a082:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a086:	dcec      	bgt.n	800a062 <__multadd+0x12>
 800a088:	f1b8 0f00 	cmp.w	r8, #0
 800a08c:	d022      	beq.n	800a0d4 <__multadd+0x84>
 800a08e:	68a3      	ldr	r3, [r4, #8]
 800a090:	42b3      	cmp	r3, r6
 800a092:	dc19      	bgt.n	800a0c8 <__multadd+0x78>
 800a094:	6861      	ldr	r1, [r4, #4]
 800a096:	4638      	mov	r0, r7
 800a098:	3101      	adds	r1, #1
 800a09a:	f7ff ff77 	bl	8009f8c <_Balloc>
 800a09e:	4605      	mov	r5, r0
 800a0a0:	b928      	cbnz	r0, 800a0ae <__multadd+0x5e>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	4b0d      	ldr	r3, [pc, #52]	; (800a0dc <__multadd+0x8c>)
 800a0a6:	480e      	ldr	r0, [pc, #56]	; (800a0e0 <__multadd+0x90>)
 800a0a8:	21b5      	movs	r1, #181	; 0xb5
 800a0aa:	f000 fe79 	bl	800ada0 <__assert_func>
 800a0ae:	6922      	ldr	r2, [r4, #16]
 800a0b0:	3202      	adds	r2, #2
 800a0b2:	f104 010c 	add.w	r1, r4, #12
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	300c      	adds	r0, #12
 800a0ba:	f7fc fff5 	bl	80070a8 <memcpy>
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4638      	mov	r0, r7
 800a0c2:	f7ff ffa3 	bl	800a00c <_Bfree>
 800a0c6:	462c      	mov	r4, r5
 800a0c8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a0cc:	3601      	adds	r6, #1
 800a0ce:	f8c3 8014 	str.w	r8, [r3, #20]
 800a0d2:	6126      	str	r6, [r4, #16]
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0da:	bf00      	nop
 800a0dc:	0800c444 	.word	0x0800c444
 800a0e0:	0800c4d4 	.word	0x0800c4d4

0800a0e4 <__s2b>:
 800a0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	4615      	mov	r5, r2
 800a0ec:	461f      	mov	r7, r3
 800a0ee:	2209      	movs	r2, #9
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	db09      	blt.n	800a114 <__s2b+0x30>
 800a100:	4630      	mov	r0, r6
 800a102:	f7ff ff43 	bl	8009f8c <_Balloc>
 800a106:	b940      	cbnz	r0, 800a11a <__s2b+0x36>
 800a108:	4602      	mov	r2, r0
 800a10a:	4b19      	ldr	r3, [pc, #100]	; (800a170 <__s2b+0x8c>)
 800a10c:	4819      	ldr	r0, [pc, #100]	; (800a174 <__s2b+0x90>)
 800a10e:	21ce      	movs	r1, #206	; 0xce
 800a110:	f000 fe46 	bl	800ada0 <__assert_func>
 800a114:	0052      	lsls	r2, r2, #1
 800a116:	3101      	adds	r1, #1
 800a118:	e7f0      	b.n	800a0fc <__s2b+0x18>
 800a11a:	9b08      	ldr	r3, [sp, #32]
 800a11c:	6143      	str	r3, [r0, #20]
 800a11e:	2d09      	cmp	r5, #9
 800a120:	f04f 0301 	mov.w	r3, #1
 800a124:	6103      	str	r3, [r0, #16]
 800a126:	dd16      	ble.n	800a156 <__s2b+0x72>
 800a128:	f104 0909 	add.w	r9, r4, #9
 800a12c:	46c8      	mov	r8, r9
 800a12e:	442c      	add	r4, r5
 800a130:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a134:	4601      	mov	r1, r0
 800a136:	3b30      	subs	r3, #48	; 0x30
 800a138:	220a      	movs	r2, #10
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff ff88 	bl	800a050 <__multadd>
 800a140:	45a0      	cmp	r8, r4
 800a142:	d1f5      	bne.n	800a130 <__s2b+0x4c>
 800a144:	f1a5 0408 	sub.w	r4, r5, #8
 800a148:	444c      	add	r4, r9
 800a14a:	1b2d      	subs	r5, r5, r4
 800a14c:	1963      	adds	r3, r4, r5
 800a14e:	42bb      	cmp	r3, r7
 800a150:	db04      	blt.n	800a15c <__s2b+0x78>
 800a152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a156:	340a      	adds	r4, #10
 800a158:	2509      	movs	r5, #9
 800a15a:	e7f6      	b.n	800a14a <__s2b+0x66>
 800a15c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a160:	4601      	mov	r1, r0
 800a162:	3b30      	subs	r3, #48	; 0x30
 800a164:	220a      	movs	r2, #10
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff72 	bl	800a050 <__multadd>
 800a16c:	e7ee      	b.n	800a14c <__s2b+0x68>
 800a16e:	bf00      	nop
 800a170:	0800c444 	.word	0x0800c444
 800a174:	0800c4d4 	.word	0x0800c4d4

0800a178 <__hi0bits>:
 800a178:	0c03      	lsrs	r3, r0, #16
 800a17a:	041b      	lsls	r3, r3, #16
 800a17c:	b9d3      	cbnz	r3, 800a1b4 <__hi0bits+0x3c>
 800a17e:	0400      	lsls	r0, r0, #16
 800a180:	2310      	movs	r3, #16
 800a182:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a186:	bf04      	itt	eq
 800a188:	0200      	lsleq	r0, r0, #8
 800a18a:	3308      	addeq	r3, #8
 800a18c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a190:	bf04      	itt	eq
 800a192:	0100      	lsleq	r0, r0, #4
 800a194:	3304      	addeq	r3, #4
 800a196:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a19a:	bf04      	itt	eq
 800a19c:	0080      	lsleq	r0, r0, #2
 800a19e:	3302      	addeq	r3, #2
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	db05      	blt.n	800a1b0 <__hi0bits+0x38>
 800a1a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a1a8:	f103 0301 	add.w	r3, r3, #1
 800a1ac:	bf08      	it	eq
 800a1ae:	2320      	moveq	r3, #32
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	4770      	bx	lr
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	e7e4      	b.n	800a182 <__hi0bits+0xa>

0800a1b8 <__lo0bits>:
 800a1b8:	6803      	ldr	r3, [r0, #0]
 800a1ba:	f013 0207 	ands.w	r2, r3, #7
 800a1be:	4601      	mov	r1, r0
 800a1c0:	d00b      	beq.n	800a1da <__lo0bits+0x22>
 800a1c2:	07da      	lsls	r2, r3, #31
 800a1c4:	d424      	bmi.n	800a210 <__lo0bits+0x58>
 800a1c6:	0798      	lsls	r0, r3, #30
 800a1c8:	bf49      	itett	mi
 800a1ca:	085b      	lsrmi	r3, r3, #1
 800a1cc:	089b      	lsrpl	r3, r3, #2
 800a1ce:	2001      	movmi	r0, #1
 800a1d0:	600b      	strmi	r3, [r1, #0]
 800a1d2:	bf5c      	itt	pl
 800a1d4:	600b      	strpl	r3, [r1, #0]
 800a1d6:	2002      	movpl	r0, #2
 800a1d8:	4770      	bx	lr
 800a1da:	b298      	uxth	r0, r3
 800a1dc:	b9b0      	cbnz	r0, 800a20c <__lo0bits+0x54>
 800a1de:	0c1b      	lsrs	r3, r3, #16
 800a1e0:	2010      	movs	r0, #16
 800a1e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1e6:	bf04      	itt	eq
 800a1e8:	0a1b      	lsreq	r3, r3, #8
 800a1ea:	3008      	addeq	r0, #8
 800a1ec:	071a      	lsls	r2, r3, #28
 800a1ee:	bf04      	itt	eq
 800a1f0:	091b      	lsreq	r3, r3, #4
 800a1f2:	3004      	addeq	r0, #4
 800a1f4:	079a      	lsls	r2, r3, #30
 800a1f6:	bf04      	itt	eq
 800a1f8:	089b      	lsreq	r3, r3, #2
 800a1fa:	3002      	addeq	r0, #2
 800a1fc:	07da      	lsls	r2, r3, #31
 800a1fe:	d403      	bmi.n	800a208 <__lo0bits+0x50>
 800a200:	085b      	lsrs	r3, r3, #1
 800a202:	f100 0001 	add.w	r0, r0, #1
 800a206:	d005      	beq.n	800a214 <__lo0bits+0x5c>
 800a208:	600b      	str	r3, [r1, #0]
 800a20a:	4770      	bx	lr
 800a20c:	4610      	mov	r0, r2
 800a20e:	e7e8      	b.n	800a1e2 <__lo0bits+0x2a>
 800a210:	2000      	movs	r0, #0
 800a212:	4770      	bx	lr
 800a214:	2020      	movs	r0, #32
 800a216:	4770      	bx	lr

0800a218 <__i2b>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	460c      	mov	r4, r1
 800a21c:	2101      	movs	r1, #1
 800a21e:	f7ff feb5 	bl	8009f8c <_Balloc>
 800a222:	4602      	mov	r2, r0
 800a224:	b928      	cbnz	r0, 800a232 <__i2b+0x1a>
 800a226:	4b05      	ldr	r3, [pc, #20]	; (800a23c <__i2b+0x24>)
 800a228:	4805      	ldr	r0, [pc, #20]	; (800a240 <__i2b+0x28>)
 800a22a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a22e:	f000 fdb7 	bl	800ada0 <__assert_func>
 800a232:	2301      	movs	r3, #1
 800a234:	6144      	str	r4, [r0, #20]
 800a236:	6103      	str	r3, [r0, #16]
 800a238:	bd10      	pop	{r4, pc}
 800a23a:	bf00      	nop
 800a23c:	0800c444 	.word	0x0800c444
 800a240:	0800c4d4 	.word	0x0800c4d4

0800a244 <__multiply>:
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	4614      	mov	r4, r2
 800a24a:	690a      	ldr	r2, [r1, #16]
 800a24c:	6923      	ldr	r3, [r4, #16]
 800a24e:	429a      	cmp	r2, r3
 800a250:	bfb8      	it	lt
 800a252:	460b      	movlt	r3, r1
 800a254:	460d      	mov	r5, r1
 800a256:	bfbc      	itt	lt
 800a258:	4625      	movlt	r5, r4
 800a25a:	461c      	movlt	r4, r3
 800a25c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a260:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a264:	68ab      	ldr	r3, [r5, #8]
 800a266:	6869      	ldr	r1, [r5, #4]
 800a268:	eb0a 0709 	add.w	r7, sl, r9
 800a26c:	42bb      	cmp	r3, r7
 800a26e:	b085      	sub	sp, #20
 800a270:	bfb8      	it	lt
 800a272:	3101      	addlt	r1, #1
 800a274:	f7ff fe8a 	bl	8009f8c <_Balloc>
 800a278:	b930      	cbnz	r0, 800a288 <__multiply+0x44>
 800a27a:	4602      	mov	r2, r0
 800a27c:	4b42      	ldr	r3, [pc, #264]	; (800a388 <__multiply+0x144>)
 800a27e:	4843      	ldr	r0, [pc, #268]	; (800a38c <__multiply+0x148>)
 800a280:	f240 115d 	movw	r1, #349	; 0x15d
 800a284:	f000 fd8c 	bl	800ada0 <__assert_func>
 800a288:	f100 0614 	add.w	r6, r0, #20
 800a28c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a290:	4633      	mov	r3, r6
 800a292:	2200      	movs	r2, #0
 800a294:	4543      	cmp	r3, r8
 800a296:	d31e      	bcc.n	800a2d6 <__multiply+0x92>
 800a298:	f105 0c14 	add.w	ip, r5, #20
 800a29c:	f104 0314 	add.w	r3, r4, #20
 800a2a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a2a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a2a8:	9202      	str	r2, [sp, #8]
 800a2aa:	ebac 0205 	sub.w	r2, ip, r5
 800a2ae:	3a15      	subs	r2, #21
 800a2b0:	f022 0203 	bic.w	r2, r2, #3
 800a2b4:	3204      	adds	r2, #4
 800a2b6:	f105 0115 	add.w	r1, r5, #21
 800a2ba:	458c      	cmp	ip, r1
 800a2bc:	bf38      	it	cc
 800a2be:	2204      	movcc	r2, #4
 800a2c0:	9201      	str	r2, [sp, #4]
 800a2c2:	9a02      	ldr	r2, [sp, #8]
 800a2c4:	9303      	str	r3, [sp, #12]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d808      	bhi.n	800a2dc <__multiply+0x98>
 800a2ca:	2f00      	cmp	r7, #0
 800a2cc:	dc55      	bgt.n	800a37a <__multiply+0x136>
 800a2ce:	6107      	str	r7, [r0, #16]
 800a2d0:	b005      	add	sp, #20
 800a2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2d6:	f843 2b04 	str.w	r2, [r3], #4
 800a2da:	e7db      	b.n	800a294 <__multiply+0x50>
 800a2dc:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2e0:	f1ba 0f00 	cmp.w	sl, #0
 800a2e4:	d020      	beq.n	800a328 <__multiply+0xe4>
 800a2e6:	f105 0e14 	add.w	lr, r5, #20
 800a2ea:	46b1      	mov	r9, r6
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a2f2:	f8d9 b000 	ldr.w	fp, [r9]
 800a2f6:	b2a1      	uxth	r1, r4
 800a2f8:	fa1f fb8b 	uxth.w	fp, fp
 800a2fc:	fb0a b101 	mla	r1, sl, r1, fp
 800a300:	4411      	add	r1, r2
 800a302:	f8d9 2000 	ldr.w	r2, [r9]
 800a306:	0c24      	lsrs	r4, r4, #16
 800a308:	0c12      	lsrs	r2, r2, #16
 800a30a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a30e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a312:	b289      	uxth	r1, r1
 800a314:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a318:	45f4      	cmp	ip, lr
 800a31a:	f849 1b04 	str.w	r1, [r9], #4
 800a31e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a322:	d8e4      	bhi.n	800a2ee <__multiply+0xaa>
 800a324:	9901      	ldr	r1, [sp, #4]
 800a326:	5072      	str	r2, [r6, r1]
 800a328:	9a03      	ldr	r2, [sp, #12]
 800a32a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a32e:	3304      	adds	r3, #4
 800a330:	f1b9 0f00 	cmp.w	r9, #0
 800a334:	d01f      	beq.n	800a376 <__multiply+0x132>
 800a336:	6834      	ldr	r4, [r6, #0]
 800a338:	f105 0114 	add.w	r1, r5, #20
 800a33c:	46b6      	mov	lr, r6
 800a33e:	f04f 0a00 	mov.w	sl, #0
 800a342:	880a      	ldrh	r2, [r1, #0]
 800a344:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a348:	fb09 b202 	mla	r2, r9, r2, fp
 800a34c:	4492      	add	sl, r2
 800a34e:	b2a4      	uxth	r4, r4
 800a350:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a354:	f84e 4b04 	str.w	r4, [lr], #4
 800a358:	f851 4b04 	ldr.w	r4, [r1], #4
 800a35c:	f8be 2000 	ldrh.w	r2, [lr]
 800a360:	0c24      	lsrs	r4, r4, #16
 800a362:	fb09 2404 	mla	r4, r9, r4, r2
 800a366:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a36a:	458c      	cmp	ip, r1
 800a36c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a370:	d8e7      	bhi.n	800a342 <__multiply+0xfe>
 800a372:	9a01      	ldr	r2, [sp, #4]
 800a374:	50b4      	str	r4, [r6, r2]
 800a376:	3604      	adds	r6, #4
 800a378:	e7a3      	b.n	800a2c2 <__multiply+0x7e>
 800a37a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1a5      	bne.n	800a2ce <__multiply+0x8a>
 800a382:	3f01      	subs	r7, #1
 800a384:	e7a1      	b.n	800a2ca <__multiply+0x86>
 800a386:	bf00      	nop
 800a388:	0800c444 	.word	0x0800c444
 800a38c:	0800c4d4 	.word	0x0800c4d4

0800a390 <__pow5mult>:
 800a390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a394:	4615      	mov	r5, r2
 800a396:	f012 0203 	ands.w	r2, r2, #3
 800a39a:	4606      	mov	r6, r0
 800a39c:	460f      	mov	r7, r1
 800a39e:	d007      	beq.n	800a3b0 <__pow5mult+0x20>
 800a3a0:	4c25      	ldr	r4, [pc, #148]	; (800a438 <__pow5mult+0xa8>)
 800a3a2:	3a01      	subs	r2, #1
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3aa:	f7ff fe51 	bl	800a050 <__multadd>
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	10ad      	asrs	r5, r5, #2
 800a3b2:	d03d      	beq.n	800a430 <__pow5mult+0xa0>
 800a3b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a3b6:	b97c      	cbnz	r4, 800a3d8 <__pow5mult+0x48>
 800a3b8:	2010      	movs	r0, #16
 800a3ba:	f7ff fdcd 	bl	8009f58 <malloc>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	6270      	str	r0, [r6, #36]	; 0x24
 800a3c2:	b928      	cbnz	r0, 800a3d0 <__pow5mult+0x40>
 800a3c4:	4b1d      	ldr	r3, [pc, #116]	; (800a43c <__pow5mult+0xac>)
 800a3c6:	481e      	ldr	r0, [pc, #120]	; (800a440 <__pow5mult+0xb0>)
 800a3c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a3cc:	f000 fce8 	bl	800ada0 <__assert_func>
 800a3d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3d4:	6004      	str	r4, [r0, #0]
 800a3d6:	60c4      	str	r4, [r0, #12]
 800a3d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3e0:	b94c      	cbnz	r4, 800a3f6 <__pow5mult+0x66>
 800a3e2:	f240 2171 	movw	r1, #625	; 0x271
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f7ff ff16 	bl	800a218 <__i2b>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	6003      	str	r3, [r0, #0]
 800a3f6:	f04f 0900 	mov.w	r9, #0
 800a3fa:	07eb      	lsls	r3, r5, #31
 800a3fc:	d50a      	bpl.n	800a414 <__pow5mult+0x84>
 800a3fe:	4639      	mov	r1, r7
 800a400:	4622      	mov	r2, r4
 800a402:	4630      	mov	r0, r6
 800a404:	f7ff ff1e 	bl	800a244 <__multiply>
 800a408:	4639      	mov	r1, r7
 800a40a:	4680      	mov	r8, r0
 800a40c:	4630      	mov	r0, r6
 800a40e:	f7ff fdfd 	bl	800a00c <_Bfree>
 800a412:	4647      	mov	r7, r8
 800a414:	106d      	asrs	r5, r5, #1
 800a416:	d00b      	beq.n	800a430 <__pow5mult+0xa0>
 800a418:	6820      	ldr	r0, [r4, #0]
 800a41a:	b938      	cbnz	r0, 800a42c <__pow5mult+0x9c>
 800a41c:	4622      	mov	r2, r4
 800a41e:	4621      	mov	r1, r4
 800a420:	4630      	mov	r0, r6
 800a422:	f7ff ff0f 	bl	800a244 <__multiply>
 800a426:	6020      	str	r0, [r4, #0]
 800a428:	f8c0 9000 	str.w	r9, [r0]
 800a42c:	4604      	mov	r4, r0
 800a42e:	e7e4      	b.n	800a3fa <__pow5mult+0x6a>
 800a430:	4638      	mov	r0, r7
 800a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a436:	bf00      	nop
 800a438:	0800c628 	.word	0x0800c628
 800a43c:	0800c3ce 	.word	0x0800c3ce
 800a440:	0800c4d4 	.word	0x0800c4d4

0800a444 <__lshift>:
 800a444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a448:	460c      	mov	r4, r1
 800a44a:	6849      	ldr	r1, [r1, #4]
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	4607      	mov	r7, r0
 800a456:	4691      	mov	r9, r2
 800a458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a45c:	f108 0601 	add.w	r6, r8, #1
 800a460:	42b3      	cmp	r3, r6
 800a462:	db0b      	blt.n	800a47c <__lshift+0x38>
 800a464:	4638      	mov	r0, r7
 800a466:	f7ff fd91 	bl	8009f8c <_Balloc>
 800a46a:	4605      	mov	r5, r0
 800a46c:	b948      	cbnz	r0, 800a482 <__lshift+0x3e>
 800a46e:	4602      	mov	r2, r0
 800a470:	4b28      	ldr	r3, [pc, #160]	; (800a514 <__lshift+0xd0>)
 800a472:	4829      	ldr	r0, [pc, #164]	; (800a518 <__lshift+0xd4>)
 800a474:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a478:	f000 fc92 	bl	800ada0 <__assert_func>
 800a47c:	3101      	adds	r1, #1
 800a47e:	005b      	lsls	r3, r3, #1
 800a480:	e7ee      	b.n	800a460 <__lshift+0x1c>
 800a482:	2300      	movs	r3, #0
 800a484:	f100 0114 	add.w	r1, r0, #20
 800a488:	f100 0210 	add.w	r2, r0, #16
 800a48c:	4618      	mov	r0, r3
 800a48e:	4553      	cmp	r3, sl
 800a490:	db33      	blt.n	800a4fa <__lshift+0xb6>
 800a492:	6920      	ldr	r0, [r4, #16]
 800a494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a498:	f104 0314 	add.w	r3, r4, #20
 800a49c:	f019 091f 	ands.w	r9, r9, #31
 800a4a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4a8:	d02b      	beq.n	800a502 <__lshift+0xbe>
 800a4aa:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ae:	468a      	mov	sl, r1
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	6818      	ldr	r0, [r3, #0]
 800a4b4:	fa00 f009 	lsl.w	r0, r0, r9
 800a4b8:	4302      	orrs	r2, r0
 800a4ba:	f84a 2b04 	str.w	r2, [sl], #4
 800a4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c2:	459c      	cmp	ip, r3
 800a4c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4c8:	d8f3      	bhi.n	800a4b2 <__lshift+0x6e>
 800a4ca:	ebac 0304 	sub.w	r3, ip, r4
 800a4ce:	3b15      	subs	r3, #21
 800a4d0:	f023 0303 	bic.w	r3, r3, #3
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	f104 0015 	add.w	r0, r4, #21
 800a4da:	4584      	cmp	ip, r0
 800a4dc:	bf38      	it	cc
 800a4de:	2304      	movcc	r3, #4
 800a4e0:	50ca      	str	r2, [r1, r3]
 800a4e2:	b10a      	cbz	r2, 800a4e8 <__lshift+0xa4>
 800a4e4:	f108 0602 	add.w	r6, r8, #2
 800a4e8:	3e01      	subs	r6, #1
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	612e      	str	r6, [r5, #16]
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	f7ff fd8c 	bl	800a00c <_Bfree>
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4fe:	3301      	adds	r3, #1
 800a500:	e7c5      	b.n	800a48e <__lshift+0x4a>
 800a502:	3904      	subs	r1, #4
 800a504:	f853 2b04 	ldr.w	r2, [r3], #4
 800a508:	f841 2f04 	str.w	r2, [r1, #4]!
 800a50c:	459c      	cmp	ip, r3
 800a50e:	d8f9      	bhi.n	800a504 <__lshift+0xc0>
 800a510:	e7ea      	b.n	800a4e8 <__lshift+0xa4>
 800a512:	bf00      	nop
 800a514:	0800c444 	.word	0x0800c444
 800a518:	0800c4d4 	.word	0x0800c4d4

0800a51c <__mcmp>:
 800a51c:	b530      	push	{r4, r5, lr}
 800a51e:	6902      	ldr	r2, [r0, #16]
 800a520:	690c      	ldr	r4, [r1, #16]
 800a522:	1b12      	subs	r2, r2, r4
 800a524:	d10e      	bne.n	800a544 <__mcmp+0x28>
 800a526:	f100 0314 	add.w	r3, r0, #20
 800a52a:	3114      	adds	r1, #20
 800a52c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a530:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a534:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a538:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a53c:	42a5      	cmp	r5, r4
 800a53e:	d003      	beq.n	800a548 <__mcmp+0x2c>
 800a540:	d305      	bcc.n	800a54e <__mcmp+0x32>
 800a542:	2201      	movs	r2, #1
 800a544:	4610      	mov	r0, r2
 800a546:	bd30      	pop	{r4, r5, pc}
 800a548:	4283      	cmp	r3, r0
 800a54a:	d3f3      	bcc.n	800a534 <__mcmp+0x18>
 800a54c:	e7fa      	b.n	800a544 <__mcmp+0x28>
 800a54e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a552:	e7f7      	b.n	800a544 <__mcmp+0x28>

0800a554 <__mdiff>:
 800a554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a558:	460c      	mov	r4, r1
 800a55a:	4606      	mov	r6, r0
 800a55c:	4611      	mov	r1, r2
 800a55e:	4620      	mov	r0, r4
 800a560:	4617      	mov	r7, r2
 800a562:	f7ff ffdb 	bl	800a51c <__mcmp>
 800a566:	1e05      	subs	r5, r0, #0
 800a568:	d110      	bne.n	800a58c <__mdiff+0x38>
 800a56a:	4629      	mov	r1, r5
 800a56c:	4630      	mov	r0, r6
 800a56e:	f7ff fd0d 	bl	8009f8c <_Balloc>
 800a572:	b930      	cbnz	r0, 800a582 <__mdiff+0x2e>
 800a574:	4b39      	ldr	r3, [pc, #228]	; (800a65c <__mdiff+0x108>)
 800a576:	4602      	mov	r2, r0
 800a578:	f240 2132 	movw	r1, #562	; 0x232
 800a57c:	4838      	ldr	r0, [pc, #224]	; (800a660 <__mdiff+0x10c>)
 800a57e:	f000 fc0f 	bl	800ada0 <__assert_func>
 800a582:	2301      	movs	r3, #1
 800a584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a588:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58c:	bfa4      	itt	ge
 800a58e:	463b      	movge	r3, r7
 800a590:	4627      	movge	r7, r4
 800a592:	4630      	mov	r0, r6
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	bfa6      	itte	ge
 800a598:	461c      	movge	r4, r3
 800a59a:	2500      	movge	r5, #0
 800a59c:	2501      	movlt	r5, #1
 800a59e:	f7ff fcf5 	bl	8009f8c <_Balloc>
 800a5a2:	b920      	cbnz	r0, 800a5ae <__mdiff+0x5a>
 800a5a4:	4b2d      	ldr	r3, [pc, #180]	; (800a65c <__mdiff+0x108>)
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a5ac:	e7e6      	b.n	800a57c <__mdiff+0x28>
 800a5ae:	693e      	ldr	r6, [r7, #16]
 800a5b0:	60c5      	str	r5, [r0, #12]
 800a5b2:	6925      	ldr	r5, [r4, #16]
 800a5b4:	f107 0114 	add.w	r1, r7, #20
 800a5b8:	f104 0914 	add.w	r9, r4, #20
 800a5bc:	f100 0e14 	add.w	lr, r0, #20
 800a5c0:	f107 0210 	add.w	r2, r7, #16
 800a5c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a5c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a5cc:	46f2      	mov	sl, lr
 800a5ce:	2700      	movs	r7, #0
 800a5d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a5d8:	fa1f f883 	uxth.w	r8, r3
 800a5dc:	fa17 f78b 	uxtah	r7, r7, fp
 800a5e0:	0c1b      	lsrs	r3, r3, #16
 800a5e2:	eba7 0808 	sub.w	r8, r7, r8
 800a5e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5ee:	fa1f f888 	uxth.w	r8, r8
 800a5f2:	141f      	asrs	r7, r3, #16
 800a5f4:	454d      	cmp	r5, r9
 800a5f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5fa:	f84a 3b04 	str.w	r3, [sl], #4
 800a5fe:	d8e7      	bhi.n	800a5d0 <__mdiff+0x7c>
 800a600:	1b2b      	subs	r3, r5, r4
 800a602:	3b15      	subs	r3, #21
 800a604:	f023 0303 	bic.w	r3, r3, #3
 800a608:	3304      	adds	r3, #4
 800a60a:	3415      	adds	r4, #21
 800a60c:	42a5      	cmp	r5, r4
 800a60e:	bf38      	it	cc
 800a610:	2304      	movcc	r3, #4
 800a612:	4419      	add	r1, r3
 800a614:	4473      	add	r3, lr
 800a616:	469e      	mov	lr, r3
 800a618:	460d      	mov	r5, r1
 800a61a:	4565      	cmp	r5, ip
 800a61c:	d30e      	bcc.n	800a63c <__mdiff+0xe8>
 800a61e:	f10c 0203 	add.w	r2, ip, #3
 800a622:	1a52      	subs	r2, r2, r1
 800a624:	f022 0203 	bic.w	r2, r2, #3
 800a628:	3903      	subs	r1, #3
 800a62a:	458c      	cmp	ip, r1
 800a62c:	bf38      	it	cc
 800a62e:	2200      	movcc	r2, #0
 800a630:	441a      	add	r2, r3
 800a632:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a636:	b17b      	cbz	r3, 800a658 <__mdiff+0x104>
 800a638:	6106      	str	r6, [r0, #16]
 800a63a:	e7a5      	b.n	800a588 <__mdiff+0x34>
 800a63c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a640:	fa17 f488 	uxtah	r4, r7, r8
 800a644:	1422      	asrs	r2, r4, #16
 800a646:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a64a:	b2a4      	uxth	r4, r4
 800a64c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a650:	f84e 4b04 	str.w	r4, [lr], #4
 800a654:	1417      	asrs	r7, r2, #16
 800a656:	e7e0      	b.n	800a61a <__mdiff+0xc6>
 800a658:	3e01      	subs	r6, #1
 800a65a:	e7ea      	b.n	800a632 <__mdiff+0xde>
 800a65c:	0800c444 	.word	0x0800c444
 800a660:	0800c4d4 	.word	0x0800c4d4

0800a664 <__ulp>:
 800a664:	b082      	sub	sp, #8
 800a666:	ed8d 0b00 	vstr	d0, [sp]
 800a66a:	9b01      	ldr	r3, [sp, #4]
 800a66c:	4912      	ldr	r1, [pc, #72]	; (800a6b8 <__ulp+0x54>)
 800a66e:	4019      	ands	r1, r3
 800a670:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a674:	2900      	cmp	r1, #0
 800a676:	dd05      	ble.n	800a684 <__ulp+0x20>
 800a678:	2200      	movs	r2, #0
 800a67a:	460b      	mov	r3, r1
 800a67c:	ec43 2b10 	vmov	d0, r2, r3
 800a680:	b002      	add	sp, #8
 800a682:	4770      	bx	lr
 800a684:	4249      	negs	r1, r1
 800a686:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a68a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a68e:	f04f 0200 	mov.w	r2, #0
 800a692:	f04f 0300 	mov.w	r3, #0
 800a696:	da04      	bge.n	800a6a2 <__ulp+0x3e>
 800a698:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a69c:	fa41 f300 	asr.w	r3, r1, r0
 800a6a0:	e7ec      	b.n	800a67c <__ulp+0x18>
 800a6a2:	f1a0 0114 	sub.w	r1, r0, #20
 800a6a6:	291e      	cmp	r1, #30
 800a6a8:	bfda      	itte	le
 800a6aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a6ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800a6b2:	2101      	movgt	r1, #1
 800a6b4:	460a      	mov	r2, r1
 800a6b6:	e7e1      	b.n	800a67c <__ulp+0x18>
 800a6b8:	7ff00000 	.word	0x7ff00000

0800a6bc <__b2d>:
 800a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6be:	6905      	ldr	r5, [r0, #16]
 800a6c0:	f100 0714 	add.w	r7, r0, #20
 800a6c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a6c8:	1f2e      	subs	r6, r5, #4
 800a6ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f7ff fd52 	bl	800a178 <__hi0bits>
 800a6d4:	f1c0 0320 	rsb	r3, r0, #32
 800a6d8:	280a      	cmp	r0, #10
 800a6da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a758 <__b2d+0x9c>
 800a6de:	600b      	str	r3, [r1, #0]
 800a6e0:	dc14      	bgt.n	800a70c <__b2d+0x50>
 800a6e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a6e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a6ea:	42b7      	cmp	r7, r6
 800a6ec:	ea41 030c 	orr.w	r3, r1, ip
 800a6f0:	bf34      	ite	cc
 800a6f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6f6:	2100      	movcs	r1, #0
 800a6f8:	3015      	adds	r0, #21
 800a6fa:	fa04 f000 	lsl.w	r0, r4, r0
 800a6fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800a702:	ea40 0201 	orr.w	r2, r0, r1
 800a706:	ec43 2b10 	vmov	d0, r2, r3
 800a70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a70c:	42b7      	cmp	r7, r6
 800a70e:	bf3a      	itte	cc
 800a710:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a714:	f1a5 0608 	subcc.w	r6, r5, #8
 800a718:	2100      	movcs	r1, #0
 800a71a:	380b      	subs	r0, #11
 800a71c:	d017      	beq.n	800a74e <__b2d+0x92>
 800a71e:	f1c0 0c20 	rsb	ip, r0, #32
 800a722:	fa04 f500 	lsl.w	r5, r4, r0
 800a726:	42be      	cmp	r6, r7
 800a728:	fa21 f40c 	lsr.w	r4, r1, ip
 800a72c:	ea45 0504 	orr.w	r5, r5, r4
 800a730:	bf8c      	ite	hi
 800a732:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a736:	2400      	movls	r4, #0
 800a738:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a73c:	fa01 f000 	lsl.w	r0, r1, r0
 800a740:	fa24 f40c 	lsr.w	r4, r4, ip
 800a744:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a748:	ea40 0204 	orr.w	r2, r0, r4
 800a74c:	e7db      	b.n	800a706 <__b2d+0x4a>
 800a74e:	ea44 030c 	orr.w	r3, r4, ip
 800a752:	460a      	mov	r2, r1
 800a754:	e7d7      	b.n	800a706 <__b2d+0x4a>
 800a756:	bf00      	nop
 800a758:	3ff00000 	.word	0x3ff00000

0800a75c <__d2b>:
 800a75c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a760:	4689      	mov	r9, r1
 800a762:	2101      	movs	r1, #1
 800a764:	ec57 6b10 	vmov	r6, r7, d0
 800a768:	4690      	mov	r8, r2
 800a76a:	f7ff fc0f 	bl	8009f8c <_Balloc>
 800a76e:	4604      	mov	r4, r0
 800a770:	b930      	cbnz	r0, 800a780 <__d2b+0x24>
 800a772:	4602      	mov	r2, r0
 800a774:	4b25      	ldr	r3, [pc, #148]	; (800a80c <__d2b+0xb0>)
 800a776:	4826      	ldr	r0, [pc, #152]	; (800a810 <__d2b+0xb4>)
 800a778:	f240 310a 	movw	r1, #778	; 0x30a
 800a77c:	f000 fb10 	bl	800ada0 <__assert_func>
 800a780:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a784:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a788:	bb35      	cbnz	r5, 800a7d8 <__d2b+0x7c>
 800a78a:	2e00      	cmp	r6, #0
 800a78c:	9301      	str	r3, [sp, #4]
 800a78e:	d028      	beq.n	800a7e2 <__d2b+0x86>
 800a790:	4668      	mov	r0, sp
 800a792:	9600      	str	r6, [sp, #0]
 800a794:	f7ff fd10 	bl	800a1b8 <__lo0bits>
 800a798:	9900      	ldr	r1, [sp, #0]
 800a79a:	b300      	cbz	r0, 800a7de <__d2b+0x82>
 800a79c:	9a01      	ldr	r2, [sp, #4]
 800a79e:	f1c0 0320 	rsb	r3, r0, #32
 800a7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a6:	430b      	orrs	r3, r1
 800a7a8:	40c2      	lsrs	r2, r0
 800a7aa:	6163      	str	r3, [r4, #20]
 800a7ac:	9201      	str	r2, [sp, #4]
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	61a3      	str	r3, [r4, #24]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	bf14      	ite	ne
 800a7b6:	2202      	movne	r2, #2
 800a7b8:	2201      	moveq	r2, #1
 800a7ba:	6122      	str	r2, [r4, #16]
 800a7bc:	b1d5      	cbz	r5, 800a7f4 <__d2b+0x98>
 800a7be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a7c2:	4405      	add	r5, r0
 800a7c4:	f8c9 5000 	str.w	r5, [r9]
 800a7c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a7cc:	f8c8 0000 	str.w	r0, [r8]
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	b003      	add	sp, #12
 800a7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a7dc:	e7d5      	b.n	800a78a <__d2b+0x2e>
 800a7de:	6161      	str	r1, [r4, #20]
 800a7e0:	e7e5      	b.n	800a7ae <__d2b+0x52>
 800a7e2:	a801      	add	r0, sp, #4
 800a7e4:	f7ff fce8 	bl	800a1b8 <__lo0bits>
 800a7e8:	9b01      	ldr	r3, [sp, #4]
 800a7ea:	6163      	str	r3, [r4, #20]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	6122      	str	r2, [r4, #16]
 800a7f0:	3020      	adds	r0, #32
 800a7f2:	e7e3      	b.n	800a7bc <__d2b+0x60>
 800a7f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7fc:	f8c9 0000 	str.w	r0, [r9]
 800a800:	6918      	ldr	r0, [r3, #16]
 800a802:	f7ff fcb9 	bl	800a178 <__hi0bits>
 800a806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a80a:	e7df      	b.n	800a7cc <__d2b+0x70>
 800a80c:	0800c444 	.word	0x0800c444
 800a810:	0800c4d4 	.word	0x0800c4d4

0800a814 <__ratio>:
 800a814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a818:	4688      	mov	r8, r1
 800a81a:	4669      	mov	r1, sp
 800a81c:	4681      	mov	r9, r0
 800a81e:	f7ff ff4d 	bl	800a6bc <__b2d>
 800a822:	a901      	add	r1, sp, #4
 800a824:	4640      	mov	r0, r8
 800a826:	ec55 4b10 	vmov	r4, r5, d0
 800a82a:	f7ff ff47 	bl	800a6bc <__b2d>
 800a82e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a832:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a836:	eba3 0c02 	sub.w	ip, r3, r2
 800a83a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a83e:	1a9b      	subs	r3, r3, r2
 800a840:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a844:	ec51 0b10 	vmov	r0, r1, d0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	bfd6      	itet	le
 800a84c:	460a      	movle	r2, r1
 800a84e:	462a      	movgt	r2, r5
 800a850:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a854:	468b      	mov	fp, r1
 800a856:	462f      	mov	r7, r5
 800a858:	bfd4      	ite	le
 800a85a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a85e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a862:	4620      	mov	r0, r4
 800a864:	ee10 2a10 	vmov	r2, s0
 800a868:	465b      	mov	r3, fp
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f5 fff6 	bl	800085c <__aeabi_ddiv>
 800a870:	ec41 0b10 	vmov	d0, r0, r1
 800a874:	b003      	add	sp, #12
 800a876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a87a <__copybits>:
 800a87a:	3901      	subs	r1, #1
 800a87c:	b570      	push	{r4, r5, r6, lr}
 800a87e:	1149      	asrs	r1, r1, #5
 800a880:	6914      	ldr	r4, [r2, #16]
 800a882:	3101      	adds	r1, #1
 800a884:	f102 0314 	add.w	r3, r2, #20
 800a888:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a88c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a890:	1f05      	subs	r5, r0, #4
 800a892:	42a3      	cmp	r3, r4
 800a894:	d30c      	bcc.n	800a8b0 <__copybits+0x36>
 800a896:	1aa3      	subs	r3, r4, r2
 800a898:	3b11      	subs	r3, #17
 800a89a:	f023 0303 	bic.w	r3, r3, #3
 800a89e:	3211      	adds	r2, #17
 800a8a0:	42a2      	cmp	r2, r4
 800a8a2:	bf88      	it	hi
 800a8a4:	2300      	movhi	r3, #0
 800a8a6:	4418      	add	r0, r3
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4288      	cmp	r0, r1
 800a8ac:	d305      	bcc.n	800a8ba <__copybits+0x40>
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8b8:	e7eb      	b.n	800a892 <__copybits+0x18>
 800a8ba:	f840 3b04 	str.w	r3, [r0], #4
 800a8be:	e7f4      	b.n	800a8aa <__copybits+0x30>

0800a8c0 <__any_on>:
 800a8c0:	f100 0214 	add.w	r2, r0, #20
 800a8c4:	6900      	ldr	r0, [r0, #16]
 800a8c6:	114b      	asrs	r3, r1, #5
 800a8c8:	4298      	cmp	r0, r3
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	db11      	blt.n	800a8f2 <__any_on+0x32>
 800a8ce:	dd0a      	ble.n	800a8e6 <__any_on+0x26>
 800a8d0:	f011 011f 	ands.w	r1, r1, #31
 800a8d4:	d007      	beq.n	800a8e6 <__any_on+0x26>
 800a8d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8da:	fa24 f001 	lsr.w	r0, r4, r1
 800a8de:	fa00 f101 	lsl.w	r1, r0, r1
 800a8e2:	428c      	cmp	r4, r1
 800a8e4:	d10b      	bne.n	800a8fe <__any_on+0x3e>
 800a8e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d803      	bhi.n	800a8f6 <__any_on+0x36>
 800a8ee:	2000      	movs	r0, #0
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	e7f7      	b.n	800a8e6 <__any_on+0x26>
 800a8f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8fa:	2900      	cmp	r1, #0
 800a8fc:	d0f5      	beq.n	800a8ea <__any_on+0x2a>
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7f6      	b.n	800a8f0 <__any_on+0x30>

0800a902 <_calloc_r>:
 800a902:	b513      	push	{r0, r1, r4, lr}
 800a904:	434a      	muls	r2, r1
 800a906:	4611      	mov	r1, r2
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	f000 f859 	bl	800a9c0 <_malloc_r>
 800a90e:	4604      	mov	r4, r0
 800a910:	b118      	cbz	r0, 800a91a <_calloc_r+0x18>
 800a912:	9a01      	ldr	r2, [sp, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	f7fc fbd5 	bl	80070c4 <memset>
 800a91a:	4620      	mov	r0, r4
 800a91c:	b002      	add	sp, #8
 800a91e:	bd10      	pop	{r4, pc}

0800a920 <_free_r>:
 800a920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a922:	2900      	cmp	r1, #0
 800a924:	d048      	beq.n	800a9b8 <_free_r+0x98>
 800a926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92a:	9001      	str	r0, [sp, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f1a1 0404 	sub.w	r4, r1, #4
 800a932:	bfb8      	it	lt
 800a934:	18e4      	addlt	r4, r4, r3
 800a936:	f000 fa7d 	bl	800ae34 <__malloc_lock>
 800a93a:	4a20      	ldr	r2, [pc, #128]	; (800a9bc <_free_r+0x9c>)
 800a93c:	9801      	ldr	r0, [sp, #4]
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	4615      	mov	r5, r2
 800a942:	b933      	cbnz	r3, 800a952 <_free_r+0x32>
 800a944:	6063      	str	r3, [r4, #4]
 800a946:	6014      	str	r4, [r2, #0]
 800a948:	b003      	add	sp, #12
 800a94a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94e:	f000 ba77 	b.w	800ae40 <__malloc_unlock>
 800a952:	42a3      	cmp	r3, r4
 800a954:	d90b      	bls.n	800a96e <_free_r+0x4e>
 800a956:	6821      	ldr	r1, [r4, #0]
 800a958:	1862      	adds	r2, r4, r1
 800a95a:	4293      	cmp	r3, r2
 800a95c:	bf04      	itt	eq
 800a95e:	681a      	ldreq	r2, [r3, #0]
 800a960:	685b      	ldreq	r3, [r3, #4]
 800a962:	6063      	str	r3, [r4, #4]
 800a964:	bf04      	itt	eq
 800a966:	1852      	addeq	r2, r2, r1
 800a968:	6022      	streq	r2, [r4, #0]
 800a96a:	602c      	str	r4, [r5, #0]
 800a96c:	e7ec      	b.n	800a948 <_free_r+0x28>
 800a96e:	461a      	mov	r2, r3
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	b10b      	cbz	r3, 800a978 <_free_r+0x58>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d9fa      	bls.n	800a96e <_free_r+0x4e>
 800a978:	6811      	ldr	r1, [r2, #0]
 800a97a:	1855      	adds	r5, r2, r1
 800a97c:	42a5      	cmp	r5, r4
 800a97e:	d10b      	bne.n	800a998 <_free_r+0x78>
 800a980:	6824      	ldr	r4, [r4, #0]
 800a982:	4421      	add	r1, r4
 800a984:	1854      	adds	r4, r2, r1
 800a986:	42a3      	cmp	r3, r4
 800a988:	6011      	str	r1, [r2, #0]
 800a98a:	d1dd      	bne.n	800a948 <_free_r+0x28>
 800a98c:	681c      	ldr	r4, [r3, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	6053      	str	r3, [r2, #4]
 800a992:	4421      	add	r1, r4
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	e7d7      	b.n	800a948 <_free_r+0x28>
 800a998:	d902      	bls.n	800a9a0 <_free_r+0x80>
 800a99a:	230c      	movs	r3, #12
 800a99c:	6003      	str	r3, [r0, #0]
 800a99e:	e7d3      	b.n	800a948 <_free_r+0x28>
 800a9a0:	6825      	ldr	r5, [r4, #0]
 800a9a2:	1961      	adds	r1, r4, r5
 800a9a4:	428b      	cmp	r3, r1
 800a9a6:	bf04      	itt	eq
 800a9a8:	6819      	ldreq	r1, [r3, #0]
 800a9aa:	685b      	ldreq	r3, [r3, #4]
 800a9ac:	6063      	str	r3, [r4, #4]
 800a9ae:	bf04      	itt	eq
 800a9b0:	1949      	addeq	r1, r1, r5
 800a9b2:	6021      	streq	r1, [r4, #0]
 800a9b4:	6054      	str	r4, [r2, #4]
 800a9b6:	e7c7      	b.n	800a948 <_free_r+0x28>
 800a9b8:	b003      	add	sp, #12
 800a9ba:	bd30      	pop	{r4, r5, pc}
 800a9bc:	20000224 	.word	0x20000224

0800a9c0 <_malloc_r>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	1ccd      	adds	r5, r1, #3
 800a9c4:	f025 0503 	bic.w	r5, r5, #3
 800a9c8:	3508      	adds	r5, #8
 800a9ca:	2d0c      	cmp	r5, #12
 800a9cc:	bf38      	it	cc
 800a9ce:	250c      	movcc	r5, #12
 800a9d0:	2d00      	cmp	r5, #0
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	db01      	blt.n	800a9da <_malloc_r+0x1a>
 800a9d6:	42a9      	cmp	r1, r5
 800a9d8:	d903      	bls.n	800a9e2 <_malloc_r+0x22>
 800a9da:	230c      	movs	r3, #12
 800a9dc:	6033      	str	r3, [r6, #0]
 800a9de:	2000      	movs	r0, #0
 800a9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9e2:	f000 fa27 	bl	800ae34 <__malloc_lock>
 800a9e6:	4921      	ldr	r1, [pc, #132]	; (800aa6c <_malloc_r+0xac>)
 800a9e8:	680a      	ldr	r2, [r1, #0]
 800a9ea:	4614      	mov	r4, r2
 800a9ec:	b99c      	cbnz	r4, 800aa16 <_malloc_r+0x56>
 800a9ee:	4f20      	ldr	r7, [pc, #128]	; (800aa70 <_malloc_r+0xb0>)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	b923      	cbnz	r3, 800a9fe <_malloc_r+0x3e>
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f000 f9a2 	bl	800ad40 <_sbrk_r>
 800a9fc:	6038      	str	r0, [r7, #0]
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4630      	mov	r0, r6
 800aa02:	f000 f99d 	bl	800ad40 <_sbrk_r>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d123      	bne.n	800aa52 <_malloc_r+0x92>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	6033      	str	r3, [r6, #0]
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 fa16 	bl	800ae40 <__malloc_unlock>
 800aa14:	e7e3      	b.n	800a9de <_malloc_r+0x1e>
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	1b5b      	subs	r3, r3, r5
 800aa1a:	d417      	bmi.n	800aa4c <_malloc_r+0x8c>
 800aa1c:	2b0b      	cmp	r3, #11
 800aa1e:	d903      	bls.n	800aa28 <_malloc_r+0x68>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	441c      	add	r4, r3
 800aa24:	6025      	str	r5, [r4, #0]
 800aa26:	e004      	b.n	800aa32 <_malloc_r+0x72>
 800aa28:	6863      	ldr	r3, [r4, #4]
 800aa2a:	42a2      	cmp	r2, r4
 800aa2c:	bf0c      	ite	eq
 800aa2e:	600b      	streq	r3, [r1, #0]
 800aa30:	6053      	strne	r3, [r2, #4]
 800aa32:	4630      	mov	r0, r6
 800aa34:	f000 fa04 	bl	800ae40 <__malloc_unlock>
 800aa38:	f104 000b 	add.w	r0, r4, #11
 800aa3c:	1d23      	adds	r3, r4, #4
 800aa3e:	f020 0007 	bic.w	r0, r0, #7
 800aa42:	1ac2      	subs	r2, r0, r3
 800aa44:	d0cc      	beq.n	800a9e0 <_malloc_r+0x20>
 800aa46:	1a1b      	subs	r3, r3, r0
 800aa48:	50a3      	str	r3, [r4, r2]
 800aa4a:	e7c9      	b.n	800a9e0 <_malloc_r+0x20>
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	6864      	ldr	r4, [r4, #4]
 800aa50:	e7cc      	b.n	800a9ec <_malloc_r+0x2c>
 800aa52:	1cc4      	adds	r4, r0, #3
 800aa54:	f024 0403 	bic.w	r4, r4, #3
 800aa58:	42a0      	cmp	r0, r4
 800aa5a:	d0e3      	beq.n	800aa24 <_malloc_r+0x64>
 800aa5c:	1a21      	subs	r1, r4, r0
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f000 f96e 	bl	800ad40 <_sbrk_r>
 800aa64:	3001      	adds	r0, #1
 800aa66:	d1dd      	bne.n	800aa24 <_malloc_r+0x64>
 800aa68:	e7cf      	b.n	800aa0a <_malloc_r+0x4a>
 800aa6a:	bf00      	nop
 800aa6c:	20000224 	.word	0x20000224
 800aa70:	20000228 	.word	0x20000228

0800aa74 <__ssputs_r>:
 800aa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa78:	688e      	ldr	r6, [r1, #8]
 800aa7a:	429e      	cmp	r6, r3
 800aa7c:	4682      	mov	sl, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	4690      	mov	r8, r2
 800aa82:	461f      	mov	r7, r3
 800aa84:	d838      	bhi.n	800aaf8 <__ssputs_r+0x84>
 800aa86:	898a      	ldrh	r2, [r1, #12]
 800aa88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa8c:	d032      	beq.n	800aaf4 <__ssputs_r+0x80>
 800aa8e:	6825      	ldr	r5, [r4, #0]
 800aa90:	6909      	ldr	r1, [r1, #16]
 800aa92:	eba5 0901 	sub.w	r9, r5, r1
 800aa96:	6965      	ldr	r5, [r4, #20]
 800aa98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	444b      	add	r3, r9
 800aaa4:	106d      	asrs	r5, r5, #1
 800aaa6:	429d      	cmp	r5, r3
 800aaa8:	bf38      	it	cc
 800aaaa:	461d      	movcc	r5, r3
 800aaac:	0553      	lsls	r3, r2, #21
 800aaae:	d531      	bpl.n	800ab14 <__ssputs_r+0xa0>
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7ff ff85 	bl	800a9c0 <_malloc_r>
 800aab6:	4606      	mov	r6, r0
 800aab8:	b950      	cbnz	r0, 800aad0 <__ssputs_r+0x5c>
 800aaba:	230c      	movs	r3, #12
 800aabc:	f8ca 3000 	str.w	r3, [sl]
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac6:	81a3      	strh	r3, [r4, #12]
 800aac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aacc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aad0:	6921      	ldr	r1, [r4, #16]
 800aad2:	464a      	mov	r2, r9
 800aad4:	f7fc fae8 	bl	80070a8 <memcpy>
 800aad8:	89a3      	ldrh	r3, [r4, #12]
 800aada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae2:	81a3      	strh	r3, [r4, #12]
 800aae4:	6126      	str	r6, [r4, #16]
 800aae6:	6165      	str	r5, [r4, #20]
 800aae8:	444e      	add	r6, r9
 800aaea:	eba5 0509 	sub.w	r5, r5, r9
 800aaee:	6026      	str	r6, [r4, #0]
 800aaf0:	60a5      	str	r5, [r4, #8]
 800aaf2:	463e      	mov	r6, r7
 800aaf4:	42be      	cmp	r6, r7
 800aaf6:	d900      	bls.n	800aafa <__ssputs_r+0x86>
 800aaf8:	463e      	mov	r6, r7
 800aafa:	4632      	mov	r2, r6
 800aafc:	6820      	ldr	r0, [r4, #0]
 800aafe:	4641      	mov	r1, r8
 800ab00:	f000 f97e 	bl	800ae00 <memmove>
 800ab04:	68a3      	ldr	r3, [r4, #8]
 800ab06:	6822      	ldr	r2, [r4, #0]
 800ab08:	1b9b      	subs	r3, r3, r6
 800ab0a:	4432      	add	r2, r6
 800ab0c:	60a3      	str	r3, [r4, #8]
 800ab0e:	6022      	str	r2, [r4, #0]
 800ab10:	2000      	movs	r0, #0
 800ab12:	e7db      	b.n	800aacc <__ssputs_r+0x58>
 800ab14:	462a      	mov	r2, r5
 800ab16:	f000 f999 	bl	800ae4c <_realloc_r>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1e1      	bne.n	800aae4 <__ssputs_r+0x70>
 800ab20:	6921      	ldr	r1, [r4, #16]
 800ab22:	4650      	mov	r0, sl
 800ab24:	f7ff fefc 	bl	800a920 <_free_r>
 800ab28:	e7c7      	b.n	800aaba <__ssputs_r+0x46>
	...

0800ab2c <_svfiprintf_r>:
 800ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab30:	4698      	mov	r8, r3
 800ab32:	898b      	ldrh	r3, [r1, #12]
 800ab34:	061b      	lsls	r3, r3, #24
 800ab36:	b09d      	sub	sp, #116	; 0x74
 800ab38:	4607      	mov	r7, r0
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	d50e      	bpl.n	800ab5e <_svfiprintf_r+0x32>
 800ab40:	690b      	ldr	r3, [r1, #16]
 800ab42:	b963      	cbnz	r3, 800ab5e <_svfiprintf_r+0x32>
 800ab44:	2140      	movs	r1, #64	; 0x40
 800ab46:	f7ff ff3b 	bl	800a9c0 <_malloc_r>
 800ab4a:	6028      	str	r0, [r5, #0]
 800ab4c:	6128      	str	r0, [r5, #16]
 800ab4e:	b920      	cbnz	r0, 800ab5a <_svfiprintf_r+0x2e>
 800ab50:	230c      	movs	r3, #12
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab58:	e0d1      	b.n	800acfe <_svfiprintf_r+0x1d2>
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	616b      	str	r3, [r5, #20]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	9309      	str	r3, [sp, #36]	; 0x24
 800ab62:	2320      	movs	r3, #32
 800ab64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab68:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab6c:	2330      	movs	r3, #48	; 0x30
 800ab6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad18 <_svfiprintf_r+0x1ec>
 800ab72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab76:	f04f 0901 	mov.w	r9, #1
 800ab7a:	4623      	mov	r3, r4
 800ab7c:	469a      	mov	sl, r3
 800ab7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab82:	b10a      	cbz	r2, 800ab88 <_svfiprintf_r+0x5c>
 800ab84:	2a25      	cmp	r2, #37	; 0x25
 800ab86:	d1f9      	bne.n	800ab7c <_svfiprintf_r+0x50>
 800ab88:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8c:	d00b      	beq.n	800aba6 <_svfiprintf_r+0x7a>
 800ab8e:	465b      	mov	r3, fp
 800ab90:	4622      	mov	r2, r4
 800ab92:	4629      	mov	r1, r5
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff ff6d 	bl	800aa74 <__ssputs_r>
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	f000 80aa 	beq.w	800acf4 <_svfiprintf_r+0x1c8>
 800aba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba2:	445a      	add	r2, fp
 800aba4:	9209      	str	r2, [sp, #36]	; 0x24
 800aba6:	f89a 3000 	ldrb.w	r3, [sl]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 80a2 	beq.w	800acf4 <_svfiprintf_r+0x1c8>
 800abb0:	2300      	movs	r3, #0
 800abb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abba:	f10a 0a01 	add.w	sl, sl, #1
 800abbe:	9304      	str	r3, [sp, #16]
 800abc0:	9307      	str	r3, [sp, #28]
 800abc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abc6:	931a      	str	r3, [sp, #104]	; 0x68
 800abc8:	4654      	mov	r4, sl
 800abca:	2205      	movs	r2, #5
 800abcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd0:	4851      	ldr	r0, [pc, #324]	; (800ad18 <_svfiprintf_r+0x1ec>)
 800abd2:	f7f5 fb0d 	bl	80001f0 <memchr>
 800abd6:	9a04      	ldr	r2, [sp, #16]
 800abd8:	b9d8      	cbnz	r0, 800ac12 <_svfiprintf_r+0xe6>
 800abda:	06d0      	lsls	r0, r2, #27
 800abdc:	bf44      	itt	mi
 800abde:	2320      	movmi	r3, #32
 800abe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe4:	0711      	lsls	r1, r2, #28
 800abe6:	bf44      	itt	mi
 800abe8:	232b      	movmi	r3, #43	; 0x2b
 800abea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abee:	f89a 3000 	ldrb.w	r3, [sl]
 800abf2:	2b2a      	cmp	r3, #42	; 0x2a
 800abf4:	d015      	beq.n	800ac22 <_svfiprintf_r+0xf6>
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	4654      	mov	r4, sl
 800abfa:	2000      	movs	r0, #0
 800abfc:	f04f 0c0a 	mov.w	ip, #10
 800ac00:	4621      	mov	r1, r4
 800ac02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac06:	3b30      	subs	r3, #48	; 0x30
 800ac08:	2b09      	cmp	r3, #9
 800ac0a:	d94e      	bls.n	800acaa <_svfiprintf_r+0x17e>
 800ac0c:	b1b0      	cbz	r0, 800ac3c <_svfiprintf_r+0x110>
 800ac0e:	9207      	str	r2, [sp, #28]
 800ac10:	e014      	b.n	800ac3c <_svfiprintf_r+0x110>
 800ac12:	eba0 0308 	sub.w	r3, r0, r8
 800ac16:	fa09 f303 	lsl.w	r3, r9, r3
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	46a2      	mov	sl, r4
 800ac20:	e7d2      	b.n	800abc8 <_svfiprintf_r+0x9c>
 800ac22:	9b03      	ldr	r3, [sp, #12]
 800ac24:	1d19      	adds	r1, r3, #4
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	9103      	str	r1, [sp, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfbb      	ittet	lt
 800ac2e:	425b      	neglt	r3, r3
 800ac30:	f042 0202 	orrlt.w	r2, r2, #2
 800ac34:	9307      	strge	r3, [sp, #28]
 800ac36:	9307      	strlt	r3, [sp, #28]
 800ac38:	bfb8      	it	lt
 800ac3a:	9204      	strlt	r2, [sp, #16]
 800ac3c:	7823      	ldrb	r3, [r4, #0]
 800ac3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ac40:	d10c      	bne.n	800ac5c <_svfiprintf_r+0x130>
 800ac42:	7863      	ldrb	r3, [r4, #1]
 800ac44:	2b2a      	cmp	r3, #42	; 0x2a
 800ac46:	d135      	bne.n	800acb4 <_svfiprintf_r+0x188>
 800ac48:	9b03      	ldr	r3, [sp, #12]
 800ac4a:	1d1a      	adds	r2, r3, #4
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	9203      	str	r2, [sp, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	bfb8      	it	lt
 800ac54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac58:	3402      	adds	r4, #2
 800ac5a:	9305      	str	r3, [sp, #20]
 800ac5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ad28 <_svfiprintf_r+0x1fc>
 800ac60:	7821      	ldrb	r1, [r4, #0]
 800ac62:	2203      	movs	r2, #3
 800ac64:	4650      	mov	r0, sl
 800ac66:	f7f5 fac3 	bl	80001f0 <memchr>
 800ac6a:	b140      	cbz	r0, 800ac7e <_svfiprintf_r+0x152>
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	eba0 000a 	sub.w	r0, r0, sl
 800ac72:	fa03 f000 	lsl.w	r0, r3, r0
 800ac76:	9b04      	ldr	r3, [sp, #16]
 800ac78:	4303      	orrs	r3, r0
 800ac7a:	3401      	adds	r4, #1
 800ac7c:	9304      	str	r3, [sp, #16]
 800ac7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac82:	4826      	ldr	r0, [pc, #152]	; (800ad1c <_svfiprintf_r+0x1f0>)
 800ac84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac88:	2206      	movs	r2, #6
 800ac8a:	f7f5 fab1 	bl	80001f0 <memchr>
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	d038      	beq.n	800ad04 <_svfiprintf_r+0x1d8>
 800ac92:	4b23      	ldr	r3, [pc, #140]	; (800ad20 <_svfiprintf_r+0x1f4>)
 800ac94:	bb1b      	cbnz	r3, 800acde <_svfiprintf_r+0x1b2>
 800ac96:	9b03      	ldr	r3, [sp, #12]
 800ac98:	3307      	adds	r3, #7
 800ac9a:	f023 0307 	bic.w	r3, r3, #7
 800ac9e:	3308      	adds	r3, #8
 800aca0:	9303      	str	r3, [sp, #12]
 800aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca4:	4433      	add	r3, r6
 800aca6:	9309      	str	r3, [sp, #36]	; 0x24
 800aca8:	e767      	b.n	800ab7a <_svfiprintf_r+0x4e>
 800acaa:	fb0c 3202 	mla	r2, ip, r2, r3
 800acae:	460c      	mov	r4, r1
 800acb0:	2001      	movs	r0, #1
 800acb2:	e7a5      	b.n	800ac00 <_svfiprintf_r+0xd4>
 800acb4:	2300      	movs	r3, #0
 800acb6:	3401      	adds	r4, #1
 800acb8:	9305      	str	r3, [sp, #20]
 800acba:	4619      	mov	r1, r3
 800acbc:	f04f 0c0a 	mov.w	ip, #10
 800acc0:	4620      	mov	r0, r4
 800acc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acc6:	3a30      	subs	r2, #48	; 0x30
 800acc8:	2a09      	cmp	r2, #9
 800acca:	d903      	bls.n	800acd4 <_svfiprintf_r+0x1a8>
 800accc:	2b00      	cmp	r3, #0
 800acce:	d0c5      	beq.n	800ac5c <_svfiprintf_r+0x130>
 800acd0:	9105      	str	r1, [sp, #20]
 800acd2:	e7c3      	b.n	800ac5c <_svfiprintf_r+0x130>
 800acd4:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd8:	4604      	mov	r4, r0
 800acda:	2301      	movs	r3, #1
 800acdc:	e7f0      	b.n	800acc0 <_svfiprintf_r+0x194>
 800acde:	ab03      	add	r3, sp, #12
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	462a      	mov	r2, r5
 800ace4:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <_svfiprintf_r+0x1f8>)
 800ace6:	a904      	add	r1, sp, #16
 800ace8:	4638      	mov	r0, r7
 800acea:	f7fc fa93 	bl	8007214 <_printf_float>
 800acee:	1c42      	adds	r2, r0, #1
 800acf0:	4606      	mov	r6, r0
 800acf2:	d1d6      	bne.n	800aca2 <_svfiprintf_r+0x176>
 800acf4:	89ab      	ldrh	r3, [r5, #12]
 800acf6:	065b      	lsls	r3, r3, #25
 800acf8:	f53f af2c 	bmi.w	800ab54 <_svfiprintf_r+0x28>
 800acfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfe:	b01d      	add	sp, #116	; 0x74
 800ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad04:	ab03      	add	r3, sp, #12
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	462a      	mov	r2, r5
 800ad0a:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <_svfiprintf_r+0x1f8>)
 800ad0c:	a904      	add	r1, sp, #16
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7fc fd24 	bl	800775c <_printf_i>
 800ad14:	e7eb      	b.n	800acee <_svfiprintf_r+0x1c2>
 800ad16:	bf00      	nop
 800ad18:	0800c634 	.word	0x0800c634
 800ad1c:	0800c63e 	.word	0x0800c63e
 800ad20:	08007215 	.word	0x08007215
 800ad24:	0800aa75 	.word	0x0800aa75
 800ad28:	0800c63a 	.word	0x0800c63a
 800ad2c:	00000000 	.word	0x00000000

0800ad30 <nan>:
 800ad30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ad38 <nan+0x8>
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	00000000 	.word	0x00000000
 800ad3c:	7ff80000 	.word	0x7ff80000

0800ad40 <_sbrk_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4d06      	ldr	r5, [pc, #24]	; (800ad5c <_sbrk_r+0x1c>)
 800ad44:	2300      	movs	r3, #0
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	602b      	str	r3, [r5, #0]
 800ad4c:	f7f9 ff02 	bl	8004b54 <_sbrk>
 800ad50:	1c43      	adds	r3, r0, #1
 800ad52:	d102      	bne.n	800ad5a <_sbrk_r+0x1a>
 800ad54:	682b      	ldr	r3, [r5, #0]
 800ad56:	b103      	cbz	r3, 800ad5a <_sbrk_r+0x1a>
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	bd38      	pop	{r3, r4, r5, pc}
 800ad5c:	20000388 	.word	0x20000388

0800ad60 <strncmp>:
 800ad60:	b510      	push	{r4, lr}
 800ad62:	b16a      	cbz	r2, 800ad80 <strncmp+0x20>
 800ad64:	3901      	subs	r1, #1
 800ad66:	1884      	adds	r4, r0, r2
 800ad68:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d103      	bne.n	800ad7c <strncmp+0x1c>
 800ad74:	42a0      	cmp	r0, r4
 800ad76:	d001      	beq.n	800ad7c <strncmp+0x1c>
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1f5      	bne.n	800ad68 <strncmp+0x8>
 800ad7c:	1a98      	subs	r0, r3, r2
 800ad7e:	bd10      	pop	{r4, pc}
 800ad80:	4610      	mov	r0, r2
 800ad82:	e7fc      	b.n	800ad7e <strncmp+0x1e>

0800ad84 <__ascii_wctomb>:
 800ad84:	b149      	cbz	r1, 800ad9a <__ascii_wctomb+0x16>
 800ad86:	2aff      	cmp	r2, #255	; 0xff
 800ad88:	bf85      	ittet	hi
 800ad8a:	238a      	movhi	r3, #138	; 0x8a
 800ad8c:	6003      	strhi	r3, [r0, #0]
 800ad8e:	700a      	strbls	r2, [r1, #0]
 800ad90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad94:	bf98      	it	ls
 800ad96:	2001      	movls	r0, #1
 800ad98:	4770      	bx	lr
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4770      	bx	lr
	...

0800ada0 <__assert_func>:
 800ada0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ada2:	4614      	mov	r4, r2
 800ada4:	461a      	mov	r2, r3
 800ada6:	4b09      	ldr	r3, [pc, #36]	; (800adcc <__assert_func+0x2c>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4605      	mov	r5, r0
 800adac:	68d8      	ldr	r0, [r3, #12]
 800adae:	b14c      	cbz	r4, 800adc4 <__assert_func+0x24>
 800adb0:	4b07      	ldr	r3, [pc, #28]	; (800add0 <__assert_func+0x30>)
 800adb2:	9100      	str	r1, [sp, #0]
 800adb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adb8:	4906      	ldr	r1, [pc, #24]	; (800add4 <__assert_func+0x34>)
 800adba:	462b      	mov	r3, r5
 800adbc:	f000 f80e 	bl	800addc <fiprintf>
 800adc0:	f000 fa84 	bl	800b2cc <abort>
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <__assert_func+0x38>)
 800adc6:	461c      	mov	r4, r3
 800adc8:	e7f3      	b.n	800adb2 <__assert_func+0x12>
 800adca:	bf00      	nop
 800adcc:	20000014 	.word	0x20000014
 800add0:	0800c645 	.word	0x0800c645
 800add4:	0800c652 	.word	0x0800c652
 800add8:	0800c680 	.word	0x0800c680

0800addc <fiprintf>:
 800addc:	b40e      	push	{r1, r2, r3}
 800adde:	b503      	push	{r0, r1, lr}
 800ade0:	4601      	mov	r1, r0
 800ade2:	ab03      	add	r3, sp, #12
 800ade4:	4805      	ldr	r0, [pc, #20]	; (800adfc <fiprintf+0x20>)
 800ade6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adea:	6800      	ldr	r0, [r0, #0]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f000 f87d 	bl	800aeec <_vfiprintf_r>
 800adf2:	b002      	add	sp, #8
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	20000014 	.word	0x20000014

0800ae00 <memmove>:
 800ae00:	4288      	cmp	r0, r1
 800ae02:	b510      	push	{r4, lr}
 800ae04:	eb01 0402 	add.w	r4, r1, r2
 800ae08:	d902      	bls.n	800ae10 <memmove+0x10>
 800ae0a:	4284      	cmp	r4, r0
 800ae0c:	4623      	mov	r3, r4
 800ae0e:	d807      	bhi.n	800ae20 <memmove+0x20>
 800ae10:	1e43      	subs	r3, r0, #1
 800ae12:	42a1      	cmp	r1, r4
 800ae14:	d008      	beq.n	800ae28 <memmove+0x28>
 800ae16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae1e:	e7f8      	b.n	800ae12 <memmove+0x12>
 800ae20:	4402      	add	r2, r0
 800ae22:	4601      	mov	r1, r0
 800ae24:	428a      	cmp	r2, r1
 800ae26:	d100      	bne.n	800ae2a <memmove+0x2a>
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae32:	e7f7      	b.n	800ae24 <memmove+0x24>

0800ae34 <__malloc_lock>:
 800ae34:	4801      	ldr	r0, [pc, #4]	; (800ae3c <__malloc_lock+0x8>)
 800ae36:	f000 bc09 	b.w	800b64c <__retarget_lock_acquire_recursive>
 800ae3a:	bf00      	nop
 800ae3c:	20000390 	.word	0x20000390

0800ae40 <__malloc_unlock>:
 800ae40:	4801      	ldr	r0, [pc, #4]	; (800ae48 <__malloc_unlock+0x8>)
 800ae42:	f000 bc04 	b.w	800b64e <__retarget_lock_release_recursive>
 800ae46:	bf00      	nop
 800ae48:	20000390 	.word	0x20000390

0800ae4c <_realloc_r>:
 800ae4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4e:	4607      	mov	r7, r0
 800ae50:	4614      	mov	r4, r2
 800ae52:	460e      	mov	r6, r1
 800ae54:	b921      	cbnz	r1, 800ae60 <_realloc_r+0x14>
 800ae56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae5a:	4611      	mov	r1, r2
 800ae5c:	f7ff bdb0 	b.w	800a9c0 <_malloc_r>
 800ae60:	b922      	cbnz	r2, 800ae6c <_realloc_r+0x20>
 800ae62:	f7ff fd5d 	bl	800a920 <_free_r>
 800ae66:	4625      	mov	r5, r4
 800ae68:	4628      	mov	r0, r5
 800ae6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae6c:	f000 fc54 	bl	800b718 <_malloc_usable_size_r>
 800ae70:	42a0      	cmp	r0, r4
 800ae72:	d20f      	bcs.n	800ae94 <_realloc_r+0x48>
 800ae74:	4621      	mov	r1, r4
 800ae76:	4638      	mov	r0, r7
 800ae78:	f7ff fda2 	bl	800a9c0 <_malloc_r>
 800ae7c:	4605      	mov	r5, r0
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d0f2      	beq.n	800ae68 <_realloc_r+0x1c>
 800ae82:	4631      	mov	r1, r6
 800ae84:	4622      	mov	r2, r4
 800ae86:	f7fc f90f 	bl	80070a8 <memcpy>
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	f7ff fd47 	bl	800a920 <_free_r>
 800ae92:	e7e9      	b.n	800ae68 <_realloc_r+0x1c>
 800ae94:	4635      	mov	r5, r6
 800ae96:	e7e7      	b.n	800ae68 <_realloc_r+0x1c>

0800ae98 <__sfputc_r>:
 800ae98:	6893      	ldr	r3, [r2, #8]
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	b410      	push	{r4}
 800aea0:	6093      	str	r3, [r2, #8]
 800aea2:	da08      	bge.n	800aeb6 <__sfputc_r+0x1e>
 800aea4:	6994      	ldr	r4, [r2, #24]
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	db01      	blt.n	800aeae <__sfputc_r+0x16>
 800aeaa:	290a      	cmp	r1, #10
 800aeac:	d103      	bne.n	800aeb6 <__sfputc_r+0x1e>
 800aeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb2:	f000 b94b 	b.w	800b14c <__swbuf_r>
 800aeb6:	6813      	ldr	r3, [r2, #0]
 800aeb8:	1c58      	adds	r0, r3, #1
 800aeba:	6010      	str	r0, [r2, #0]
 800aebc:	7019      	strb	r1, [r3, #0]
 800aebe:	4608      	mov	r0, r1
 800aec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <__sfputs_r>:
 800aec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	4614      	mov	r4, r2
 800aece:	18d5      	adds	r5, r2, r3
 800aed0:	42ac      	cmp	r4, r5
 800aed2:	d101      	bne.n	800aed8 <__sfputs_r+0x12>
 800aed4:	2000      	movs	r0, #0
 800aed6:	e007      	b.n	800aee8 <__sfputs_r+0x22>
 800aed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aedc:	463a      	mov	r2, r7
 800aede:	4630      	mov	r0, r6
 800aee0:	f7ff ffda 	bl	800ae98 <__sfputc_r>
 800aee4:	1c43      	adds	r3, r0, #1
 800aee6:	d1f3      	bne.n	800aed0 <__sfputs_r+0xa>
 800aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aeec <_vfiprintf_r>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	460d      	mov	r5, r1
 800aef2:	b09d      	sub	sp, #116	; 0x74
 800aef4:	4614      	mov	r4, r2
 800aef6:	4698      	mov	r8, r3
 800aef8:	4606      	mov	r6, r0
 800aefa:	b118      	cbz	r0, 800af04 <_vfiprintf_r+0x18>
 800aefc:	6983      	ldr	r3, [r0, #24]
 800aefe:	b90b      	cbnz	r3, 800af04 <_vfiprintf_r+0x18>
 800af00:	f000 fb06 	bl	800b510 <__sinit>
 800af04:	4b89      	ldr	r3, [pc, #548]	; (800b12c <_vfiprintf_r+0x240>)
 800af06:	429d      	cmp	r5, r3
 800af08:	d11b      	bne.n	800af42 <_vfiprintf_r+0x56>
 800af0a:	6875      	ldr	r5, [r6, #4]
 800af0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af0e:	07d9      	lsls	r1, r3, #31
 800af10:	d405      	bmi.n	800af1e <_vfiprintf_r+0x32>
 800af12:	89ab      	ldrh	r3, [r5, #12]
 800af14:	059a      	lsls	r2, r3, #22
 800af16:	d402      	bmi.n	800af1e <_vfiprintf_r+0x32>
 800af18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af1a:	f000 fb97 	bl	800b64c <__retarget_lock_acquire_recursive>
 800af1e:	89ab      	ldrh	r3, [r5, #12]
 800af20:	071b      	lsls	r3, r3, #28
 800af22:	d501      	bpl.n	800af28 <_vfiprintf_r+0x3c>
 800af24:	692b      	ldr	r3, [r5, #16]
 800af26:	b9eb      	cbnz	r3, 800af64 <_vfiprintf_r+0x78>
 800af28:	4629      	mov	r1, r5
 800af2a:	4630      	mov	r0, r6
 800af2c:	f000 f960 	bl	800b1f0 <__swsetup_r>
 800af30:	b1c0      	cbz	r0, 800af64 <_vfiprintf_r+0x78>
 800af32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af34:	07dc      	lsls	r4, r3, #31
 800af36:	d50e      	bpl.n	800af56 <_vfiprintf_r+0x6a>
 800af38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af3c:	b01d      	add	sp, #116	; 0x74
 800af3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af42:	4b7b      	ldr	r3, [pc, #492]	; (800b130 <_vfiprintf_r+0x244>)
 800af44:	429d      	cmp	r5, r3
 800af46:	d101      	bne.n	800af4c <_vfiprintf_r+0x60>
 800af48:	68b5      	ldr	r5, [r6, #8]
 800af4a:	e7df      	b.n	800af0c <_vfiprintf_r+0x20>
 800af4c:	4b79      	ldr	r3, [pc, #484]	; (800b134 <_vfiprintf_r+0x248>)
 800af4e:	429d      	cmp	r5, r3
 800af50:	bf08      	it	eq
 800af52:	68f5      	ldreq	r5, [r6, #12]
 800af54:	e7da      	b.n	800af0c <_vfiprintf_r+0x20>
 800af56:	89ab      	ldrh	r3, [r5, #12]
 800af58:	0598      	lsls	r0, r3, #22
 800af5a:	d4ed      	bmi.n	800af38 <_vfiprintf_r+0x4c>
 800af5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af5e:	f000 fb76 	bl	800b64e <__retarget_lock_release_recursive>
 800af62:	e7e9      	b.n	800af38 <_vfiprintf_r+0x4c>
 800af64:	2300      	movs	r3, #0
 800af66:	9309      	str	r3, [sp, #36]	; 0x24
 800af68:	2320      	movs	r3, #32
 800af6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af72:	2330      	movs	r3, #48	; 0x30
 800af74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b138 <_vfiprintf_r+0x24c>
 800af78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af7c:	f04f 0901 	mov.w	r9, #1
 800af80:	4623      	mov	r3, r4
 800af82:	469a      	mov	sl, r3
 800af84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af88:	b10a      	cbz	r2, 800af8e <_vfiprintf_r+0xa2>
 800af8a:	2a25      	cmp	r2, #37	; 0x25
 800af8c:	d1f9      	bne.n	800af82 <_vfiprintf_r+0x96>
 800af8e:	ebba 0b04 	subs.w	fp, sl, r4
 800af92:	d00b      	beq.n	800afac <_vfiprintf_r+0xc0>
 800af94:	465b      	mov	r3, fp
 800af96:	4622      	mov	r2, r4
 800af98:	4629      	mov	r1, r5
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7ff ff93 	bl	800aec6 <__sfputs_r>
 800afa0:	3001      	adds	r0, #1
 800afa2:	f000 80aa 	beq.w	800b0fa <_vfiprintf_r+0x20e>
 800afa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa8:	445a      	add	r2, fp
 800afaa:	9209      	str	r2, [sp, #36]	; 0x24
 800afac:	f89a 3000 	ldrb.w	r3, [sl]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 80a2 	beq.w	800b0fa <_vfiprintf_r+0x20e>
 800afb6:	2300      	movs	r3, #0
 800afb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afc0:	f10a 0a01 	add.w	sl, sl, #1
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	9307      	str	r3, [sp, #28]
 800afc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afcc:	931a      	str	r3, [sp, #104]	; 0x68
 800afce:	4654      	mov	r4, sl
 800afd0:	2205      	movs	r2, #5
 800afd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd6:	4858      	ldr	r0, [pc, #352]	; (800b138 <_vfiprintf_r+0x24c>)
 800afd8:	f7f5 f90a 	bl	80001f0 <memchr>
 800afdc:	9a04      	ldr	r2, [sp, #16]
 800afde:	b9d8      	cbnz	r0, 800b018 <_vfiprintf_r+0x12c>
 800afe0:	06d1      	lsls	r1, r2, #27
 800afe2:	bf44      	itt	mi
 800afe4:	2320      	movmi	r3, #32
 800afe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afea:	0713      	lsls	r3, r2, #28
 800afec:	bf44      	itt	mi
 800afee:	232b      	movmi	r3, #43	; 0x2b
 800aff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aff4:	f89a 3000 	ldrb.w	r3, [sl]
 800aff8:	2b2a      	cmp	r3, #42	; 0x2a
 800affa:	d015      	beq.n	800b028 <_vfiprintf_r+0x13c>
 800affc:	9a07      	ldr	r2, [sp, #28]
 800affe:	4654      	mov	r4, sl
 800b000:	2000      	movs	r0, #0
 800b002:	f04f 0c0a 	mov.w	ip, #10
 800b006:	4621      	mov	r1, r4
 800b008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b00c:	3b30      	subs	r3, #48	; 0x30
 800b00e:	2b09      	cmp	r3, #9
 800b010:	d94e      	bls.n	800b0b0 <_vfiprintf_r+0x1c4>
 800b012:	b1b0      	cbz	r0, 800b042 <_vfiprintf_r+0x156>
 800b014:	9207      	str	r2, [sp, #28]
 800b016:	e014      	b.n	800b042 <_vfiprintf_r+0x156>
 800b018:	eba0 0308 	sub.w	r3, r0, r8
 800b01c:	fa09 f303 	lsl.w	r3, r9, r3
 800b020:	4313      	orrs	r3, r2
 800b022:	9304      	str	r3, [sp, #16]
 800b024:	46a2      	mov	sl, r4
 800b026:	e7d2      	b.n	800afce <_vfiprintf_r+0xe2>
 800b028:	9b03      	ldr	r3, [sp, #12]
 800b02a:	1d19      	adds	r1, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	9103      	str	r1, [sp, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	bfbb      	ittet	lt
 800b034:	425b      	neglt	r3, r3
 800b036:	f042 0202 	orrlt.w	r2, r2, #2
 800b03a:	9307      	strge	r3, [sp, #28]
 800b03c:	9307      	strlt	r3, [sp, #28]
 800b03e:	bfb8      	it	lt
 800b040:	9204      	strlt	r2, [sp, #16]
 800b042:	7823      	ldrb	r3, [r4, #0]
 800b044:	2b2e      	cmp	r3, #46	; 0x2e
 800b046:	d10c      	bne.n	800b062 <_vfiprintf_r+0x176>
 800b048:	7863      	ldrb	r3, [r4, #1]
 800b04a:	2b2a      	cmp	r3, #42	; 0x2a
 800b04c:	d135      	bne.n	800b0ba <_vfiprintf_r+0x1ce>
 800b04e:	9b03      	ldr	r3, [sp, #12]
 800b050:	1d1a      	adds	r2, r3, #4
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	9203      	str	r2, [sp, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	bfb8      	it	lt
 800b05a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b05e:	3402      	adds	r4, #2
 800b060:	9305      	str	r3, [sp, #20]
 800b062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b148 <_vfiprintf_r+0x25c>
 800b066:	7821      	ldrb	r1, [r4, #0]
 800b068:	2203      	movs	r2, #3
 800b06a:	4650      	mov	r0, sl
 800b06c:	f7f5 f8c0 	bl	80001f0 <memchr>
 800b070:	b140      	cbz	r0, 800b084 <_vfiprintf_r+0x198>
 800b072:	2340      	movs	r3, #64	; 0x40
 800b074:	eba0 000a 	sub.w	r0, r0, sl
 800b078:	fa03 f000 	lsl.w	r0, r3, r0
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	4303      	orrs	r3, r0
 800b080:	3401      	adds	r4, #1
 800b082:	9304      	str	r3, [sp, #16]
 800b084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b088:	482c      	ldr	r0, [pc, #176]	; (800b13c <_vfiprintf_r+0x250>)
 800b08a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b08e:	2206      	movs	r2, #6
 800b090:	f7f5 f8ae 	bl	80001f0 <memchr>
 800b094:	2800      	cmp	r0, #0
 800b096:	d03f      	beq.n	800b118 <_vfiprintf_r+0x22c>
 800b098:	4b29      	ldr	r3, [pc, #164]	; (800b140 <_vfiprintf_r+0x254>)
 800b09a:	bb1b      	cbnz	r3, 800b0e4 <_vfiprintf_r+0x1f8>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	3307      	adds	r3, #7
 800b0a0:	f023 0307 	bic.w	r3, r3, #7
 800b0a4:	3308      	adds	r3, #8
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0aa:	443b      	add	r3, r7
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ae:	e767      	b.n	800af80 <_vfiprintf_r+0x94>
 800b0b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0b4:	460c      	mov	r4, r1
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	e7a5      	b.n	800b006 <_vfiprintf_r+0x11a>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	3401      	adds	r4, #1
 800b0be:	9305      	str	r3, [sp, #20]
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	f04f 0c0a 	mov.w	ip, #10
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0cc:	3a30      	subs	r2, #48	; 0x30
 800b0ce:	2a09      	cmp	r2, #9
 800b0d0:	d903      	bls.n	800b0da <_vfiprintf_r+0x1ee>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d0c5      	beq.n	800b062 <_vfiprintf_r+0x176>
 800b0d6:	9105      	str	r1, [sp, #20]
 800b0d8:	e7c3      	b.n	800b062 <_vfiprintf_r+0x176>
 800b0da:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0de:	4604      	mov	r4, r0
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7f0      	b.n	800b0c6 <_vfiprintf_r+0x1da>
 800b0e4:	ab03      	add	r3, sp, #12
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	4b16      	ldr	r3, [pc, #88]	; (800b144 <_vfiprintf_r+0x258>)
 800b0ec:	a904      	add	r1, sp, #16
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7fc f890 	bl	8007214 <_printf_float>
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	1c78      	adds	r0, r7, #1
 800b0f8:	d1d6      	bne.n	800b0a8 <_vfiprintf_r+0x1bc>
 800b0fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0fc:	07d9      	lsls	r1, r3, #31
 800b0fe:	d405      	bmi.n	800b10c <_vfiprintf_r+0x220>
 800b100:	89ab      	ldrh	r3, [r5, #12]
 800b102:	059a      	lsls	r2, r3, #22
 800b104:	d402      	bmi.n	800b10c <_vfiprintf_r+0x220>
 800b106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b108:	f000 faa1 	bl	800b64e <__retarget_lock_release_recursive>
 800b10c:	89ab      	ldrh	r3, [r5, #12]
 800b10e:	065b      	lsls	r3, r3, #25
 800b110:	f53f af12 	bmi.w	800af38 <_vfiprintf_r+0x4c>
 800b114:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b116:	e711      	b.n	800af3c <_vfiprintf_r+0x50>
 800b118:	ab03      	add	r3, sp, #12
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	462a      	mov	r2, r5
 800b11e:	4b09      	ldr	r3, [pc, #36]	; (800b144 <_vfiprintf_r+0x258>)
 800b120:	a904      	add	r1, sp, #16
 800b122:	4630      	mov	r0, r6
 800b124:	f7fc fb1a 	bl	800775c <_printf_i>
 800b128:	e7e4      	b.n	800b0f4 <_vfiprintf_r+0x208>
 800b12a:	bf00      	nop
 800b12c:	0800c6a4 	.word	0x0800c6a4
 800b130:	0800c6c4 	.word	0x0800c6c4
 800b134:	0800c684 	.word	0x0800c684
 800b138:	0800c634 	.word	0x0800c634
 800b13c:	0800c63e 	.word	0x0800c63e
 800b140:	08007215 	.word	0x08007215
 800b144:	0800aec7 	.word	0x0800aec7
 800b148:	0800c63a 	.word	0x0800c63a

0800b14c <__swbuf_r>:
 800b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14e:	460e      	mov	r6, r1
 800b150:	4614      	mov	r4, r2
 800b152:	4605      	mov	r5, r0
 800b154:	b118      	cbz	r0, 800b15e <__swbuf_r+0x12>
 800b156:	6983      	ldr	r3, [r0, #24]
 800b158:	b90b      	cbnz	r3, 800b15e <__swbuf_r+0x12>
 800b15a:	f000 f9d9 	bl	800b510 <__sinit>
 800b15e:	4b21      	ldr	r3, [pc, #132]	; (800b1e4 <__swbuf_r+0x98>)
 800b160:	429c      	cmp	r4, r3
 800b162:	d12b      	bne.n	800b1bc <__swbuf_r+0x70>
 800b164:	686c      	ldr	r4, [r5, #4]
 800b166:	69a3      	ldr	r3, [r4, #24]
 800b168:	60a3      	str	r3, [r4, #8]
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	071a      	lsls	r2, r3, #28
 800b16e:	d52f      	bpl.n	800b1d0 <__swbuf_r+0x84>
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	b36b      	cbz	r3, 800b1d0 <__swbuf_r+0x84>
 800b174:	6923      	ldr	r3, [r4, #16]
 800b176:	6820      	ldr	r0, [r4, #0]
 800b178:	1ac0      	subs	r0, r0, r3
 800b17a:	6963      	ldr	r3, [r4, #20]
 800b17c:	b2f6      	uxtb	r6, r6
 800b17e:	4283      	cmp	r3, r0
 800b180:	4637      	mov	r7, r6
 800b182:	dc04      	bgt.n	800b18e <__swbuf_r+0x42>
 800b184:	4621      	mov	r1, r4
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f92e 	bl	800b3e8 <_fflush_r>
 800b18c:	bb30      	cbnz	r0, 800b1dc <__swbuf_r+0x90>
 800b18e:	68a3      	ldr	r3, [r4, #8]
 800b190:	3b01      	subs	r3, #1
 800b192:	60a3      	str	r3, [r4, #8]
 800b194:	6823      	ldr	r3, [r4, #0]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	6022      	str	r2, [r4, #0]
 800b19a:	701e      	strb	r6, [r3, #0]
 800b19c:	6963      	ldr	r3, [r4, #20]
 800b19e:	3001      	adds	r0, #1
 800b1a0:	4283      	cmp	r3, r0
 800b1a2:	d004      	beq.n	800b1ae <__swbuf_r+0x62>
 800b1a4:	89a3      	ldrh	r3, [r4, #12]
 800b1a6:	07db      	lsls	r3, r3, #31
 800b1a8:	d506      	bpl.n	800b1b8 <__swbuf_r+0x6c>
 800b1aa:	2e0a      	cmp	r6, #10
 800b1ac:	d104      	bne.n	800b1b8 <__swbuf_r+0x6c>
 800b1ae:	4621      	mov	r1, r4
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	f000 f919 	bl	800b3e8 <_fflush_r>
 800b1b6:	b988      	cbnz	r0, 800b1dc <__swbuf_r+0x90>
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1bc:	4b0a      	ldr	r3, [pc, #40]	; (800b1e8 <__swbuf_r+0x9c>)
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d101      	bne.n	800b1c6 <__swbuf_r+0x7a>
 800b1c2:	68ac      	ldr	r4, [r5, #8]
 800b1c4:	e7cf      	b.n	800b166 <__swbuf_r+0x1a>
 800b1c6:	4b09      	ldr	r3, [pc, #36]	; (800b1ec <__swbuf_r+0xa0>)
 800b1c8:	429c      	cmp	r4, r3
 800b1ca:	bf08      	it	eq
 800b1cc:	68ec      	ldreq	r4, [r5, #12]
 800b1ce:	e7ca      	b.n	800b166 <__swbuf_r+0x1a>
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f000 f80c 	bl	800b1f0 <__swsetup_r>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d0cb      	beq.n	800b174 <__swbuf_r+0x28>
 800b1dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b1e0:	e7ea      	b.n	800b1b8 <__swbuf_r+0x6c>
 800b1e2:	bf00      	nop
 800b1e4:	0800c6a4 	.word	0x0800c6a4
 800b1e8:	0800c6c4 	.word	0x0800c6c4
 800b1ec:	0800c684 	.word	0x0800c684

0800b1f0 <__swsetup_r>:
 800b1f0:	4b32      	ldr	r3, [pc, #200]	; (800b2bc <__swsetup_r+0xcc>)
 800b1f2:	b570      	push	{r4, r5, r6, lr}
 800b1f4:	681d      	ldr	r5, [r3, #0]
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	b125      	cbz	r5, 800b206 <__swsetup_r+0x16>
 800b1fc:	69ab      	ldr	r3, [r5, #24]
 800b1fe:	b913      	cbnz	r3, 800b206 <__swsetup_r+0x16>
 800b200:	4628      	mov	r0, r5
 800b202:	f000 f985 	bl	800b510 <__sinit>
 800b206:	4b2e      	ldr	r3, [pc, #184]	; (800b2c0 <__swsetup_r+0xd0>)
 800b208:	429c      	cmp	r4, r3
 800b20a:	d10f      	bne.n	800b22c <__swsetup_r+0x3c>
 800b20c:	686c      	ldr	r4, [r5, #4]
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b214:	0719      	lsls	r1, r3, #28
 800b216:	d42c      	bmi.n	800b272 <__swsetup_r+0x82>
 800b218:	06dd      	lsls	r5, r3, #27
 800b21a:	d411      	bmi.n	800b240 <__swsetup_r+0x50>
 800b21c:	2309      	movs	r3, #9
 800b21e:	6033      	str	r3, [r6, #0]
 800b220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b22a:	e03e      	b.n	800b2aa <__swsetup_r+0xba>
 800b22c:	4b25      	ldr	r3, [pc, #148]	; (800b2c4 <__swsetup_r+0xd4>)
 800b22e:	429c      	cmp	r4, r3
 800b230:	d101      	bne.n	800b236 <__swsetup_r+0x46>
 800b232:	68ac      	ldr	r4, [r5, #8]
 800b234:	e7eb      	b.n	800b20e <__swsetup_r+0x1e>
 800b236:	4b24      	ldr	r3, [pc, #144]	; (800b2c8 <__swsetup_r+0xd8>)
 800b238:	429c      	cmp	r4, r3
 800b23a:	bf08      	it	eq
 800b23c:	68ec      	ldreq	r4, [r5, #12]
 800b23e:	e7e6      	b.n	800b20e <__swsetup_r+0x1e>
 800b240:	0758      	lsls	r0, r3, #29
 800b242:	d512      	bpl.n	800b26a <__swsetup_r+0x7a>
 800b244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b246:	b141      	cbz	r1, 800b25a <__swsetup_r+0x6a>
 800b248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b24c:	4299      	cmp	r1, r3
 800b24e:	d002      	beq.n	800b256 <__swsetup_r+0x66>
 800b250:	4630      	mov	r0, r6
 800b252:	f7ff fb65 	bl	800a920 <_free_r>
 800b256:	2300      	movs	r3, #0
 800b258:	6363      	str	r3, [r4, #52]	; 0x34
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b260:	81a3      	strh	r3, [r4, #12]
 800b262:	2300      	movs	r3, #0
 800b264:	6063      	str	r3, [r4, #4]
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	6023      	str	r3, [r4, #0]
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	f043 0308 	orr.w	r3, r3, #8
 800b270:	81a3      	strh	r3, [r4, #12]
 800b272:	6923      	ldr	r3, [r4, #16]
 800b274:	b94b      	cbnz	r3, 800b28a <__swsetup_r+0x9a>
 800b276:	89a3      	ldrh	r3, [r4, #12]
 800b278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b27c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b280:	d003      	beq.n	800b28a <__swsetup_r+0x9a>
 800b282:	4621      	mov	r1, r4
 800b284:	4630      	mov	r0, r6
 800b286:	f000 fa07 	bl	800b698 <__smakebuf_r>
 800b28a:	89a0      	ldrh	r0, [r4, #12]
 800b28c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b290:	f010 0301 	ands.w	r3, r0, #1
 800b294:	d00a      	beq.n	800b2ac <__swsetup_r+0xbc>
 800b296:	2300      	movs	r3, #0
 800b298:	60a3      	str	r3, [r4, #8]
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	425b      	negs	r3, r3
 800b29e:	61a3      	str	r3, [r4, #24]
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	b943      	cbnz	r3, 800b2b6 <__swsetup_r+0xc6>
 800b2a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2a8:	d1ba      	bne.n	800b220 <__swsetup_r+0x30>
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	0781      	lsls	r1, r0, #30
 800b2ae:	bf58      	it	pl
 800b2b0:	6963      	ldrpl	r3, [r4, #20]
 800b2b2:	60a3      	str	r3, [r4, #8]
 800b2b4:	e7f4      	b.n	800b2a0 <__swsetup_r+0xb0>
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	e7f7      	b.n	800b2aa <__swsetup_r+0xba>
 800b2ba:	bf00      	nop
 800b2bc:	20000014 	.word	0x20000014
 800b2c0:	0800c6a4 	.word	0x0800c6a4
 800b2c4:	0800c6c4 	.word	0x0800c6c4
 800b2c8:	0800c684 	.word	0x0800c684

0800b2cc <abort>:
 800b2cc:	b508      	push	{r3, lr}
 800b2ce:	2006      	movs	r0, #6
 800b2d0:	f000 fa52 	bl	800b778 <raise>
 800b2d4:	2001      	movs	r0, #1
 800b2d6:	f7f9 fbc5 	bl	8004a64 <_exit>
	...

0800b2dc <__sflush_r>:
 800b2dc:	898a      	ldrh	r2, [r1, #12]
 800b2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	0710      	lsls	r0, r2, #28
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	d458      	bmi.n	800b39c <__sflush_r+0xc0>
 800b2ea:	684b      	ldr	r3, [r1, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	dc05      	bgt.n	800b2fc <__sflush_r+0x20>
 800b2f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	dc02      	bgt.n	800b2fc <__sflush_r+0x20>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2fe:	2e00      	cmp	r6, #0
 800b300:	d0f9      	beq.n	800b2f6 <__sflush_r+0x1a>
 800b302:	2300      	movs	r3, #0
 800b304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b308:	682f      	ldr	r7, [r5, #0]
 800b30a:	602b      	str	r3, [r5, #0]
 800b30c:	d032      	beq.n	800b374 <__sflush_r+0x98>
 800b30e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b310:	89a3      	ldrh	r3, [r4, #12]
 800b312:	075a      	lsls	r2, r3, #29
 800b314:	d505      	bpl.n	800b322 <__sflush_r+0x46>
 800b316:	6863      	ldr	r3, [r4, #4]
 800b318:	1ac0      	subs	r0, r0, r3
 800b31a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b31c:	b10b      	cbz	r3, 800b322 <__sflush_r+0x46>
 800b31e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b320:	1ac0      	subs	r0, r0, r3
 800b322:	2300      	movs	r3, #0
 800b324:	4602      	mov	r2, r0
 800b326:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b328:	6a21      	ldr	r1, [r4, #32]
 800b32a:	4628      	mov	r0, r5
 800b32c:	47b0      	blx	r6
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	d106      	bne.n	800b342 <__sflush_r+0x66>
 800b334:	6829      	ldr	r1, [r5, #0]
 800b336:	291d      	cmp	r1, #29
 800b338:	d82c      	bhi.n	800b394 <__sflush_r+0xb8>
 800b33a:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <__sflush_r+0x108>)
 800b33c:	40ca      	lsrs	r2, r1
 800b33e:	07d6      	lsls	r6, r2, #31
 800b340:	d528      	bpl.n	800b394 <__sflush_r+0xb8>
 800b342:	2200      	movs	r2, #0
 800b344:	6062      	str	r2, [r4, #4]
 800b346:	04d9      	lsls	r1, r3, #19
 800b348:	6922      	ldr	r2, [r4, #16]
 800b34a:	6022      	str	r2, [r4, #0]
 800b34c:	d504      	bpl.n	800b358 <__sflush_r+0x7c>
 800b34e:	1c42      	adds	r2, r0, #1
 800b350:	d101      	bne.n	800b356 <__sflush_r+0x7a>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	b903      	cbnz	r3, 800b358 <__sflush_r+0x7c>
 800b356:	6560      	str	r0, [r4, #84]	; 0x54
 800b358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b35a:	602f      	str	r7, [r5, #0]
 800b35c:	2900      	cmp	r1, #0
 800b35e:	d0ca      	beq.n	800b2f6 <__sflush_r+0x1a>
 800b360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b364:	4299      	cmp	r1, r3
 800b366:	d002      	beq.n	800b36e <__sflush_r+0x92>
 800b368:	4628      	mov	r0, r5
 800b36a:	f7ff fad9 	bl	800a920 <_free_r>
 800b36e:	2000      	movs	r0, #0
 800b370:	6360      	str	r0, [r4, #52]	; 0x34
 800b372:	e7c1      	b.n	800b2f8 <__sflush_r+0x1c>
 800b374:	6a21      	ldr	r1, [r4, #32]
 800b376:	2301      	movs	r3, #1
 800b378:	4628      	mov	r0, r5
 800b37a:	47b0      	blx	r6
 800b37c:	1c41      	adds	r1, r0, #1
 800b37e:	d1c7      	bne.n	800b310 <__sflush_r+0x34>
 800b380:	682b      	ldr	r3, [r5, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0c4      	beq.n	800b310 <__sflush_r+0x34>
 800b386:	2b1d      	cmp	r3, #29
 800b388:	d001      	beq.n	800b38e <__sflush_r+0xb2>
 800b38a:	2b16      	cmp	r3, #22
 800b38c:	d101      	bne.n	800b392 <__sflush_r+0xb6>
 800b38e:	602f      	str	r7, [r5, #0]
 800b390:	e7b1      	b.n	800b2f6 <__sflush_r+0x1a>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b398:	81a3      	strh	r3, [r4, #12]
 800b39a:	e7ad      	b.n	800b2f8 <__sflush_r+0x1c>
 800b39c:	690f      	ldr	r7, [r1, #16]
 800b39e:	2f00      	cmp	r7, #0
 800b3a0:	d0a9      	beq.n	800b2f6 <__sflush_r+0x1a>
 800b3a2:	0793      	lsls	r3, r2, #30
 800b3a4:	680e      	ldr	r6, [r1, #0]
 800b3a6:	bf08      	it	eq
 800b3a8:	694b      	ldreq	r3, [r1, #20]
 800b3aa:	600f      	str	r7, [r1, #0]
 800b3ac:	bf18      	it	ne
 800b3ae:	2300      	movne	r3, #0
 800b3b0:	eba6 0807 	sub.w	r8, r6, r7
 800b3b4:	608b      	str	r3, [r1, #8]
 800b3b6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ba:	dd9c      	ble.n	800b2f6 <__sflush_r+0x1a>
 800b3bc:	6a21      	ldr	r1, [r4, #32]
 800b3be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b3c0:	4643      	mov	r3, r8
 800b3c2:	463a      	mov	r2, r7
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b0      	blx	r6
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	dc06      	bgt.n	800b3da <__sflush_r+0xfe>
 800b3cc:	89a3      	ldrh	r3, [r4, #12]
 800b3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3d8:	e78e      	b.n	800b2f8 <__sflush_r+0x1c>
 800b3da:	4407      	add	r7, r0
 800b3dc:	eba8 0800 	sub.w	r8, r8, r0
 800b3e0:	e7e9      	b.n	800b3b6 <__sflush_r+0xda>
 800b3e2:	bf00      	nop
 800b3e4:	20400001 	.word	0x20400001

0800b3e8 <_fflush_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	690b      	ldr	r3, [r1, #16]
 800b3ec:	4605      	mov	r5, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	b913      	cbnz	r3, 800b3f8 <_fflush_r+0x10>
 800b3f2:	2500      	movs	r5, #0
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	b118      	cbz	r0, 800b402 <_fflush_r+0x1a>
 800b3fa:	6983      	ldr	r3, [r0, #24]
 800b3fc:	b90b      	cbnz	r3, 800b402 <_fflush_r+0x1a>
 800b3fe:	f000 f887 	bl	800b510 <__sinit>
 800b402:	4b14      	ldr	r3, [pc, #80]	; (800b454 <_fflush_r+0x6c>)
 800b404:	429c      	cmp	r4, r3
 800b406:	d11b      	bne.n	800b440 <_fflush_r+0x58>
 800b408:	686c      	ldr	r4, [r5, #4]
 800b40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0ef      	beq.n	800b3f2 <_fflush_r+0xa>
 800b412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b414:	07d0      	lsls	r0, r2, #31
 800b416:	d404      	bmi.n	800b422 <_fflush_r+0x3a>
 800b418:	0599      	lsls	r1, r3, #22
 800b41a:	d402      	bmi.n	800b422 <_fflush_r+0x3a>
 800b41c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b41e:	f000 f915 	bl	800b64c <__retarget_lock_acquire_recursive>
 800b422:	4628      	mov	r0, r5
 800b424:	4621      	mov	r1, r4
 800b426:	f7ff ff59 	bl	800b2dc <__sflush_r>
 800b42a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b42c:	07da      	lsls	r2, r3, #31
 800b42e:	4605      	mov	r5, r0
 800b430:	d4e0      	bmi.n	800b3f4 <_fflush_r+0xc>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	059b      	lsls	r3, r3, #22
 800b436:	d4dd      	bmi.n	800b3f4 <_fflush_r+0xc>
 800b438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43a:	f000 f908 	bl	800b64e <__retarget_lock_release_recursive>
 800b43e:	e7d9      	b.n	800b3f4 <_fflush_r+0xc>
 800b440:	4b05      	ldr	r3, [pc, #20]	; (800b458 <_fflush_r+0x70>)
 800b442:	429c      	cmp	r4, r3
 800b444:	d101      	bne.n	800b44a <_fflush_r+0x62>
 800b446:	68ac      	ldr	r4, [r5, #8]
 800b448:	e7df      	b.n	800b40a <_fflush_r+0x22>
 800b44a:	4b04      	ldr	r3, [pc, #16]	; (800b45c <_fflush_r+0x74>)
 800b44c:	429c      	cmp	r4, r3
 800b44e:	bf08      	it	eq
 800b450:	68ec      	ldreq	r4, [r5, #12]
 800b452:	e7da      	b.n	800b40a <_fflush_r+0x22>
 800b454:	0800c6a4 	.word	0x0800c6a4
 800b458:	0800c6c4 	.word	0x0800c6c4
 800b45c:	0800c684 	.word	0x0800c684

0800b460 <std>:
 800b460:	2300      	movs	r3, #0
 800b462:	b510      	push	{r4, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	e9c0 3300 	strd	r3, r3, [r0]
 800b46a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b46e:	6083      	str	r3, [r0, #8]
 800b470:	8181      	strh	r1, [r0, #12]
 800b472:	6643      	str	r3, [r0, #100]	; 0x64
 800b474:	81c2      	strh	r2, [r0, #14]
 800b476:	6183      	str	r3, [r0, #24]
 800b478:	4619      	mov	r1, r3
 800b47a:	2208      	movs	r2, #8
 800b47c:	305c      	adds	r0, #92	; 0x5c
 800b47e:	f7fb fe21 	bl	80070c4 <memset>
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <std+0x38>)
 800b484:	6263      	str	r3, [r4, #36]	; 0x24
 800b486:	4b05      	ldr	r3, [pc, #20]	; (800b49c <std+0x3c>)
 800b488:	62a3      	str	r3, [r4, #40]	; 0x28
 800b48a:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <std+0x40>)
 800b48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <std+0x44>)
 800b490:	6224      	str	r4, [r4, #32]
 800b492:	6323      	str	r3, [r4, #48]	; 0x30
 800b494:	bd10      	pop	{r4, pc}
 800b496:	bf00      	nop
 800b498:	0800b7b1 	.word	0x0800b7b1
 800b49c:	0800b7d3 	.word	0x0800b7d3
 800b4a0:	0800b80b 	.word	0x0800b80b
 800b4a4:	0800b82f 	.word	0x0800b82f

0800b4a8 <_cleanup_r>:
 800b4a8:	4901      	ldr	r1, [pc, #4]	; (800b4b0 <_cleanup_r+0x8>)
 800b4aa:	f000 b8af 	b.w	800b60c <_fwalk_reent>
 800b4ae:	bf00      	nop
 800b4b0:	0800b3e9 	.word	0x0800b3e9

0800b4b4 <__sfmoreglue>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	1e4a      	subs	r2, r1, #1
 800b4b8:	2568      	movs	r5, #104	; 0x68
 800b4ba:	4355      	muls	r5, r2
 800b4bc:	460e      	mov	r6, r1
 800b4be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4c2:	f7ff fa7d 	bl	800a9c0 <_malloc_r>
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	b140      	cbz	r0, 800b4dc <__sfmoreglue+0x28>
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	e9c0 1600 	strd	r1, r6, [r0]
 800b4d0:	300c      	adds	r0, #12
 800b4d2:	60a0      	str	r0, [r4, #8]
 800b4d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4d8:	f7fb fdf4 	bl	80070c4 <memset>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	bd70      	pop	{r4, r5, r6, pc}

0800b4e0 <__sfp_lock_acquire>:
 800b4e0:	4801      	ldr	r0, [pc, #4]	; (800b4e8 <__sfp_lock_acquire+0x8>)
 800b4e2:	f000 b8b3 	b.w	800b64c <__retarget_lock_acquire_recursive>
 800b4e6:	bf00      	nop
 800b4e8:	20000394 	.word	0x20000394

0800b4ec <__sfp_lock_release>:
 800b4ec:	4801      	ldr	r0, [pc, #4]	; (800b4f4 <__sfp_lock_release+0x8>)
 800b4ee:	f000 b8ae 	b.w	800b64e <__retarget_lock_release_recursive>
 800b4f2:	bf00      	nop
 800b4f4:	20000394 	.word	0x20000394

0800b4f8 <__sinit_lock_acquire>:
 800b4f8:	4801      	ldr	r0, [pc, #4]	; (800b500 <__sinit_lock_acquire+0x8>)
 800b4fa:	f000 b8a7 	b.w	800b64c <__retarget_lock_acquire_recursive>
 800b4fe:	bf00      	nop
 800b500:	2000038f 	.word	0x2000038f

0800b504 <__sinit_lock_release>:
 800b504:	4801      	ldr	r0, [pc, #4]	; (800b50c <__sinit_lock_release+0x8>)
 800b506:	f000 b8a2 	b.w	800b64e <__retarget_lock_release_recursive>
 800b50a:	bf00      	nop
 800b50c:	2000038f 	.word	0x2000038f

0800b510 <__sinit>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4604      	mov	r4, r0
 800b514:	f7ff fff0 	bl	800b4f8 <__sinit_lock_acquire>
 800b518:	69a3      	ldr	r3, [r4, #24]
 800b51a:	b11b      	cbz	r3, 800b524 <__sinit+0x14>
 800b51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b520:	f7ff bff0 	b.w	800b504 <__sinit_lock_release>
 800b524:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b528:	6523      	str	r3, [r4, #80]	; 0x50
 800b52a:	4b13      	ldr	r3, [pc, #76]	; (800b578 <__sinit+0x68>)
 800b52c:	4a13      	ldr	r2, [pc, #76]	; (800b57c <__sinit+0x6c>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	62a2      	str	r2, [r4, #40]	; 0x28
 800b532:	42a3      	cmp	r3, r4
 800b534:	bf04      	itt	eq
 800b536:	2301      	moveq	r3, #1
 800b538:	61a3      	streq	r3, [r4, #24]
 800b53a:	4620      	mov	r0, r4
 800b53c:	f000 f820 	bl	800b580 <__sfp>
 800b540:	6060      	str	r0, [r4, #4]
 800b542:	4620      	mov	r0, r4
 800b544:	f000 f81c 	bl	800b580 <__sfp>
 800b548:	60a0      	str	r0, [r4, #8]
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 f818 	bl	800b580 <__sfp>
 800b550:	2200      	movs	r2, #0
 800b552:	60e0      	str	r0, [r4, #12]
 800b554:	2104      	movs	r1, #4
 800b556:	6860      	ldr	r0, [r4, #4]
 800b558:	f7ff ff82 	bl	800b460 <std>
 800b55c:	68a0      	ldr	r0, [r4, #8]
 800b55e:	2201      	movs	r2, #1
 800b560:	2109      	movs	r1, #9
 800b562:	f7ff ff7d 	bl	800b460 <std>
 800b566:	68e0      	ldr	r0, [r4, #12]
 800b568:	2202      	movs	r2, #2
 800b56a:	2112      	movs	r1, #18
 800b56c:	f7ff ff78 	bl	800b460 <std>
 800b570:	2301      	movs	r3, #1
 800b572:	61a3      	str	r3, [r4, #24]
 800b574:	e7d2      	b.n	800b51c <__sinit+0xc>
 800b576:	bf00      	nop
 800b578:	0800c22c 	.word	0x0800c22c
 800b57c:	0800b4a9 	.word	0x0800b4a9

0800b580 <__sfp>:
 800b580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b582:	4607      	mov	r7, r0
 800b584:	f7ff ffac 	bl	800b4e0 <__sfp_lock_acquire>
 800b588:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <__sfp+0x84>)
 800b58a:	681e      	ldr	r6, [r3, #0]
 800b58c:	69b3      	ldr	r3, [r6, #24]
 800b58e:	b913      	cbnz	r3, 800b596 <__sfp+0x16>
 800b590:	4630      	mov	r0, r6
 800b592:	f7ff ffbd 	bl	800b510 <__sinit>
 800b596:	3648      	adds	r6, #72	; 0x48
 800b598:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	d503      	bpl.n	800b5a8 <__sfp+0x28>
 800b5a0:	6833      	ldr	r3, [r6, #0]
 800b5a2:	b30b      	cbz	r3, 800b5e8 <__sfp+0x68>
 800b5a4:	6836      	ldr	r6, [r6, #0]
 800b5a6:	e7f7      	b.n	800b598 <__sfp+0x18>
 800b5a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5ac:	b9d5      	cbnz	r5, 800b5e4 <__sfp+0x64>
 800b5ae:	4b16      	ldr	r3, [pc, #88]	; (800b608 <__sfp+0x88>)
 800b5b0:	60e3      	str	r3, [r4, #12]
 800b5b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5b6:	6665      	str	r5, [r4, #100]	; 0x64
 800b5b8:	f000 f847 	bl	800b64a <__retarget_lock_init_recursive>
 800b5bc:	f7ff ff96 	bl	800b4ec <__sfp_lock_release>
 800b5c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b5c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b5c8:	6025      	str	r5, [r4, #0]
 800b5ca:	61a5      	str	r5, [r4, #24]
 800b5cc:	2208      	movs	r2, #8
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b5d4:	f7fb fd76 	bl	80070c4 <memset>
 800b5d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e4:	3468      	adds	r4, #104	; 0x68
 800b5e6:	e7d9      	b.n	800b59c <__sfp+0x1c>
 800b5e8:	2104      	movs	r1, #4
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	f7ff ff62 	bl	800b4b4 <__sfmoreglue>
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	6030      	str	r0, [r6, #0]
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d1d5      	bne.n	800b5a4 <__sfp+0x24>
 800b5f8:	f7ff ff78 	bl	800b4ec <__sfp_lock_release>
 800b5fc:	230c      	movs	r3, #12
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	e7ee      	b.n	800b5e0 <__sfp+0x60>
 800b602:	bf00      	nop
 800b604:	0800c22c 	.word	0x0800c22c
 800b608:	ffff0001 	.word	0xffff0001

0800b60c <_fwalk_reent>:
 800b60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b610:	4606      	mov	r6, r0
 800b612:	4688      	mov	r8, r1
 800b614:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b618:	2700      	movs	r7, #0
 800b61a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b61e:	f1b9 0901 	subs.w	r9, r9, #1
 800b622:	d505      	bpl.n	800b630 <_fwalk_reent+0x24>
 800b624:	6824      	ldr	r4, [r4, #0]
 800b626:	2c00      	cmp	r4, #0
 800b628:	d1f7      	bne.n	800b61a <_fwalk_reent+0xe>
 800b62a:	4638      	mov	r0, r7
 800b62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b630:	89ab      	ldrh	r3, [r5, #12]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d907      	bls.n	800b646 <_fwalk_reent+0x3a>
 800b636:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b63a:	3301      	adds	r3, #1
 800b63c:	d003      	beq.n	800b646 <_fwalk_reent+0x3a>
 800b63e:	4629      	mov	r1, r5
 800b640:	4630      	mov	r0, r6
 800b642:	47c0      	blx	r8
 800b644:	4307      	orrs	r7, r0
 800b646:	3568      	adds	r5, #104	; 0x68
 800b648:	e7e9      	b.n	800b61e <_fwalk_reent+0x12>

0800b64a <__retarget_lock_init_recursive>:
 800b64a:	4770      	bx	lr

0800b64c <__retarget_lock_acquire_recursive>:
 800b64c:	4770      	bx	lr

0800b64e <__retarget_lock_release_recursive>:
 800b64e:	4770      	bx	lr

0800b650 <__swhatbuf_r>:
 800b650:	b570      	push	{r4, r5, r6, lr}
 800b652:	460e      	mov	r6, r1
 800b654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b658:	2900      	cmp	r1, #0
 800b65a:	b096      	sub	sp, #88	; 0x58
 800b65c:	4614      	mov	r4, r2
 800b65e:	461d      	mov	r5, r3
 800b660:	da07      	bge.n	800b672 <__swhatbuf_r+0x22>
 800b662:	2300      	movs	r3, #0
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	89b3      	ldrh	r3, [r6, #12]
 800b668:	061a      	lsls	r2, r3, #24
 800b66a:	d410      	bmi.n	800b68e <__swhatbuf_r+0x3e>
 800b66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b670:	e00e      	b.n	800b690 <__swhatbuf_r+0x40>
 800b672:	466a      	mov	r2, sp
 800b674:	f000 f902 	bl	800b87c <_fstat_r>
 800b678:	2800      	cmp	r0, #0
 800b67a:	dbf2      	blt.n	800b662 <__swhatbuf_r+0x12>
 800b67c:	9a01      	ldr	r2, [sp, #4]
 800b67e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b682:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b686:	425a      	negs	r2, r3
 800b688:	415a      	adcs	r2, r3
 800b68a:	602a      	str	r2, [r5, #0]
 800b68c:	e7ee      	b.n	800b66c <__swhatbuf_r+0x1c>
 800b68e:	2340      	movs	r3, #64	; 0x40
 800b690:	2000      	movs	r0, #0
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	b016      	add	sp, #88	; 0x58
 800b696:	bd70      	pop	{r4, r5, r6, pc}

0800b698 <__smakebuf_r>:
 800b698:	898b      	ldrh	r3, [r1, #12]
 800b69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b69c:	079d      	lsls	r5, r3, #30
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	d507      	bpl.n	800b6b4 <__smakebuf_r+0x1c>
 800b6a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6a8:	6023      	str	r3, [r4, #0]
 800b6aa:	6123      	str	r3, [r4, #16]
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	6163      	str	r3, [r4, #20]
 800b6b0:	b002      	add	sp, #8
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	ab01      	add	r3, sp, #4
 800b6b6:	466a      	mov	r2, sp
 800b6b8:	f7ff ffca 	bl	800b650 <__swhatbuf_r>
 800b6bc:	9900      	ldr	r1, [sp, #0]
 800b6be:	4605      	mov	r5, r0
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff f97d 	bl	800a9c0 <_malloc_r>
 800b6c6:	b948      	cbnz	r0, 800b6dc <__smakebuf_r+0x44>
 800b6c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6cc:	059a      	lsls	r2, r3, #22
 800b6ce:	d4ef      	bmi.n	800b6b0 <__smakebuf_r+0x18>
 800b6d0:	f023 0303 	bic.w	r3, r3, #3
 800b6d4:	f043 0302 	orr.w	r3, r3, #2
 800b6d8:	81a3      	strh	r3, [r4, #12]
 800b6da:	e7e3      	b.n	800b6a4 <__smakebuf_r+0xc>
 800b6dc:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <__smakebuf_r+0x7c>)
 800b6de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	6020      	str	r0, [r4, #0]
 800b6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	9b00      	ldr	r3, [sp, #0]
 800b6ec:	6163      	str	r3, [r4, #20]
 800b6ee:	9b01      	ldr	r3, [sp, #4]
 800b6f0:	6120      	str	r0, [r4, #16]
 800b6f2:	b15b      	cbz	r3, 800b70c <__smakebuf_r+0x74>
 800b6f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f000 f8d1 	bl	800b8a0 <_isatty_r>
 800b6fe:	b128      	cbz	r0, 800b70c <__smakebuf_r+0x74>
 800b700:	89a3      	ldrh	r3, [r4, #12]
 800b702:	f023 0303 	bic.w	r3, r3, #3
 800b706:	f043 0301 	orr.w	r3, r3, #1
 800b70a:	81a3      	strh	r3, [r4, #12]
 800b70c:	89a0      	ldrh	r0, [r4, #12]
 800b70e:	4305      	orrs	r5, r0
 800b710:	81a5      	strh	r5, [r4, #12]
 800b712:	e7cd      	b.n	800b6b0 <__smakebuf_r+0x18>
 800b714:	0800b4a9 	.word	0x0800b4a9

0800b718 <_malloc_usable_size_r>:
 800b718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b71c:	1f18      	subs	r0, r3, #4
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bfbc      	itt	lt
 800b722:	580b      	ldrlt	r3, [r1, r0]
 800b724:	18c0      	addlt	r0, r0, r3
 800b726:	4770      	bx	lr

0800b728 <_raise_r>:
 800b728:	291f      	cmp	r1, #31
 800b72a:	b538      	push	{r3, r4, r5, lr}
 800b72c:	4604      	mov	r4, r0
 800b72e:	460d      	mov	r5, r1
 800b730:	d904      	bls.n	800b73c <_raise_r+0x14>
 800b732:	2316      	movs	r3, #22
 800b734:	6003      	str	r3, [r0, #0]
 800b736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b73a:	bd38      	pop	{r3, r4, r5, pc}
 800b73c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b73e:	b112      	cbz	r2, 800b746 <_raise_r+0x1e>
 800b740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b744:	b94b      	cbnz	r3, 800b75a <_raise_r+0x32>
 800b746:	4620      	mov	r0, r4
 800b748:	f000 f830 	bl	800b7ac <_getpid_r>
 800b74c:	462a      	mov	r2, r5
 800b74e:	4601      	mov	r1, r0
 800b750:	4620      	mov	r0, r4
 800b752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b756:	f000 b817 	b.w	800b788 <_kill_r>
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d00a      	beq.n	800b774 <_raise_r+0x4c>
 800b75e:	1c59      	adds	r1, r3, #1
 800b760:	d103      	bne.n	800b76a <_raise_r+0x42>
 800b762:	2316      	movs	r3, #22
 800b764:	6003      	str	r3, [r0, #0]
 800b766:	2001      	movs	r0, #1
 800b768:	e7e7      	b.n	800b73a <_raise_r+0x12>
 800b76a:	2400      	movs	r4, #0
 800b76c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b770:	4628      	mov	r0, r5
 800b772:	4798      	blx	r3
 800b774:	2000      	movs	r0, #0
 800b776:	e7e0      	b.n	800b73a <_raise_r+0x12>

0800b778 <raise>:
 800b778:	4b02      	ldr	r3, [pc, #8]	; (800b784 <raise+0xc>)
 800b77a:	4601      	mov	r1, r0
 800b77c:	6818      	ldr	r0, [r3, #0]
 800b77e:	f7ff bfd3 	b.w	800b728 <_raise_r>
 800b782:	bf00      	nop
 800b784:	20000014 	.word	0x20000014

0800b788 <_kill_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	; (800b7a8 <_kill_r+0x20>)
 800b78c:	2300      	movs	r3, #0
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	4611      	mov	r1, r2
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	f7f9 f955 	bl	8004a44 <_kill>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d102      	bne.n	800b7a4 <_kill_r+0x1c>
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	b103      	cbz	r3, 800b7a4 <_kill_r+0x1c>
 800b7a2:	6023      	str	r3, [r4, #0]
 800b7a4:	bd38      	pop	{r3, r4, r5, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20000388 	.word	0x20000388

0800b7ac <_getpid_r>:
 800b7ac:	f7f9 b942 	b.w	8004a34 <_getpid>

0800b7b0 <__sread>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7b8:	f000 f894 	bl	800b8e4 <_read_r>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	bfab      	itete	ge
 800b7c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c4:	181b      	addge	r3, r3, r0
 800b7c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7ca:	bfac      	ite	ge
 800b7cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7ce:	81a3      	strhlt	r3, [r4, #12]
 800b7d0:	bd10      	pop	{r4, pc}

0800b7d2 <__swrite>:
 800b7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d6:	461f      	mov	r7, r3
 800b7d8:	898b      	ldrh	r3, [r1, #12]
 800b7da:	05db      	lsls	r3, r3, #23
 800b7dc:	4605      	mov	r5, r0
 800b7de:	460c      	mov	r4, r1
 800b7e0:	4616      	mov	r6, r2
 800b7e2:	d505      	bpl.n	800b7f0 <__swrite+0x1e>
 800b7e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7e8:	2302      	movs	r3, #2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f000 f868 	bl	800b8c0 <_lseek_r>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	463b      	mov	r3, r7
 800b800:	4628      	mov	r0, r5
 800b802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b806:	f000 b817 	b.w	800b838 <_write_r>

0800b80a <__sseek>:
 800b80a:	b510      	push	{r4, lr}
 800b80c:	460c      	mov	r4, r1
 800b80e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b812:	f000 f855 	bl	800b8c0 <_lseek_r>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	89a3      	ldrh	r3, [r4, #12]
 800b81a:	bf15      	itete	ne
 800b81c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b81e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b826:	81a3      	strheq	r3, [r4, #12]
 800b828:	bf18      	it	ne
 800b82a:	81a3      	strhne	r3, [r4, #12]
 800b82c:	bd10      	pop	{r4, pc}

0800b82e <__sclose>:
 800b82e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b832:	f000 b813 	b.w	800b85c <_close_r>
	...

0800b838 <_write_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	; (800b858 <_write_r+0x20>)
 800b83c:	4604      	mov	r4, r0
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	2200      	movs	r2, #0
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f7f9 f933 	bl	8004ab2 <_write>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_write_r+0x1e>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_write_r+0x1e>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20000388 	.word	0x20000388

0800b85c <_close_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d06      	ldr	r5, [pc, #24]	; (800b878 <_close_r+0x1c>)
 800b860:	2300      	movs	r3, #0
 800b862:	4604      	mov	r4, r0
 800b864:	4608      	mov	r0, r1
 800b866:	602b      	str	r3, [r5, #0]
 800b868:	f7f9 f93f 	bl	8004aea <_close>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_close_r+0x1a>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_close_r+0x1a>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20000388 	.word	0x20000388

0800b87c <_fstat_r>:
 800b87c:	b538      	push	{r3, r4, r5, lr}
 800b87e:	4d07      	ldr	r5, [pc, #28]	; (800b89c <_fstat_r+0x20>)
 800b880:	2300      	movs	r3, #0
 800b882:	4604      	mov	r4, r0
 800b884:	4608      	mov	r0, r1
 800b886:	4611      	mov	r1, r2
 800b888:	602b      	str	r3, [r5, #0]
 800b88a:	f7f9 f93a 	bl	8004b02 <_fstat>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	d102      	bne.n	800b898 <_fstat_r+0x1c>
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	b103      	cbz	r3, 800b898 <_fstat_r+0x1c>
 800b896:	6023      	str	r3, [r4, #0]
 800b898:	bd38      	pop	{r3, r4, r5, pc}
 800b89a:	bf00      	nop
 800b89c:	20000388 	.word	0x20000388

0800b8a0 <_isatty_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d06      	ldr	r5, [pc, #24]	; (800b8bc <_isatty_r+0x1c>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	602b      	str	r3, [r5, #0]
 800b8ac:	f7f9 f939 	bl	8004b22 <_isatty>
 800b8b0:	1c43      	adds	r3, r0, #1
 800b8b2:	d102      	bne.n	800b8ba <_isatty_r+0x1a>
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	b103      	cbz	r3, 800b8ba <_isatty_r+0x1a>
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	bd38      	pop	{r3, r4, r5, pc}
 800b8bc:	20000388 	.word	0x20000388

0800b8c0 <_lseek_r>:
 800b8c0:	b538      	push	{r3, r4, r5, lr}
 800b8c2:	4d07      	ldr	r5, [pc, #28]	; (800b8e0 <_lseek_r+0x20>)
 800b8c4:	4604      	mov	r4, r0
 800b8c6:	4608      	mov	r0, r1
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	602a      	str	r2, [r5, #0]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	f7f9 f932 	bl	8004b38 <_lseek>
 800b8d4:	1c43      	adds	r3, r0, #1
 800b8d6:	d102      	bne.n	800b8de <_lseek_r+0x1e>
 800b8d8:	682b      	ldr	r3, [r5, #0]
 800b8da:	b103      	cbz	r3, 800b8de <_lseek_r+0x1e>
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20000388 	.word	0x20000388

0800b8e4 <_read_r>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	4d07      	ldr	r5, [pc, #28]	; (800b904 <_read_r+0x20>)
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	602a      	str	r2, [r5, #0]
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	f7f9 f8c0 	bl	8004a78 <_read>
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	d102      	bne.n	800b902 <_read_r+0x1e>
 800b8fc:	682b      	ldr	r3, [r5, #0]
 800b8fe:	b103      	cbz	r3, 800b902 <_read_r+0x1e>
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	bd38      	pop	{r3, r4, r5, pc}
 800b904:	20000388 	.word	0x20000388

0800b908 <sqrt>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	ed2d 8b02 	vpush	{d8}
 800b90e:	ec55 4b10 	vmov	r4, r5, d0
 800b912:	f000 f861 	bl	800b9d8 <__ieee754_sqrt>
 800b916:	4b15      	ldr	r3, [pc, #84]	; (800b96c <sqrt+0x64>)
 800b918:	eeb0 8a40 	vmov.f32	s16, s0
 800b91c:	eef0 8a60 	vmov.f32	s17, s1
 800b920:	f993 3000 	ldrsb.w	r3, [r3]
 800b924:	3301      	adds	r3, #1
 800b926:	d019      	beq.n	800b95c <sqrt+0x54>
 800b928:	4622      	mov	r2, r4
 800b92a:	462b      	mov	r3, r5
 800b92c:	4620      	mov	r0, r4
 800b92e:	4629      	mov	r1, r5
 800b930:	f7f5 f904 	bl	8000b3c <__aeabi_dcmpun>
 800b934:	b990      	cbnz	r0, 800b95c <sqrt+0x54>
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	4620      	mov	r0, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	f7f5 f8d5 	bl	8000aec <__aeabi_dcmplt>
 800b942:	b158      	cbz	r0, 800b95c <sqrt+0x54>
 800b944:	f7fb fb86 	bl	8007054 <__errno>
 800b948:	2321      	movs	r3, #33	; 0x21
 800b94a:	6003      	str	r3, [r0, #0]
 800b94c:	2200      	movs	r2, #0
 800b94e:	2300      	movs	r3, #0
 800b950:	4610      	mov	r0, r2
 800b952:	4619      	mov	r1, r3
 800b954:	f7f4 ff82 	bl	800085c <__aeabi_ddiv>
 800b958:	ec41 0b18 	vmov	d8, r0, r1
 800b95c:	eeb0 0a48 	vmov.f32	s0, s16
 800b960:	eef0 0a68 	vmov.f32	s1, s17
 800b964:	ecbd 8b02 	vpop	{d8}
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	200001e8 	.word	0x200001e8

0800b970 <asinf>:
 800b970:	b508      	push	{r3, lr}
 800b972:	ed2d 8b02 	vpush	{d8}
 800b976:	eeb0 8a40 	vmov.f32	s16, s0
 800b97a:	f000 f8e1 	bl	800bb40 <__ieee754_asinf>
 800b97e:	4b13      	ldr	r3, [pc, #76]	; (800b9cc <asinf+0x5c>)
 800b980:	f993 3000 	ldrsb.w	r3, [r3]
 800b984:	3301      	adds	r3, #1
 800b986:	eef0 8a40 	vmov.f32	s17, s0
 800b98a:	d01a      	beq.n	800b9c2 <asinf+0x52>
 800b98c:	eeb4 8a48 	vcmp.f32	s16, s16
 800b990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b994:	d615      	bvs.n	800b9c2 <asinf+0x52>
 800b996:	eeb0 0a48 	vmov.f32	s0, s16
 800b99a:	f000 fb2f 	bl	800bffc <fabsf>
 800b99e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b9a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9aa:	dd0a      	ble.n	800b9c2 <asinf+0x52>
 800b9ac:	f7fb fb52 	bl	8007054 <__errno>
 800b9b0:	ecbd 8b02 	vpop	{d8}
 800b9b4:	2321      	movs	r3, #33	; 0x21
 800b9b6:	6003      	str	r3, [r0, #0]
 800b9b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b9bc:	4804      	ldr	r0, [pc, #16]	; (800b9d0 <asinf+0x60>)
 800b9be:	f7fc ba03 	b.w	8007dc8 <nanf>
 800b9c2:	eeb0 0a68 	vmov.f32	s0, s17
 800b9c6:	ecbd 8b02 	vpop	{d8}
 800b9ca:	bd08      	pop	{r3, pc}
 800b9cc:	200001e8 	.word	0x200001e8
 800b9d0:	0800c680 	.word	0x0800c680

0800b9d4 <atan2f>:
 800b9d4:	f000 b99a 	b.w	800bd0c <__ieee754_atan2f>

0800b9d8 <__ieee754_sqrt>:
 800b9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9dc:	ec55 4b10 	vmov	r4, r5, d0
 800b9e0:	4e56      	ldr	r6, [pc, #344]	; (800bb3c <__ieee754_sqrt+0x164>)
 800b9e2:	43ae      	bics	r6, r5
 800b9e4:	ee10 0a10 	vmov	r0, s0
 800b9e8:	ee10 3a10 	vmov	r3, s0
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	462a      	mov	r2, r5
 800b9f0:	d110      	bne.n	800ba14 <__ieee754_sqrt+0x3c>
 800b9f2:	ee10 2a10 	vmov	r2, s0
 800b9f6:	462b      	mov	r3, r5
 800b9f8:	f7f4 fe06 	bl	8000608 <__aeabi_dmul>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4620      	mov	r0, r4
 800ba02:	4629      	mov	r1, r5
 800ba04:	f7f4 fc4a 	bl	800029c <__adddf3>
 800ba08:	4604      	mov	r4, r0
 800ba0a:	460d      	mov	r5, r1
 800ba0c:	ec45 4b10 	vmov	d0, r4, r5
 800ba10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba14:	2d00      	cmp	r5, #0
 800ba16:	dc10      	bgt.n	800ba3a <__ieee754_sqrt+0x62>
 800ba18:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ba1c:	4330      	orrs	r0, r6
 800ba1e:	d0f5      	beq.n	800ba0c <__ieee754_sqrt+0x34>
 800ba20:	b15d      	cbz	r5, 800ba3a <__ieee754_sqrt+0x62>
 800ba22:	ee10 2a10 	vmov	r2, s0
 800ba26:	462b      	mov	r3, r5
 800ba28:	ee10 0a10 	vmov	r0, s0
 800ba2c:	f7f4 fc34 	bl	8000298 <__aeabi_dsub>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	f7f4 ff12 	bl	800085c <__aeabi_ddiv>
 800ba38:	e7e6      	b.n	800ba08 <__ieee754_sqrt+0x30>
 800ba3a:	1509      	asrs	r1, r1, #20
 800ba3c:	d076      	beq.n	800bb2c <__ieee754_sqrt+0x154>
 800ba3e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ba42:	07ce      	lsls	r6, r1, #31
 800ba44:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ba48:	bf5e      	ittt	pl
 800ba4a:	0fda      	lsrpl	r2, r3, #31
 800ba4c:	005b      	lslpl	r3, r3, #1
 800ba4e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ba52:	0fda      	lsrs	r2, r3, #31
 800ba54:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ba58:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ba5c:	2000      	movs	r0, #0
 800ba5e:	106d      	asrs	r5, r5, #1
 800ba60:	005b      	lsls	r3, r3, #1
 800ba62:	f04f 0e16 	mov.w	lr, #22
 800ba66:	4684      	mov	ip, r0
 800ba68:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba6c:	eb0c 0401 	add.w	r4, ip, r1
 800ba70:	4294      	cmp	r4, r2
 800ba72:	bfde      	ittt	le
 800ba74:	1b12      	suble	r2, r2, r4
 800ba76:	eb04 0c01 	addle.w	ip, r4, r1
 800ba7a:	1840      	addle	r0, r0, r1
 800ba7c:	0052      	lsls	r2, r2, #1
 800ba7e:	f1be 0e01 	subs.w	lr, lr, #1
 800ba82:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ba86:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ba8a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba8e:	d1ed      	bne.n	800ba6c <__ieee754_sqrt+0x94>
 800ba90:	4671      	mov	r1, lr
 800ba92:	2720      	movs	r7, #32
 800ba94:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ba98:	4562      	cmp	r2, ip
 800ba9a:	eb04 060e 	add.w	r6, r4, lr
 800ba9e:	dc02      	bgt.n	800baa6 <__ieee754_sqrt+0xce>
 800baa0:	d113      	bne.n	800baca <__ieee754_sqrt+0xf2>
 800baa2:	429e      	cmp	r6, r3
 800baa4:	d811      	bhi.n	800baca <__ieee754_sqrt+0xf2>
 800baa6:	2e00      	cmp	r6, #0
 800baa8:	eb06 0e04 	add.w	lr, r6, r4
 800baac:	da43      	bge.n	800bb36 <__ieee754_sqrt+0x15e>
 800baae:	f1be 0f00 	cmp.w	lr, #0
 800bab2:	db40      	blt.n	800bb36 <__ieee754_sqrt+0x15e>
 800bab4:	f10c 0801 	add.w	r8, ip, #1
 800bab8:	eba2 020c 	sub.w	r2, r2, ip
 800babc:	429e      	cmp	r6, r3
 800babe:	bf88      	it	hi
 800bac0:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800bac4:	1b9b      	subs	r3, r3, r6
 800bac6:	4421      	add	r1, r4
 800bac8:	46c4      	mov	ip, r8
 800baca:	0052      	lsls	r2, r2, #1
 800bacc:	3f01      	subs	r7, #1
 800bace:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bad2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bad6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bada:	d1dd      	bne.n	800ba98 <__ieee754_sqrt+0xc0>
 800badc:	4313      	orrs	r3, r2
 800bade:	d006      	beq.n	800baee <__ieee754_sqrt+0x116>
 800bae0:	1c4c      	adds	r4, r1, #1
 800bae2:	bf13      	iteet	ne
 800bae4:	3101      	addne	r1, #1
 800bae6:	3001      	addeq	r0, #1
 800bae8:	4639      	moveq	r1, r7
 800baea:	f021 0101 	bicne.w	r1, r1, #1
 800baee:	1043      	asrs	r3, r0, #1
 800baf0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800baf4:	0849      	lsrs	r1, r1, #1
 800baf6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bafa:	07c2      	lsls	r2, r0, #31
 800bafc:	bf48      	it	mi
 800bafe:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800bb02:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800bb06:	460c      	mov	r4, r1
 800bb08:	463d      	mov	r5, r7
 800bb0a:	e77f      	b.n	800ba0c <__ieee754_sqrt+0x34>
 800bb0c:	0ada      	lsrs	r2, r3, #11
 800bb0e:	3815      	subs	r0, #21
 800bb10:	055b      	lsls	r3, r3, #21
 800bb12:	2a00      	cmp	r2, #0
 800bb14:	d0fa      	beq.n	800bb0c <__ieee754_sqrt+0x134>
 800bb16:	02d7      	lsls	r7, r2, #11
 800bb18:	d50a      	bpl.n	800bb30 <__ieee754_sqrt+0x158>
 800bb1a:	f1c1 0420 	rsb	r4, r1, #32
 800bb1e:	fa23 f404 	lsr.w	r4, r3, r4
 800bb22:	1e4d      	subs	r5, r1, #1
 800bb24:	408b      	lsls	r3, r1
 800bb26:	4322      	orrs	r2, r4
 800bb28:	1b41      	subs	r1, r0, r5
 800bb2a:	e788      	b.n	800ba3e <__ieee754_sqrt+0x66>
 800bb2c:	4608      	mov	r0, r1
 800bb2e:	e7f0      	b.n	800bb12 <__ieee754_sqrt+0x13a>
 800bb30:	0052      	lsls	r2, r2, #1
 800bb32:	3101      	adds	r1, #1
 800bb34:	e7ef      	b.n	800bb16 <__ieee754_sqrt+0x13e>
 800bb36:	46e0      	mov	r8, ip
 800bb38:	e7be      	b.n	800bab8 <__ieee754_sqrt+0xe0>
 800bb3a:	bf00      	nop
 800bb3c:	7ff00000 	.word	0x7ff00000

0800bb40 <__ieee754_asinf>:
 800bb40:	b538      	push	{r3, r4, r5, lr}
 800bb42:	ee10 5a10 	vmov	r5, s0
 800bb46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bb4a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800bb4e:	ed2d 8b04 	vpush	{d8-d9}
 800bb52:	d10c      	bne.n	800bb6e <__ieee754_asinf+0x2e>
 800bb54:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800bccc <__ieee754_asinf+0x18c>
 800bb58:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800bcd0 <__ieee754_asinf+0x190>
 800bb5c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bb60:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bb64:	eeb0 0a67 	vmov.f32	s0, s15
 800bb68:	ecbd 8b04 	vpop	{d8-d9}
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
 800bb6e:	dd04      	ble.n	800bb7a <__ieee754_asinf+0x3a>
 800bb70:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bb74:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bb78:	e7f6      	b.n	800bb68 <__ieee754_asinf+0x28>
 800bb7a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800bb7e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800bb82:	da0b      	bge.n	800bb9c <__ieee754_asinf+0x5c>
 800bb84:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800bb88:	da52      	bge.n	800bc30 <__ieee754_asinf+0xf0>
 800bb8a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800bcd4 <__ieee754_asinf+0x194>
 800bb8e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800bb92:	eef4 7ae8 	vcmpe.f32	s15, s17
 800bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb9a:	dce5      	bgt.n	800bb68 <__ieee754_asinf+0x28>
 800bb9c:	f000 fa2e 	bl	800bffc <fabsf>
 800bba0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800bba4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800bba8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800bbac:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800bcd8 <__ieee754_asinf+0x198>
 800bbb0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800bcdc <__ieee754_asinf+0x19c>
 800bbb4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800bce0 <__ieee754_asinf+0x1a0>
 800bbb8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800bbbc:	eddf 7a49 	vldr	s15, [pc, #292]	; 800bce4 <__ieee754_asinf+0x1a4>
 800bbc0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bbc4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800bce8 <__ieee754_asinf+0x1a8>
 800bbc8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bbcc:	eddf 7a47 	vldr	s15, [pc, #284]	; 800bcec <__ieee754_asinf+0x1ac>
 800bbd0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bbd4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800bcf0 <__ieee754_asinf+0x1b0>
 800bbd8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800bbdc:	eddf 7a45 	vldr	s15, [pc, #276]	; 800bcf4 <__ieee754_asinf+0x1b4>
 800bbe0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800bbe4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800bcf8 <__ieee754_asinf+0x1b8>
 800bbe8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800bbec:	eddf 7a43 	vldr	s15, [pc, #268]	; 800bcfc <__ieee754_asinf+0x1bc>
 800bbf0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800bbf4:	eeb0 0a48 	vmov.f32	s0, s16
 800bbf8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800bbfc:	f000 f926 	bl	800be4c <__ieee754_sqrtf>
 800bc00:	4b3f      	ldr	r3, [pc, #252]	; (800bd00 <__ieee754_asinf+0x1c0>)
 800bc02:	ee29 9a08 	vmul.f32	s18, s18, s16
 800bc06:	429c      	cmp	r4, r3
 800bc08:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800bc0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bc10:	dd3d      	ble.n	800bc8e <__ieee754_asinf+0x14e>
 800bc12:	eea0 0a06 	vfma.f32	s0, s0, s12
 800bc16:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800bd04 <__ieee754_asinf+0x1c4>
 800bc1a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800bc1e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800bcd0 <__ieee754_asinf+0x190>
 800bc22:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc26:	2d00      	cmp	r5, #0
 800bc28:	bfd8      	it	le
 800bc2a:	eeb1 0a40 	vnegle.f32	s0, s0
 800bc2e:	e79b      	b.n	800bb68 <__ieee754_asinf+0x28>
 800bc30:	ee60 7a00 	vmul.f32	s15, s0, s0
 800bc34:	eddf 6a28 	vldr	s13, [pc, #160]	; 800bcd8 <__ieee754_asinf+0x198>
 800bc38:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800bcdc <__ieee754_asinf+0x19c>
 800bc3c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800bcf0 <__ieee754_asinf+0x1b0>
 800bc40:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800bc44:	eddf 6a27 	vldr	s13, [pc, #156]	; 800bce4 <__ieee754_asinf+0x1a4>
 800bc48:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bc4c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800bce8 <__ieee754_asinf+0x1a8>
 800bc50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bc54:	eddf 6a25 	vldr	s13, [pc, #148]	; 800bcec <__ieee754_asinf+0x1ac>
 800bc58:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bc5c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800bce0 <__ieee754_asinf+0x1a0>
 800bc60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bc64:	eddf 6a23 	vldr	s13, [pc, #140]	; 800bcf4 <__ieee754_asinf+0x1b4>
 800bc68:	eee7 6a86 	vfma.f32	s13, s15, s12
 800bc6c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800bcf8 <__ieee754_asinf+0x1b8>
 800bc70:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800bc74:	eddf 6a21 	vldr	s13, [pc, #132]	; 800bcfc <__ieee754_asinf+0x1bc>
 800bc78:	eee6 6a27 	vfma.f32	s13, s12, s15
 800bc7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc80:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800bc84:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800bc88:	eea0 0a27 	vfma.f32	s0, s0, s15
 800bc8c:	e76c      	b.n	800bb68 <__ieee754_asinf+0x28>
 800bc8e:	ee10 3a10 	vmov	r3, s0
 800bc92:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800bc96:	f023 030f 	bic.w	r3, r3, #15
 800bc9a:	ee07 3a10 	vmov	s14, r3
 800bc9e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800bca2:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bca6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bcaa:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800bcae:	eddf 7a07 	vldr	s15, [pc, #28]	; 800bccc <__ieee754_asinf+0x18c>
 800bcb2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800bcb6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800bcba:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800bd08 <__ieee754_asinf+0x1c8>
 800bcbe:	eeb0 6a40 	vmov.f32	s12, s0
 800bcc2:	eea7 6a66 	vfms.f32	s12, s14, s13
 800bcc6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bcca:	e7aa      	b.n	800bc22 <__ieee754_asinf+0xe2>
 800bccc:	b33bbd2e 	.word	0xb33bbd2e
 800bcd0:	3fc90fdb 	.word	0x3fc90fdb
 800bcd4:	7149f2ca 	.word	0x7149f2ca
 800bcd8:	3811ef08 	.word	0x3811ef08
 800bcdc:	3a4f7f04 	.word	0x3a4f7f04
 800bce0:	3e2aaaab 	.word	0x3e2aaaab
 800bce4:	bd241146 	.word	0xbd241146
 800bce8:	3e4e0aa8 	.word	0x3e4e0aa8
 800bcec:	bea6b090 	.word	0xbea6b090
 800bcf0:	3d9dc62e 	.word	0x3d9dc62e
 800bcf4:	bf303361 	.word	0xbf303361
 800bcf8:	4001572d 	.word	0x4001572d
 800bcfc:	c019d139 	.word	0xc019d139
 800bd00:	3f799999 	.word	0x3f799999
 800bd04:	333bbd2e 	.word	0x333bbd2e
 800bd08:	3f490fdb 	.word	0x3f490fdb

0800bd0c <__ieee754_atan2f>:
 800bd0c:	ee10 2a90 	vmov	r2, s1
 800bd10:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800bd14:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	eef0 7a40 	vmov.f32	s15, s0
 800bd1e:	dc06      	bgt.n	800bd2e <__ieee754_atan2f+0x22>
 800bd20:	ee10 0a10 	vmov	r0, s0
 800bd24:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800bd28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd2c:	dd04      	ble.n	800bd38 <__ieee754_atan2f+0x2c>
 800bd2e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800bd32:	eeb0 0a67 	vmov.f32	s0, s15
 800bd36:	bd10      	pop	{r4, pc}
 800bd38:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800bd3c:	d103      	bne.n	800bd46 <__ieee754_atan2f+0x3a>
 800bd3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd42:	f000 b887 	b.w	800be54 <atanf>
 800bd46:	1794      	asrs	r4, r2, #30
 800bd48:	f004 0402 	and.w	r4, r4, #2
 800bd4c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800bd50:	b943      	cbnz	r3, 800bd64 <__ieee754_atan2f+0x58>
 800bd52:	2c02      	cmp	r4, #2
 800bd54:	d05e      	beq.n	800be14 <__ieee754_atan2f+0x108>
 800bd56:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800be28 <__ieee754_atan2f+0x11c>
 800bd5a:	2c03      	cmp	r4, #3
 800bd5c:	bf08      	it	eq
 800bd5e:	eef0 7a47 	vmoveq.f32	s15, s14
 800bd62:	e7e6      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800bd64:	b941      	cbnz	r1, 800bd78 <__ieee754_atan2f+0x6c>
 800bd66:	eddf 7a31 	vldr	s15, [pc, #196]	; 800be2c <__ieee754_atan2f+0x120>
 800bd6a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800be30 <__ieee754_atan2f+0x124>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	bfb8      	it	lt
 800bd72:	eef0 7a40 	vmovlt.f32	s15, s0
 800bd76:	e7dc      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800bd78:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bd7c:	d110      	bne.n	800bda0 <__ieee754_atan2f+0x94>
 800bd7e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bd82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800bd86:	d107      	bne.n	800bd98 <__ieee754_atan2f+0x8c>
 800bd88:	2c02      	cmp	r4, #2
 800bd8a:	d846      	bhi.n	800be1a <__ieee754_atan2f+0x10e>
 800bd8c:	4b29      	ldr	r3, [pc, #164]	; (800be34 <__ieee754_atan2f+0x128>)
 800bd8e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bd92:	edd4 7a00 	vldr	s15, [r4]
 800bd96:	e7cc      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800bd98:	2c02      	cmp	r4, #2
 800bd9a:	d841      	bhi.n	800be20 <__ieee754_atan2f+0x114>
 800bd9c:	4b26      	ldr	r3, [pc, #152]	; (800be38 <__ieee754_atan2f+0x12c>)
 800bd9e:	e7f6      	b.n	800bd8e <__ieee754_atan2f+0x82>
 800bda0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bda4:	d0df      	beq.n	800bd66 <__ieee754_atan2f+0x5a>
 800bda6:	1a5b      	subs	r3, r3, r1
 800bda8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800bdac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800bdb0:	da1a      	bge.n	800bde8 <__ieee754_atan2f+0xdc>
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	da01      	bge.n	800bdba <__ieee754_atan2f+0xae>
 800bdb6:	313c      	adds	r1, #60	; 0x3c
 800bdb8:	db19      	blt.n	800bdee <__ieee754_atan2f+0xe2>
 800bdba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800bdbe:	f000 f91d 	bl	800bffc <fabsf>
 800bdc2:	f000 f847 	bl	800be54 <atanf>
 800bdc6:	eef0 7a40 	vmov.f32	s15, s0
 800bdca:	2c01      	cmp	r4, #1
 800bdcc:	d012      	beq.n	800bdf4 <__ieee754_atan2f+0xe8>
 800bdce:	2c02      	cmp	r4, #2
 800bdd0:	d017      	beq.n	800be02 <__ieee754_atan2f+0xf6>
 800bdd2:	2c00      	cmp	r4, #0
 800bdd4:	d0ad      	beq.n	800bd32 <__ieee754_atan2f+0x26>
 800bdd6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800be3c <__ieee754_atan2f+0x130>
 800bdda:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bdde:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800be40 <__ieee754_atan2f+0x134>
 800bde2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bde6:	e7a4      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800bde8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800be2c <__ieee754_atan2f+0x120>
 800bdec:	e7ed      	b.n	800bdca <__ieee754_atan2f+0xbe>
 800bdee:	eddf 7a15 	vldr	s15, [pc, #84]	; 800be44 <__ieee754_atan2f+0x138>
 800bdf2:	e7ea      	b.n	800bdca <__ieee754_atan2f+0xbe>
 800bdf4:	ee17 3a90 	vmov	r3, s15
 800bdf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bdfc:	ee07 3a90 	vmov	s15, r3
 800be00:	e797      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800be02:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800be3c <__ieee754_atan2f+0x130>
 800be06:	ee77 7a80 	vadd.f32	s15, s15, s0
 800be0a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800be40 <__ieee754_atan2f+0x134>
 800be0e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800be12:	e78e      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800be14:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800be40 <__ieee754_atan2f+0x134>
 800be18:	e78b      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800be1a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800be48 <__ieee754_atan2f+0x13c>
 800be1e:	e788      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800be20:	eddf 7a08 	vldr	s15, [pc, #32]	; 800be44 <__ieee754_atan2f+0x138>
 800be24:	e785      	b.n	800bd32 <__ieee754_atan2f+0x26>
 800be26:	bf00      	nop
 800be28:	c0490fdb 	.word	0xc0490fdb
 800be2c:	3fc90fdb 	.word	0x3fc90fdb
 800be30:	bfc90fdb 	.word	0xbfc90fdb
 800be34:	0800c6e4 	.word	0x0800c6e4
 800be38:	0800c6f0 	.word	0x0800c6f0
 800be3c:	33bbbd2e 	.word	0x33bbbd2e
 800be40:	40490fdb 	.word	0x40490fdb
 800be44:	00000000 	.word	0x00000000
 800be48:	3f490fdb 	.word	0x3f490fdb

0800be4c <__ieee754_sqrtf>:
 800be4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be50:	4770      	bx	lr
	...

0800be54 <atanf>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	ee10 5a10 	vmov	r5, s0
 800be5a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800be5e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800be62:	eef0 7a40 	vmov.f32	s15, s0
 800be66:	db10      	blt.n	800be8a <atanf+0x36>
 800be68:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800be6c:	dd04      	ble.n	800be78 <atanf+0x24>
 800be6e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800be72:	eeb0 0a67 	vmov.f32	s0, s15
 800be76:	bd38      	pop	{r3, r4, r5, pc}
 800be78:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800bfb0 <atanf+0x15c>
 800be7c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800bfb4 <atanf+0x160>
 800be80:	2d00      	cmp	r5, #0
 800be82:	bfd8      	it	le
 800be84:	eef0 7a40 	vmovle.f32	s15, s0
 800be88:	e7f3      	b.n	800be72 <atanf+0x1e>
 800be8a:	4b4b      	ldr	r3, [pc, #300]	; (800bfb8 <atanf+0x164>)
 800be8c:	429c      	cmp	r4, r3
 800be8e:	dc10      	bgt.n	800beb2 <atanf+0x5e>
 800be90:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800be94:	da0a      	bge.n	800beac <atanf+0x58>
 800be96:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800bfbc <atanf+0x168>
 800be9a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800be9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bea2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800bea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beaa:	dce2      	bgt.n	800be72 <atanf+0x1e>
 800beac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beb0:	e013      	b.n	800beda <atanf+0x86>
 800beb2:	f000 f8a3 	bl	800bffc <fabsf>
 800beb6:	4b42      	ldr	r3, [pc, #264]	; (800bfc0 <atanf+0x16c>)
 800beb8:	429c      	cmp	r4, r3
 800beba:	dc4f      	bgt.n	800bf5c <atanf+0x108>
 800bebc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800bec0:	429c      	cmp	r4, r3
 800bec2:	dc41      	bgt.n	800bf48 <atanf+0xf4>
 800bec4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800bec8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800becc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bed0:	2300      	movs	r3, #0
 800bed2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bed6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800beda:	1c5a      	adds	r2, r3, #1
 800bedc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800bee0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800bfc4 <atanf+0x170>
 800bee4:	ed9f 6a38 	vldr	s12, [pc, #224]	; 800bfc8 <atanf+0x174>
 800bee8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800bfcc <atanf+0x178>
 800beec:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800bfd0 <atanf+0x17c>
 800bef0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bef4:	eea7 6a25 	vfma.f32	s12, s14, s11
 800bef8:	eddf 5a36 	vldr	s11, [pc, #216]	; 800bfd4 <atanf+0x180>
 800befc:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bf00:	ed9f 6a35 	vldr	s12, [pc, #212]	; 800bfd8 <atanf+0x184>
 800bf04:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bf08:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bfdc <atanf+0x188>
 800bf0c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800bf10:	ed9f 6a33 	vldr	s12, [pc, #204]	; 800bfe0 <atanf+0x18c>
 800bf14:	eea5 6a87 	vfma.f32	s12, s11, s14
 800bf18:	eddf 5a32 	vldr	s11, [pc, #200]	; 800bfe4 <atanf+0x190>
 800bf1c:	eee7 5a05 	vfma.f32	s11, s14, s10
 800bf20:	ed9f 5a31 	vldr	s10, [pc, #196]	; 800bfe8 <atanf+0x194>
 800bf24:	eea5 5a87 	vfma.f32	s10, s11, s14
 800bf28:	eddf 5a30 	vldr	s11, [pc, #192]	; 800bfec <atanf+0x198>
 800bf2c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800bf30:	eea5 0a87 	vfma.f32	s0, s11, s14
 800bf34:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bf38:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bf3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf40:	d121      	bne.n	800bf86 <atanf+0x132>
 800bf42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800bf46:	e794      	b.n	800be72 <atanf+0x1e>
 800bf48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bf50:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bf54:	2301      	movs	r3, #1
 800bf56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf5a:	e7be      	b.n	800beda <atanf+0x86>
 800bf5c:	4b24      	ldr	r3, [pc, #144]	; (800bff0 <atanf+0x19c>)
 800bf5e:	429c      	cmp	r4, r3
 800bf60:	dc0b      	bgt.n	800bf7a <atanf+0x126>
 800bf62:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800bf66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800bf6e:	2302      	movs	r3, #2
 800bf70:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bf74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf78:	e7af      	b.n	800beda <atanf+0x86>
 800bf7a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bf7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bf82:	2303      	movs	r3, #3
 800bf84:	e7a9      	b.n	800beda <atanf+0x86>
 800bf86:	4a1b      	ldr	r2, [pc, #108]	; (800bff4 <atanf+0x1a0>)
 800bf88:	491b      	ldr	r1, [pc, #108]	; (800bff8 <atanf+0x1a4>)
 800bf8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf8e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800bf92:	ed93 7a00 	vldr	s14, [r3]
 800bf96:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bf9a:	2d00      	cmp	r5, #0
 800bf9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bfa0:	ed92 0a00 	vldr	s0, [r2]
 800bfa4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bfa8:	bfb8      	it	lt
 800bfaa:	eef1 7a67 	vneglt.f32	s15, s15
 800bfae:	e760      	b.n	800be72 <atanf+0x1e>
 800bfb0:	3fc90fdb 	.word	0x3fc90fdb
 800bfb4:	bfc90fdb 	.word	0xbfc90fdb
 800bfb8:	3edfffff 	.word	0x3edfffff
 800bfbc:	7149f2ca 	.word	0x7149f2ca
 800bfc0:	3f97ffff 	.word	0x3f97ffff
 800bfc4:	3c8569d7 	.word	0x3c8569d7
 800bfc8:	3d4bda59 	.word	0x3d4bda59
 800bfcc:	bd15a221 	.word	0xbd15a221
 800bfd0:	be4ccccd 	.word	0xbe4ccccd
 800bfd4:	3d886b35 	.word	0x3d886b35
 800bfd8:	3dba2e6e 	.word	0x3dba2e6e
 800bfdc:	3e124925 	.word	0x3e124925
 800bfe0:	3eaaaaab 	.word	0x3eaaaaab
 800bfe4:	bd6ef16b 	.word	0xbd6ef16b
 800bfe8:	bd9d8795 	.word	0xbd9d8795
 800bfec:	bde38e38 	.word	0xbde38e38
 800bff0:	401bffff 	.word	0x401bffff
 800bff4:	0800c6fc 	.word	0x0800c6fc
 800bff8:	0800c70c 	.word	0x0800c70c

0800bffc <fabsf>:
 800bffc:	ee10 3a10 	vmov	r3, s0
 800c000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c004:	ee00 3a10 	vmov	s0, r3
 800c008:	4770      	bx	lr
	...

0800c00c <_init>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	bf00      	nop
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr

0800c018 <_fini>:
 800c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01a:	bf00      	nop
 800c01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01e:	bc08      	pop	{r3}
 800c020:	469e      	mov	lr, r3
 800c022:	4770      	bx	lr
